0
00:00:05,380 --> 00:00:08,439
Hello and welcome to the open source security podcast with myself,

1
00:00:08,449 --> 00:00:10,760
Kurt Siefried and my partner in scoring crime.

2
00:00:10,770 --> 00:00:11,800
Josh Pressers.

3
00:00:11,930 --> 00:00:15,000
Yeah, we'll get to that. I have a funny story to tell first. So

4
00:00:15,199 --> 00:00:19,360
-- in my recording studio,
-- isn't it a closet with a big crack behind

5
00:00:19,370 --> 00:00:19,760
your head?

6
00:00:19,899 --> 00:00:22,569
There's no crack anymore. I fix that. But yes, it is a closet.

7
00:00:23,590 --> 00:00:23,680
I

8
00:00:23,959 --> 00:00:28,899
have a large walk in closet. It's like 3 m by 3 m with the Slanty roof behind me.

9
00:00:28,909 --> 00:00:31,350
-- Kind
-- of, I am so proud of you for saying that.

10
00:00:31,489 --> 00:00:32,479
Well, I know

11
00:00:32,700 --> 00:00:36,770
the vast majority of our listeners are not in the United States and I would

12
00:00:36,779 --> 00:00:40,029
say anyone in the US who listens to us knows what a meter is.

13
00:00:40,040 --> 00:00:41,909
So I'm comfortable using,

14
00:00:42,159 --> 00:00:45,909
we'll say not crazy units, whatever possible temperature,

15
00:00:45,919 --> 00:00:46,799
I still struggle with sometimes.

16
00:00:46,810 --> 00:00:49,590
Anyway. Anyway. So in my recording studio slash closet,

17
00:00:50,040 --> 00:00:50,810
I, I

18
00:00:51,110 --> 00:00:53,529
was thinking, I don't like the amount of echo I'm getting.

19
00:00:53,540 --> 00:00:56,729
So I had a bunch of foam panels in the basement and I thought

20
00:00:56,740 --> 00:01:00,669
I'm going to melt them to some boards and hang them on the walls,

21
00:01:00,680 --> 00:01:01,049
right.

22
00:01:01,799 --> 00:01:03,849
So over the weekend

23
00:01:03,990 --> 00:01:07,089
I get out the contact cement. I start doing my thing

24
00:01:07,230 --> 00:01:11,169
and I thought I had an enormous amount of ventilation

25
00:01:11,180 --> 00:01:13,080
in the garage while I was working on this.

26
00:01:13,194 --> 00:01:19,055
No, you don't. I was high as a kite when I left that garage and I didn't even,

27
00:01:19,214 --> 00:01:20,644
and the thing is you don't realize it until like,

28
00:01:20,654 --> 00:01:22,095
you step in the fresh air and it's like,

29
00:01:22,205 --> 00:01:23,415
whoa, we,

30
00:01:23,425 --> 00:01:25,404
we have to put a link in the show notes to like one of

31
00:01:25,415 --> 00:01:29,035
those uh us Air Force training videos on hypoxia where like the guy,

32
00:01:29,044 --> 00:01:29,815
you know, it's like, what,

33
00:01:29,824 --> 00:01:31,345
like they have a deck of cards and they're supposed to

34
00:01:31,355 --> 00:01:33,125
pull the top card and say what car it is.

35
00:01:33,135 --> 00:01:35,214
Show it to everybody and he's like four spades

36
00:01:36,019 --> 00:01:36,480
and he pulls in,

37
00:01:36,650 --> 00:01:37,150
it's like

38
00:01:37,489 --> 00:01:39,199
four spades

39
00:01:39,940 --> 00:01:40,610
and he just gets

40
00:01:40,800 --> 00:01:44,199
like, he, he gets to the point where they put the mask on him or he's going to die.

41
00:01:44,419 --> 00:01:45,319
Yeah. Right. Right.

42
00:01:45,540 --> 00:01:48,160
It's, yeah, it's like being drunk, it sneaks up on you. And

43
00:01:48,309 --> 00:01:50,260
the problem is by the time you can realize

44
00:01:50,269 --> 00:01:52,720
you're drunk or hypoxic or messed up on solvents.

45
00:01:53,010 --> 00:01:56,319
-- Yeah, your forebrain is gone.
-- It was, it was, I was like, holy cow.

46
00:01:56,330 --> 00:01:58,440
And then I just went in the house and I told my wife I'm like,

47
00:01:58,449 --> 00:01:59,980
I need to go sit down for a little while

48
00:02:00,559 --> 00:02:00,589
and

49
00:02:00,849 --> 00:02:02,230
she's like, are you OK? I said

50
00:02:02,360 --> 00:02:04,959
I just inhaled a lot of contact cement and then of course,

51
00:02:04,970 --> 00:02:06,660
everyone started laughing at me because

52
00:02:06,800 --> 00:02:09,929
I, and I, I, like I even said, she's like, you should use ventilation.

53
00:02:09,940 --> 00:02:14,860
I was like, go look at the amount of ventilation I have going right now in that garage.

54
00:02:14,869 --> 00:02:18,929
-- Like go look and I, she goes out and looks, she comes back and it was like, holy
-- cow,

55
00:02:18,940 --> 00:02:19,889
you gotta open the garage

56
00:02:19,990 --> 00:02:21,830
and just run box fans and do this in summer.

57
00:02:21,839 --> 00:02:21,850
I,

58
00:02:21,860 --> 00:02:26,029
I have a room above my garage and I open all the windows and I actually

59
00:02:26,039 --> 00:02:30,729
had three fans sucking air out the window and it still wasn't enough like it was.

60
00:02:30,889 --> 00:02:33,649
Anyway. Anyway, valuable lesson learned, not dead.

61
00:02:33,660 --> 00:02:37,330
And now I have a bunch of foam padding on the walls, which makes me very happy.

62
00:02:37,339 --> 00:02:39,369
So that's my, that's my story.

63
00:02:39,649 --> 00:02:40,369
Anyway,

64
00:02:40,509 --> 00:02:42,250
scoring open source,

65
00:02:42,369 --> 00:02:43,830
I guess we'll have probably the show notes will be

66
00:02:43,839 --> 00:02:45,529
like the judge is holding up the 9 to 10,

67
00:02:45,539 --> 00:02:46,009
whatever.

68
00:02:46,509 --> 00:02:49,050
I don't know. We'll see. I've gotta, I gotta think about that anyway.

69
00:02:49,139 --> 00:02:53,779
So the reason we're talking about this is there's the open SSF which uh open

70
00:02:53,789 --> 00:02:56,820
source Security Foundation I think it's in for if you don't know who they are,

71
00:02:56,830 --> 00:02:57,770
like, just go look them up.

72
00:02:57,779 --> 00:03:01,220
It, it's, they have many projects they do

73
00:03:01,350 --> 00:03:03,539
and one of them is they're calling the,

74
00:03:03,679 --> 00:03:05,089
the open score cards, I think.

75
00:03:05,429 --> 00:03:07,970
And basically they released version 3.0 of this.

76
00:03:07,979 --> 00:03:10,139
And so Kurt and I started kind of chatting on signal. And I,

77
00:03:10,244 --> 00:03:14,264
this would be a fun topic because here is the first question that comes to my brain.

78
00:03:14,274 --> 00:03:20,005
Is it acceptable to be measuring an open source project

79
00:03:20,214 --> 00:03:24,134
-- that you say have no relationship to?
-- Yeah, of course it is.

80
00:03:24,404 --> 00:03:28,324
Yeah. Well, we look at cars whose ratings do you trust about a car?

81
00:03:28,335 --> 00:03:31,654
More Ford's ratings or consumer reports where consumer reports goes and

82
00:03:31,664 --> 00:03:33,744
buys a car and smashes it to make sure it's safe.

83
00:03:34,110 --> 00:03:37,570
So here's the thing I keep thinking about on this though is there,

84
00:03:37,580 --> 00:03:38,970
there's measuring like, say

85
00:03:39,259 --> 00:03:42,839
the Apache software foundation projects which I'm perfectly ok with.

86
00:03:42,850 --> 00:03:43,970
But then there's like

87
00:03:44,259 --> 00:03:46,649
some stuff a guy wrote

88
00:03:47,179 --> 00:03:49,320
the score is going to be terrible

89
00:03:49,574 --> 00:03:52,104
because they don't want to do this. Now, what does

90
00:03:52,285 --> 00:03:55,214
you're telling someone your baby is ugly because

91
00:03:55,225 --> 00:03:56,985
you're not following these rules we made,

92
00:03:57,044 --> 00:03:59,455
-- but
-- we're supposed to give everybody a free pass and open.

93
00:03:59,464 --> 00:04:00,714
Let me put it this way.

94
00:04:00,955 --> 00:04:04,835
We don't hang children's art in the Louver just because they put their heart into it.

95
00:04:05,690 --> 00:04:06,289
So

96
00:04:07,009 --> 00:04:10,740
I don't, I don't want to use open source that somebody really cares about.

97
00:04:10,979 --> 00:04:14,160
I want to use open source. That's really good. I,

98
00:04:14,899 --> 00:04:17,899
and the reality is in a lot of open source.

99
00:04:17,910 --> 00:04:21,959
The one that is even not very good is still better than any other option,

100
00:04:22,890 --> 00:04:25,980
right? Like my favorite thing to pick on is Lib J peg because

101
00:04:26,329 --> 00:04:32,570
LJ Pig started out life as a thesis defense. Right. Straight up somebody at U BC

102
00:04:33,040 --> 00:04:38,279
was wrote Lib J peg for their thesis and then, because it was open source licensed,

103
00:04:38,290 --> 00:04:39,470
everybody else used it.

104
00:04:39,769 --> 00:04:43,450
I tried tracking this human being down. I was unable to.

105
00:04:43,679 --> 00:04:44,230
Wow.

106
00:04:44,440 --> 00:04:45,160
Well, it's lib J

107
00:04:45,309 --> 00:04:48,790
peg. Like it's trust me. If you have a device with AC pu in it,

108
00:04:49,000 --> 00:04:52,350
there's a copy of lib J peg floating around somewhere on the storage attached to it.

109
00:04:52,489 --> 00:04:56,549
-- You
-- know, this reminds me of a story from a long time ago is the the folks

110
00:04:56,920 --> 00:04:57,850
Z if that do

111
00:04:57,959 --> 00:04:58,130
OG

112
00:04:58,299 --> 00:04:58,339
Vars

113
00:04:59,489 --> 00:05:03,380
the sound and they do like BP eight I think, and they've got a bunch of codex, right?

114
00:05:03,390 --> 00:05:05,690
They're like really smart people and the guy who kind of runs it all.

115
00:05:05,700 --> 00:05:07,209
His name is Chris Montgomery. He's really cool.

116
00:05:07,220 --> 00:05:09,839
He's got some really good youtube videos talking about this stuff.

117
00:05:09,850 --> 00:05:12,609
I will dig up and put in the show notes because there he

118
00:05:12,619 --> 00:05:15,950
was called the Bob Ross of audio at one point and they're phenomenal.

119
00:05:15,959 --> 00:05:20,339
Anyway, anyway, I remember there was some security issues in I think it was,

120
00:05:20,720 --> 00:05:22,070
it was the, I

121
00:05:22,470 --> 00:05:23,380
think it was Lib Vor

122
00:05:24,079 --> 00:05:24,799
at the time

123
00:05:25,049 --> 00:05:28,959
and I was talking to him and he's like, oh, this is meant to be a reference library.

124
00:05:28,970 --> 00:05:30,779
No one should be using this in production.

125
00:05:30,790 --> 00:05:31,980
I was like, Chris,

126
00:05:32,040 --> 00:05:35,420
this is in everything like this is literally one

127
00:05:35,429 --> 00:05:37,880
of the most used libraries on the planet today.

128
00:05:38,000 --> 00:05:39,589
We need to worry about this.

129
00:05:39,600 --> 00:05:39,880
Well,

130
00:05:39,890 --> 00:05:44,029
here's the thing is there even a remote second place contender to something like Lib

131
00:05:44,140 --> 00:05:45,309
Forbis or Lib Jpeg

132
00:05:45,579 --> 00:05:47,790
that is even 50% as functional

133
00:05:48,149 --> 00:05:53,059
open SSL like, oh, you mean you mean direct competitors to those libraries?

134
00:05:53,160 --> 00:05:53,839
OK. So liv

135
00:05:54,209 --> 00:05:56,089
vs is, here's arguing. Liv

136
00:05:56,380 --> 00:05:58,950
Forbis is supposed to be the reference implementation is like saying we're

137
00:05:58,959 --> 00:06:00,920
going to build a prototype and then build it for real.

138
00:06:00,929 --> 00:06:04,779
No, if you build a prototype that even works 50% bam that's production.

139
00:06:04,790 --> 00:06:07,600
-- Why the heck did you rewrite it?
-- No, I agree. I agree.

140
00:06:08,589 --> 00:06:12,399
Well, it's just that if we haven't figured that out in the last 50 years of software,

141
00:06:12,410 --> 00:06:14,290
then there's, there's no hope like that.

142
00:06:14,299 --> 00:06:15,309
That's just how it is.

143
00:06:15,429 --> 00:06:16,160
I

144
00:06:16,500 --> 00:06:19,869
won't lie to you when I say I've done this more than once where I do

145
00:06:19,880 --> 00:06:22,630
something and I know it's exceptionally poor quality

146
00:06:22,640 --> 00:06:25,429
and I think it's just an experiment.

147
00:06:25,899 --> 00:06:30,470
That's my justification to myself of why it sucks so hard anyway. Anyway. OK.

148
00:06:30,480 --> 00:06:32,260
So scoring. OK. So

149
00:06:32,600 --> 00:06:33,019
I,

150
00:06:33,589 --> 00:06:38,829
I guess you're not wrong is if I'm a company and I'm doing something with open source,

151
00:06:38,980 --> 00:06:42,119
even if it's the kids' picture on the refrigerator,

152
00:06:42,130 --> 00:06:46,130
at least I know it's a kid's picture on the refrigerator and it's not a work of art

153
00:06:46,230 --> 00:06:49,170
that I'm, I'm dealing with. And I guess just knowing that

154
00:06:49,420 --> 00:06:51,529
is probably acceptable,

155
00:06:51,540 --> 00:06:56,500
I would say this is part of the artistic and software process is it's OK.

156
00:06:56,510 --> 00:06:57,570
When you give somebody a gift,

157
00:06:57,579 --> 00:06:59,880
you give them a gift and they get to do with it as they wish.

158
00:06:59,890 --> 00:07:01,250
That's kind of how gifts work, right?

159
00:07:01,570 --> 00:07:07,420
And I would say if you release art or you release software or you release literature,

160
00:07:07,920 --> 00:07:09,570
you are now open to critique.

161
00:07:10,079 --> 00:07:11,029
That is how that works.

162
00:07:11,040 --> 00:07:13,790
If you do not want your work critiqued, don't show it to anybody.

163
00:07:13,799 --> 00:07:16,149
I guess that's probably fair

164
00:07:16,359 --> 00:07:16,459
you

165
00:07:16,790 --> 00:07:17,950
up and down both buttons.

166
00:07:19,269 --> 00:07:19,519
They

167
00:07:19,630 --> 00:07:22,329
do and a comment section that is a toxic.

168
00:07:23,630 --> 00:07:25,209
And so I, I would argue

169
00:07:25,700 --> 00:07:29,109
now that's not to say people should be mean and rude and terrible. Like

170
00:07:29,459 --> 00:07:31,250
there's a big difference between constructive

171
00:07:31,260 --> 00:07:33,059
criticism and helpful feedback then.

172
00:07:33,070 --> 00:07:34,929
Well, yeah, the youtube comment section.

173
00:07:35,440 --> 00:07:38,290
Well, and I guess with these scores,

174
00:07:38,609 --> 00:07:43,299
some projects will release a score and they will take it to heart and say

175
00:07:43,410 --> 00:07:47,089
-- I could do better with this. Some projects won't.
-- Well, some projects

176
00:07:47,100 --> 00:07:47,690
can't.

177
00:07:47,700 --> 00:07:51,399
Well, yes and, and that's so that's my next point is

178
00:07:51,670 --> 00:07:54,410
I think one of the missing pieces to all this

179
00:07:54,589 --> 00:07:55,329
is

180
00:07:55,899 --> 00:07:58,369
so the open ssf has all these projects.

181
00:07:58,380 --> 00:08:00,010
They're doing things like measuring open source.

182
00:08:00,019 --> 00:08:02,130
They've got the salsa framework now like this is

183
00:08:02,140 --> 00:08:04,589
cool work and I think this is very important.

184
00:08:04,600 --> 00:08:07,500
Like don't get me wrong. None of it's perfect. I'm not gonna say it's perfect,

185
00:08:07,760 --> 00:08:14,040
but this is all a good start down a very long road that we have in front of us. However,

186
00:08:14,209 --> 00:08:18,559
I think one of the pieces missing is, I feel like, so you just scored a project.

187
00:08:18,690 --> 00:08:19,720
They didn't do great.

188
00:08:20,250 --> 00:08:21,109
Now what?

189
00:08:21,239 --> 00:08:24,269
You know what I mean? And I don't think there's any follow through that I'm aware of.

190
00:08:24,279 --> 00:08:28,010
Well, and that's the thing though. It's, it's not up to the open ssf to decide.

191
00:08:28,019 --> 00:08:31,989
Now what, because now what might be, it doesn't matter or now what might be?

192
00:08:32,000 --> 00:08:34,000
Somebody sees that score and goes, oh, this is,

193
00:08:34,080 --> 00:08:35,590
I actually use this and maybe they need

194
00:08:35,664 --> 00:08:37,544
some help because one thing that drives me nuts

195
00:08:37,744 --> 00:08:43,135
is I think we can both agree that the vast majority of open source that gets used

196
00:08:43,265 --> 00:08:45,244
like actually used like not somebody's pet, you know,

197
00:08:45,255 --> 00:08:47,325
project with like three users but something like

198
00:08:47,565 --> 00:08:50,794
and I, I like left, I was it left pad, right.

199
00:08:52,150 --> 00:08:54,289
But companies use that and they,

200
00:08:54,299 --> 00:08:59,530
they use it heavily and they rarely if ever contribute anything meaningful back.

201
00:09:00,010 --> 00:09:02,289
And this might be a good signal for companies to go.

202
00:09:02,299 --> 00:09:05,919
Oh, like this thing that we rely upon heavily, we need to maybe

203
00:09:06,049 --> 00:09:08,969
-- help keep it healthy.
-- I think you're, you're halfway there.

204
00:09:09,090 --> 00:09:12,530
Here is the better example I would give is when we

205
00:09:12,539 --> 00:09:16,010
were at Red Hat and working heavily with open source projects,

206
00:09:16,289 --> 00:09:20,229
we would never just show up with a vulnerability and say here you go, fix it.

207
00:09:20,330 --> 00:09:24,429
We would always show up with help and say we found this.

208
00:09:24,440 --> 00:09:28,789
If you want us to help you with this, we will, here is what we can do to help you be it.

209
00:09:28,799 --> 00:09:32,349
We can work on patches, we can review patches, we can write advisories for you.

210
00:09:32,359 --> 00:09:33,539
We can get you CV ES.

211
00:09:33,549 --> 00:09:34,669
-- We can
-- coordinate,

212
00:09:34,679 --> 00:09:37,320
you can't score a like you can't score 10,000 open

213
00:09:37,330 --> 00:09:39,390
source projects and then offer all of them help.

214
00:09:39,760 --> 00:09:43,669
No, no, I I agree. I'm not saying the Linux Foundation needs to

215
00:09:43,799 --> 00:09:46,109
specifically do this themselves,

216
00:09:46,400 --> 00:09:47,750
but I feel like

217
00:09:47,869 --> 00:09:49,809
the thing that scares me to death

218
00:09:50,099 --> 00:09:55,059
is we're going to score all this stuff and people are going to start freaking out

219
00:09:55,369 --> 00:09:58,820
and they're going to do dumb things like say, oh, we'll just write that ourselves,

220
00:09:58,830 --> 00:09:59,880
which is like

221
00:10:01,130 --> 00:10:01,400
that

222
00:10:01,559 --> 00:10:05,299
if their process and, and management is that immature,

223
00:10:05,659 --> 00:10:07,940
they're, they're gonna do dumb things regardless. I mean,

224
00:10:08,119 --> 00:10:09,020
that could be

225
00:10:09,169 --> 00:10:10,099
like no offense, but

226
00:10:10,440 --> 00:10:13,039
I, I don't buy that as an argument.

227
00:10:13,049 --> 00:10:16,140
The like this is like saying, oh, if we, you know, if,

228
00:10:16,150 --> 00:10:19,700
if consumer reports gets the score on a car wrong, people won't buy that car.

229
00:10:20,309 --> 00:10:20,380
That,

230
00:10:20,609 --> 00:10:22,369
that is true though.

231
00:10:22,380 --> 00:10:27,440
If they fail a car based on faulty assumptions, no one is going to buy that car.

232
00:10:28,070 --> 00:10:28,659
In that case,

233
00:10:28,669 --> 00:10:31,869
there's a car manufacturer with a lot of money who should then help correct that,

234
00:10:32,020 --> 00:10:32,489
you know,

235
00:10:32,659 --> 00:10:36,099
-- so the dynamics are different.
-- But if I'm a person with the github

236
00:10:36,260 --> 00:10:37,039
project,

237
00:10:37,440 --> 00:10:37,469
you're

238
00:10:37,570 --> 00:10:37,599
not

239
00:10:37,799 --> 00:10:39,130
my project wrong.

240
00:10:39,299 --> 00:10:41,070
So what, what now,

241
00:10:41,260 --> 00:10:42,489
I mean, and maybe, I don't know,

242
00:10:42,650 --> 00:10:43,780
and there have been open

243
00:10:43,909 --> 00:10:46,830
source projects in the past that have become pariahs for a variety of reasons.

244
00:10:46,840 --> 00:10:49,479
Like the maintainer was a jerk or

245
00:10:49,669 --> 00:10:50,030
the,

246
00:10:50,182 --> 00:10:51,843
the project was very, oh, I mean,

247
00:10:51,853 --> 00:10:55,742
we've seen cases where the project is a nightmare to work with and so people fork it

248
00:10:56,273 --> 00:10:57,502
and it is true. You know,

249
00:10:57,732 --> 00:11:01,882
again, what, like why is there some, why is there this expectation

250
00:11:02,023 --> 00:11:05,603
that I wrote a piece of open source software? And now the world owes me something

251
00:11:05,822 --> 00:11:09,622
-- and
-- I don't think they necessarily do and I agree with that.

252
00:11:09,732 --> 00:11:12,793
I think if you open source, your project,

253
00:11:13,052 --> 00:11:15,843
you owe the world nothing and they owe you nothing.

254
00:11:15,853 --> 00:11:18,043
I pretty sure that's explicitly in the license

255
00:11:18,163 --> 00:11:19,203
pretty much like

256
00:11:19,622 --> 00:11:19,922
on the

257
00:11:20,056 --> 00:11:21,616
source bits, right? Obviously,

258
00:11:21,806 --> 00:11:23,866
I want to give a shout out to Tide Lift right now.

259
00:11:23,875 --> 00:11:25,145
I don't know if anyone else doing this,

260
00:11:25,156 --> 00:11:27,796
if there's other companies doing this sort of work, like, let me know,

261
00:11:27,856 --> 00:11:32,556
but Tide Lift is a company that's working on basically funding open source work.

262
00:11:32,565 --> 00:11:34,685
And so they're doing some really cool stuff if

263
00:11:34,695 --> 00:11:36,306
you're a company using lots of open source,

264
00:11:36,315 --> 00:11:37,005
like go check them out.

265
00:11:37,015 --> 00:11:40,106
-- It's totally worth it.
-- I look at Patreon and at first I was like, oh

266
00:11:40,435 --> 00:11:41,455
yuck, but

267
00:11:41,556 --> 00:11:42,875
there's actually some really,

268
00:11:42,885 --> 00:11:46,375
really good content creators now that are getting funded through

269
00:11:46,385 --> 00:11:48,536
Patreon that are doing some really good work and,

270
00:11:48,546 --> 00:11:49,835
and some, you know, a lot of it is,

271
00:11:50,789 --> 00:11:53,369
I guess it would be like hyper niche kind of

272
00:11:53,690 --> 00:11:55,890
knowledge or hobbies, you know,

273
00:11:56,239 --> 00:11:56,659
like

274
00:11:57,039 --> 00:11:57,590
which,

275
00:11:57,770 --> 00:11:57,940
yeah,

276
00:11:57,950 --> 00:11:59,809
it turns out there's like 1000 people globally that will

277
00:11:59,820 --> 00:12:02,809
pay a dollar or $2 or $5 a month.

278
00:12:02,820 --> 00:12:03,039
And

279
00:12:03,369 --> 00:12:04,809
well, now that's your full time job.

280
00:12:05,260 --> 00:12:06,049
Yep. Yep.

281
00:12:06,159 --> 00:12:09,409
Yeah. Totally. Totally. Alright. Alright. Before we,

282
00:12:09,700 --> 00:12:10,179
I want,

283
00:12:10,190 --> 00:12:11,700
I want to talk about some of these scores

284
00:12:11,710 --> 00:12:14,330
because I think there's like the criteria they're using.

285
00:12:14,340 --> 00:12:18,039
I think there's some interesting stuff here. So let me pull up the list.

286
00:12:18,349 --> 00:12:19,570
Here it is. Alright. Alright.

287
00:12:19,739 --> 00:12:23,010
So I'm just going to start at the top. I'll put a link to this list in the show notes.

288
00:12:23,020 --> 00:12:25,559
You can, you can look it up and follow along if you like.

289
00:12:25,849 --> 00:12:29,359
Uh All right. So the first one here says binary artifacts

290
00:12:29,780 --> 00:12:33,330
is the project free of checked in binaries. This is where

291
00:12:33,539 --> 00:12:36,969
let's say a project checks in an executable file,

292
00:12:36,979 --> 00:12:38,969
which is obviously a terrible idea into their github

293
00:12:39,099 --> 00:12:39,450
repo.

294
00:12:39,840 --> 00:12:39,880
I

295
00:12:39,989 --> 00:12:42,789
I don't I don't think anyone's going to complain about this one, right?

296
00:12:42,799 --> 00:12:45,739
Um Well, binary objects. What about artwork or MP threes?

297
00:12:45,750 --> 00:12:49,340
I wouldn't if they if they're I haven't read the long description

298
00:12:49,349 --> 00:12:51,270
of this one because I felt like it was too obvious.

299
00:12:51,950 --> 00:12:52,380
I

300
00:12:53,289 --> 00:12:54,539
there is no way

301
00:12:54,669 --> 00:12:55,960
they count that as a binary

302
00:12:57,880 --> 00:12:59,780
would in general

303
00:12:59,950 --> 00:13:03,710
99.999% agree with.

304
00:13:03,760 --> 00:13:06,020
I'm sure there's one or two valid corner cases,

305
00:13:06,030 --> 00:13:09,140
which is basically you're going to need like a phone book size disclaimer.

306
00:13:09,340 --> 00:13:12,340
So, it basically is true. I think the biggest thing about

307
00:13:12,520 --> 00:13:14,619
the, the lack of binary would be

308
00:13:15,679 --> 00:13:15,739
of

309
00:13:17,239 --> 00:13:19,140
every time I've seen a binary pulled in,

310
00:13:19,150 --> 00:13:20,820
it's because of an immature process and it

311
00:13:20,830 --> 00:13:23,320
indicates a whole pile of other problems basically.

312
00:13:23,940 --> 00:13:24,359
Right. Right.

313
00:13:24,690 --> 00:13:25,219
You know, it's like,

314
00:13:25,510 --> 00:13:28,489
let me put it this way when you find a rotten floor in a house,

315
00:13:28,520 --> 00:13:31,830
it's not just a rotten floor in a house, the water came from somewhere.

316
00:13:31,859 --> 00:13:35,299
Yeah, I just looked this up. Uh, specifically they call it compiled.

317
00:13:37,010 --> 00:13:39,330
We're good. We're good. I don't want to dwell on this one.

318
00:13:39,340 --> 00:13:40,500
It's too obvious, too obvious.

319
00:13:40,840 --> 00:13:44,419
Uh, brand protection. Does the project use brand protection. No brainer.

320
00:13:44,590 --> 00:13:48,320
-- Here's
-- if you have like a single developer project, it doesn't really matter.

321
00:13:48,330 --> 00:13:49,789
-- I mean,
-- no, no, it doesn't.

322
00:13:49,799 --> 00:13:54,960
But I think for any project of any reasonable size as say, two or more developers.

323
00:13:55,070 --> 00:13:56,260
Yeah. Sure, great idea.

324
00:13:56,650 --> 00:13:58,539
Yeah, it's a coordinating tool.

325
00:13:58,580 --> 00:14:02,989
Well, not only that, this helps you not screw things up.

326
00:14:03,070 --> 00:14:06,270
You hear about these horror stories where people accidentally do like a

327
00:14:06,280 --> 00:14:09,429
forced merger or something and they blow away all of their github

328
00:14:09,599 --> 00:14:10,140
repo.

329
00:14:10,500 --> 00:14:12,309
This protects you from that

330
00:14:12,570 --> 00:14:12,599
use

331
00:14:14,359 --> 00:14:14,429
it.

332
00:14:14,580 --> 00:14:14,869
That was,

333
00:14:15,059 --> 00:14:15,830
that was easy.

334
00:14:16,010 --> 00:14:20,320
Uh C I test does a project run tests and ci I feel like

335
00:14:20,659 --> 00:14:24,140
this one is, I don't have huge complaints about this one. Really.

336
00:14:24,150 --> 00:14:25,869
When we interviewed Danny pointed out that

337
00:14:26,270 --> 00:14:27,849
you need to have a testing framework,

338
00:14:27,859 --> 00:14:29,789
even if you have zero tests because once you

339
00:14:29,799 --> 00:14:32,020
have a testing framework then you can have tests.

340
00:14:32,289 --> 00:14:33,260
Right. Exactly.

341
00:14:33,460 --> 00:14:35,099
And now I will say so

342
00:14:35,260 --> 00:14:38,969
I recently I, I'll put a link. I, my son

343
00:14:39,229 --> 00:14:40,520
is learning Python.

344
00:14:40,530 --> 00:14:43,559
He's on the robotics team for his school and they're going to use Python.

345
00:14:43,570 --> 00:14:44,570
And I'm like, good idea.

346
00:14:44,700 --> 00:14:45,770
What's the alternative?

347
00:14:45,780 --> 00:14:49,890
Well, well, so the supported languages we'll put them in quotes is A C++

348
00:14:50,541 --> 00:14:51,072
and I'm like,

349
00:14:51,882 --> 00:14:53,742
there's nothing wrong with those. But if

350
00:14:53,892 --> 00:14:56,521
-- there is for Python, that's better.
-- Do you love your child?

351
00:14:56,531 --> 00:14:58,052
And is he under the age of 18,

352
00:14:58,742 --> 00:15:00,822
-- Python is
-- the choice anyway. Anyway, the point is

353
00:15:00,961 --> 00:15:00,971
I,

354
00:15:00,981 --> 00:15:05,541
I stood up like a Python skeleton framework that has the unit test and it has

355
00:15:05,552 --> 00:15:08,341
like how the modules should be laid out and stuff for these kids because I'm like,

356
00:15:08,351 --> 00:15:09,911
look, just check this out and use it.

357
00:15:09,921 --> 00:15:13,091
This is going to save you for someone who doesn't know how Python works.

358
00:15:13,101 --> 00:15:13,611
This is probably

359
00:15:13,754 --> 00:15:13,763
a

360
00:15:14,033 --> 00:15:15,734
week's worth of work for these kids.

361
00:15:15,744 --> 00:15:19,854
-- And I'm like, I did this in a couple of hours, just take it and go.
-- Is it in github?

362
00:15:19,953 --> 00:15:20,573
Because I know in github

363
00:15:20,674 --> 00:15:21,213
there's like a github.

364
00:15:21,393 --> 00:15:22,934
Ignore repo that has all the

365
00:15:23,064 --> 00:15:23,424
get

366
00:15:23,573 --> 00:15:26,403
ignores for, say Python or emacs or all these other things.

367
00:15:26,734 --> 00:15:26,754
Yeah.

368
00:15:26,934 --> 00:15:26,953
Yeah,

369
00:15:27,564 --> 00:15:31,164
they do. They do. I, I didn't add that. But anyway, anyway, doesn't matter.

370
00:15:31,213 --> 00:15:31,453
All right.

371
00:15:31,723 --> 00:15:34,414
No, no. I mean, did you, did you put your Python stand up thing in Github?

372
00:15:34,554 --> 00:15:36,434
-- So that other people can just grab it?
-- Oh, yeah, it's in,

373
00:15:36,783 --> 00:15:37,124
I'll put them on.

374
00:15:37,435 --> 00:15:38,955
It's not very exciting.

375
00:15:38,966 --> 00:15:40,526
Um, anyway, anyway, anyone,

376
00:15:40,536 --> 00:15:42,976
anyone moderately competent can do this in a couple of minutes.

377
00:15:42,986 --> 00:15:44,926
I'm not moderately competent. So it took me two hours.

378
00:15:45,036 --> 00:15:46,856
All right. Uh, ca I best practices.

379
00:15:46,866 --> 00:15:50,125
We talked to David Wheeler about ci I in like,

380
00:15:50,135 --> 00:15:53,135
I think it was one of the single digit episodes of this podcast.

381
00:15:53,145 --> 00:15:55,856
I'm not going to link to the show because we sucked back then.

382
00:15:56,046 --> 00:15:58,385
But we should probably bring David back at some point

383
00:15:58,395 --> 00:16:00,406
and talk about what CI I is doing today.

384
00:16:00,416 --> 00:16:01,056
I feel like

385
00:16:01,729 --> 00:16:05,520
I like ci I because it is an opt in program.

386
00:16:05,530 --> 00:16:09,320
So if a program is, or if a project is mature enough,

387
00:16:09,599 --> 00:16:12,010
they can opt to ci I and say these are

388
00:16:12,020 --> 00:16:14,270
the things we're doing and ca I provide some guidance.

389
00:16:14,280 --> 00:16:16,950
I think maybe the scorecard and salsa might,

390
00:16:17,270 --> 00:16:20,400
will say encapsulate ci I at some point. But for the moment,

391
00:16:20,549 --> 00:16:21,719
it's a great program.

392
00:16:21,880 --> 00:16:23,859
If you have a project, you should go look at it.

393
00:16:24,140 --> 00:16:25,080
Yeah, I would agree.

394
00:16:25,090 --> 00:16:25,380
I mean,

395
00:16:25,390 --> 00:16:27,909
CIA actually has some good actionable advice and

396
00:16:27,919 --> 00:16:30,239
generally has goals that are consistent with sanity.

397
00:16:30,780 --> 00:16:32,460
-- Yeah.
-- Absolutely. Absolutely.

398
00:16:32,979 --> 00:16:34,460
Alright. Uh code views.

399
00:16:34,469 --> 00:16:37,359
Does the project require code reviews before code is merged?

400
00:16:37,979 --> 00:16:39,650
Yeah, that's, well,

401
00:16:39,659 --> 00:16:42,419
and the thing is as much as I want to say that's absolutely required.

402
00:16:42,460 --> 00:16:43,479
It should be. But

403
00:16:43,619 --> 00:16:44,809
my concern is code reviews.

404
00:16:44,820 --> 00:16:48,099
Always my eyes glaze over and I just smash that like button.

405
00:16:48,289 --> 00:16:49,409
Well, that's just it, I mean

406
00:16:49,599 --> 00:16:49,659
the

407
00:16:49,770 --> 00:16:49,880
lyrics

408
00:16:50,190 --> 00:16:55,200
-- incident, right?
-- If you're a one person show you who's going to review your code.

409
00:16:55,210 --> 00:17:00,489
You actually, it's funny I have AAA repo at work. I do some things in that

410
00:17:00,596 --> 00:17:03,056
I'm the only committer to but I still have my own branch

411
00:17:03,666 --> 00:17:05,724
and I approve my own commits.

412
00:17:05,826 --> 00:17:07,935
So it's like this is stupid, you know.

413
00:17:08,165 --> 00:17:08,395
Well,

414
00:17:08,406 --> 00:17:10,175
but the thing is you've now set it up so that when

415
00:17:10,185 --> 00:17:12,296
a second person comes along and wants to help you with it,

416
00:17:12,306 --> 00:17:12,695
there's

417
00:17:12,806 --> 00:17:13,836
ok. Click.

418
00:17:14,015 --> 00:17:16,005
There's nothing to set up. There's no friction.

419
00:17:16,385 --> 00:17:19,175
-- This
-- is the ultimate forever alone meme because it

420
00:17:19,185 --> 00:17:21,214
was like people will come and help me.

421
00:17:21,224 --> 00:17:23,125
Nobody came in

422
00:17:23,244 --> 00:17:23,276
here.

423
00:17:23,911 --> 00:17:26,621
It's just me approving my own commands. Like do do do.

424
00:17:27,421 --> 00:17:27,722
Yeah,

425
00:17:28,092 --> 00:17:30,942
I would say it's one of those things. It's like shoulder checking. I always

426
00:17:31,332 --> 00:17:32,462
always shoulder check,

427
00:17:32,472 --> 00:17:35,072
even when I'm merging into a lane that like starts like

428
00:17:35,082 --> 00:17:37,381
there's a curve that winds out and the lane starts.

429
00:17:37,391 --> 00:17:40,531
I still shoulder check because my rule is I always shoulder

430
00:17:40,541 --> 00:17:43,541
check and I always signal my lane changes so that it's just

431
00:17:43,791 --> 00:17:45,982
physical mechanical habit

432
00:17:46,300 --> 00:17:46,900
Yep. Yep.

433
00:17:47,000 --> 00:17:50,719
And I, because I've caught myself almost merging into people when I'm tired but,

434
00:17:50,729 --> 00:17:53,380
because it's just like an ingrained reflex.

435
00:17:54,300 --> 00:17:54,319
Oh,

436
00:17:54,800 --> 00:17:57,930
-- there's a car
-- there. We got to keep going. We're going to run out of time

437
00:17:58,140 --> 00:17:58,989
contributors.

438
00:17:59,000 --> 00:18:02,890
Does the project have contributors from at least two different organizations?

439
00:18:06,449 --> 00:18:08,910
It's, it's one of those health of the project issues

440
00:18:09,219 --> 00:18:10,300
and it's also

441
00:18:10,810 --> 00:18:11,109
like,

442
00:18:11,119 --> 00:18:13,030
what if the guy wants to go or the girl or

443
00:18:13,040 --> 00:18:15,640
the whoever wants to go on sabbatical or take a vacation?

444
00:18:15,869 --> 00:18:17,579
I mean, that's fair. I,

445
00:18:17,859 --> 00:18:19,589
and there's like a critical security flaw in it.

446
00:18:19,739 --> 00:18:21,989
Yeah, I'm not going to argue this 11 way or the other.

447
00:18:22,000 --> 00:18:24,439
I feel like there's lots of projects that might have

448
00:18:24,449 --> 00:18:26,949
a handful of people from the same organization like is that

449
00:18:27,140 --> 00:18:27,479
and

450
00:18:27,920 --> 00:18:27,930
a

451
00:18:28,209 --> 00:18:28,959
perfect example.

452
00:18:28,969 --> 00:18:31,329
I was looking at the smart health card standard and so of course,

453
00:18:31,339 --> 00:18:32,819
went and grabbed the Python library for it,

454
00:18:32,829 --> 00:18:35,359
which is actually really simple and noticed somebody had

455
00:18:35,489 --> 00:18:36,939
cloned the Python library

456
00:18:37,209 --> 00:18:39,099
kind of removed a bunch of the

457
00:18:39,359 --> 00:18:44,680
uh history and then published it on um on one of the sites essentially

458
00:18:44,689 --> 00:18:47,719
under their name with a sort of a more search engine optimized name.

459
00:18:48,579 --> 00:18:49,130
And

460
00:18:49,290 --> 00:18:51,099
you know, that that library is probably gonna

461
00:18:51,479 --> 00:18:53,150
become widely used now,

462
00:18:53,170 --> 00:18:54,939
but it's just sort of one person who I'm not

463
00:18:54,949 --> 00:18:57,709
sure they have the expertise to actually fix the library.

464
00:18:58,739 --> 00:19:01,560
So I would say that this is important because it's a red flag.

465
00:19:01,569 --> 00:19:02,920
It's, it goes back to, you know,

466
00:19:02,930 --> 00:19:06,140
y Combinator where they will not take a pitch from a single person

467
00:19:06,150 --> 00:19:09,719
company because if you cannot convince another person to work on your idea,

468
00:19:10,030 --> 00:19:13,650
-- we're not giving you money for it. Yeah, that's
-- fair. OK. OK. I think we're in

469
00:19:13,880 --> 00:19:15,880
agreement. Dependency update tool.

470
00:19:15,890 --> 00:19:18,979
-- Does the project use tools to help update its dependencies?
-- Yeah.

471
00:19:18,989 --> 00:19:22,680
-- If you don't do this and it's 2021. Yeah,
-- I agree. I mean

472
00:19:23,229 --> 00:19:23,500
github

473
00:19:23,660 --> 00:19:24,209
has depend,

474
00:19:24,390 --> 00:19:24,760
aot depend

475
00:19:24,910 --> 00:19:25,859
aot is free, right?

476
00:19:25,869 --> 00:19:29,510
There's other, if you're a company, you can pay another organization to,

477
00:19:29,520 --> 00:19:31,890
there's a bunch of scanning vendor like, yeah, this is,

478
00:19:31,900 --> 00:19:34,810
this is the world we're in today and you can make arguments about how,

479
00:19:34,819 --> 00:19:37,630
oh the scanners have a lot of false positives and some of

480
00:19:37,640 --> 00:19:40,479
these don't really matter and whatever and some of that is true.

481
00:19:40,665 --> 00:19:42,334
But I think generally speaking,

482
00:19:42,444 --> 00:19:46,084
these scanners have become pretty good at what they're doing.

483
00:19:46,094 --> 00:19:46,905
Well, more to the point.

484
00:19:46,915 --> 00:19:48,944
If you're using any modern language that has

485
00:19:48,954 --> 00:19:51,165
built independency management and you're ignoring it,

486
00:19:51,175 --> 00:19:51,604
then

487
00:19:51,775 --> 00:19:55,724
what else are you doing wrong? And I will use the word wrong very clearly. Yep.

488
00:19:55,734 --> 00:19:58,005
Yep, 100%. Uh All right.

489
00:19:58,300 --> 00:20:01,839
Fuzzing. Does the project use fuzzing tools like Os S Fuzz?

490
00:20:01,910 --> 00:20:05,439
Um I'm OK with them not fuzzing because some

491
00:20:05,609 --> 00:20:08,040
tools are uh not,

492
00:20:08,170 --> 00:20:12,189
they don't really. OK. Perfect example. I remember American Date. It converts

493
00:20:12,329 --> 00:20:14,319
normal sane rational dates into that

494
00:20:14,500 --> 00:20:15,959
month, day, year format.

495
00:20:15,979 --> 00:20:17,525
If you were to fuzz it, in theory,

496
00:20:17,535 --> 00:20:20,305
you should find all the edge cases pretty quick and fix it.

497
00:20:20,314 --> 00:20:22,734
Fuzzing is complicated.

498
00:20:22,744 --> 00:20:23,925
Some languages,

499
00:20:23,935 --> 00:20:26,015
strongly typed languages lend themselves well

500
00:20:26,025 --> 00:20:27,944
to fuzzing weekly type languages don't.

501
00:20:27,954 --> 00:20:30,875
So for example, Fuzzing a node library is

502
00:20:31,084 --> 00:20:35,035
nontrivial generally, but fuzzing say a Java library is usually pretty easy.

503
00:20:35,314 --> 00:20:37,224
So this one, I think

504
00:20:37,790 --> 00:20:41,310
I'm OK with this score but they, I don't, they don't put a ton of weight on it,

505
00:20:41,319 --> 00:20:42,250
which I think is right.

506
00:20:42,260 --> 00:20:42,869
I would

507
00:20:43,430 --> 00:20:45,750
put it more fuzzing

508
00:20:46,089 --> 00:20:49,030
the interfaces that accept user controlled input,

509
00:20:49,040 --> 00:20:50,650
be it network or files or whatever.

510
00:20:51,089 --> 00:20:51,510
I mean,

511
00:20:51,670 --> 00:20:53,810
yeah, but like the problem you get is

512
00:20:54,160 --> 00:20:58,949
you have to, there's, there's a lot of heavy lifting if it's a weekly type language.

513
00:20:58,959 --> 00:21:01,140
But anyway, um yeah, I it's fair.

514
00:21:01,150 --> 00:21:04,430
-- I mean, fuzzing is boring now, but
-- the thing is fuzzing will get better.

515
00:21:04,719 --> 00:21:07,900
It, well, it, it's been getting better for like two decades now.

516
00:21:09,560 --> 00:21:11,199
Uh maintained is the project maintain.

517
00:21:11,770 --> 00:21:14,020
This one's where they basically say like has it

518
00:21:14,030 --> 00:21:16,420
received an update in the last 90 days?

519
00:21:16,449 --> 00:21:16,859
Like

520
00:21:17,089 --> 00:21:18,640
this is a no brainer. I think

521
00:21:18,790 --> 00:21:22,020
I feel like quarterly code commits are not asking for a lot.

522
00:21:22,839 --> 00:21:23,150
Uh

523
00:21:23,780 --> 00:21:29,550
And look there are projects that don't need updates but a couple of times a year,

524
00:21:29,770 --> 00:21:31,510
those are rare

525
00:21:31,660 --> 00:21:33,989
and you can easily pick those out

526
00:21:34,170 --> 00:21:36,150
and say this is OK.

527
00:21:36,260 --> 00:21:37,959
But if I'm using

528
00:21:38,430 --> 00:21:43,270
a html parsing library from 2014.

529
00:21:43,449 --> 00:21:46,670
Holy crap. What have I done? You know what I mean?

530
00:21:47,209 --> 00:21:51,819
All right. Uh, pin dependencies. Does the project declare in pin dependencies?

531
00:21:52,439 --> 00:21:54,640
I don't know about this one.

532
00:21:54,650 --> 00:21:59,099
We, we discussed this the other day actually and I think we're in the same boat.

533
00:21:59,109 --> 00:22:00,439
So I'll let you go first.

534
00:22:01,209 --> 00:22:03,589
I'll be a jerk and say it's complicated.

535
00:22:03,930 --> 00:22:04,420
It's a

536
00:22:04,920 --> 00:22:05,550
-- jerk.
-- This

537
00:22:05,560 --> 00:22:06,469
is true.

538
00:22:06,599 --> 00:22:06,680
Yeah.

539
00:22:07,040 --> 00:22:07,489
I

540
00:22:08,459 --> 00:22:12,250
the, the upside of pinning dependencies is you actually know what's in there

541
00:22:12,459 --> 00:22:12,959
and

542
00:22:13,130 --> 00:22:14,739
it's more stable, right?

543
00:22:14,750 --> 00:22:18,520
You're not going to get some random update that then break stuff on the flip side

544
00:22:19,219 --> 00:22:22,250
in a perfect world and we are nowhere near a perfect world.

545
00:22:22,260 --> 00:22:25,849
Everybody runs current and has tests and knows the moment something

546
00:22:25,859 --> 00:22:28,630
changes and breaks and is able to quickly rectify it.

547
00:22:29,589 --> 00:22:31,810
And the majority of us do not live in that world.

548
00:22:31,930 --> 00:22:33,689
The majority of us don't even floss.

549
00:22:34,199 --> 00:22:34,209
I,

550
00:22:34,219 --> 00:22:37,130
I do floss here is the way I would describe

551
00:22:37,140 --> 00:22:40,729
this is I think when you have a release build,

552
00:22:40,739 --> 00:22:42,920
you should pin your dependencies because

553
00:22:43,109 --> 00:22:44,000
if I,

554
00:22:44,199 --> 00:22:45,790
if I say do a build

555
00:22:46,209 --> 00:22:49,689
and then I hand you the source repo and tell you to build it also

556
00:22:50,099 --> 00:22:51,880
and there's no pin dependencies,

557
00:22:52,010 --> 00:22:54,650
you're going to get whatever's latest and a bunch of libraries could have

558
00:22:54,660 --> 00:22:57,300
-- changed from the time I built it to the time you built
-- it.

559
00:22:57,310 --> 00:22:59,800
Well, it becomes increasingly nondeterministic.

560
00:23:00,069 --> 00:23:00,560
Right. Right.

561
00:23:00,569 --> 00:23:01,969
And in fact, in some cases,

562
00:23:01,979 --> 00:23:04,660
if you're using latest and you wait like six months and then do a build,

563
00:23:04,670 --> 00:23:06,380
it's just going to explode because like the

564
00:23:06,390 --> 00:23:08,729
API is different or something in your dependencies.

565
00:23:08,739 --> 00:23:12,290
So I think from the perspective of having like stable branches,

566
00:23:12,300 --> 00:23:13,459
I like pin dependencies.

567
00:23:13,469 --> 00:23:16,729
But from the perspective of having like your main branch,

568
00:23:16,739 --> 00:23:20,900
I feel like pin dependencies could potentially be holding you back and

569
00:23:20,910 --> 00:23:23,619
you can end up in situations where things start to rot.

570
00:23:23,630 --> 00:23:26,260
However, however, there's one big caveat to this.

571
00:23:26,430 --> 00:23:28,979
If you are using a scanning tool,

572
00:23:29,109 --> 00:23:30,900
then that will catch some of this.

573
00:23:31,030 --> 00:23:32,199
So it's like

574
00:23:32,319 --> 00:23:35,880
-- a, this is a big part of confusion.
-- Here's a stupid question.

575
00:23:35,890 --> 00:23:38,359
Does any language that does dependency management

576
00:23:38,500 --> 00:23:40,219
allow you to have the concept of

577
00:23:40,569 --> 00:23:44,719
an unpinned dependency with a suggestion of saying, for example,

578
00:23:44,729 --> 00:23:47,439
this absolutely works with 3.5 0.0

579
00:23:47,550 --> 00:23:49,890
but we're going to suggest that you use current

580
00:23:50,010 --> 00:23:53,400
and thus if it blows up, you know, you can go back to 3.5 0.0

581
00:23:54,579 --> 00:23:56,680
uh you sort of, you can do

582
00:23:56,930 --> 00:23:57,010
something

583
00:23:57,180 --> 00:23:57,229
greater

584
00:23:57,510 --> 00:24:01,800
-- than like they'll do like equal to or greater than a version
-- they have.

585
00:24:02,099 --> 00:24:05,589
Uh uh it's common in I think node and Ruby do this where you

586
00:24:05,599 --> 00:24:09,089
can basically say like version three or greater only in the version three,

587
00:24:09,099 --> 00:24:11,180
like version four won't be met by this,

588
00:24:11,469 --> 00:24:13,239
this dependency, you know what I mean?

589
00:24:13,400 --> 00:24:17,189
And so like for example, I'll, I'll keep yanking the latest version three

590
00:24:17,719 --> 00:24:20,979
and while version three might still be alive, version four just came out.

591
00:24:20,989 --> 00:24:23,400
-- I'm not going to automatically download that one
-- because it

592
00:24:23,410 --> 00:24:25,420
seems to me if you had the concept of,

593
00:24:25,430 --> 00:24:27,369
OK, we'll try it with the latest and then if it blows up,

594
00:24:27,380 --> 00:24:28,790
we'll walk it back to the ones we know,

595
00:24:28,800 --> 00:24:32,260
work that might help kind of get the best of both worlds.

596
00:24:32,270 --> 00:24:35,400
Yeah, maybe, I don't know. Anyway. All right. This one's kind of complicated.

597
00:24:35,410 --> 00:24:36,930
This could probably be a show on its own.

598
00:24:36,939 --> 00:24:40,219
So we're just going to keep moving because we're in and out of time. Good packaging.

599
00:24:40,930 --> 00:24:42,469
Uh No packaging is next.

600
00:24:42,479 --> 00:24:44,869
There's, there's actually two lists and the one,

601
00:24:44,880 --> 00:24:47,449
the short list has packaging after independenc season

602
00:24:47,459 --> 00:24:49,500
and the long list has packaging before.

603
00:24:49,650 --> 00:24:50,150
So,

604
00:24:50,390 --> 00:24:52,829
all right. Does the project project publish,

605
00:24:53,000 --> 00:24:56,430
does the project build and publish official packages from C I CD?

606
00:24:56,439 --> 00:24:57,709
Like using github publishing?

607
00:24:57,969 --> 00:24:58,199
Um

608
00:24:58,349 --> 00:24:58,400
No,

609
00:24:58,739 --> 00:24:59,739
I think it makes sense.

610
00:24:59,979 --> 00:25:02,109
Well, I can't think of any language,

611
00:25:02,479 --> 00:25:05,339
any modern language where that's not really appropriate.

612
00:25:05,589 --> 00:25:07,849
Um If it's, if it's written in C or C++,

613
00:25:07,859 --> 00:25:10,469
I could totally see doing a source only release and just, you know,

614
00:25:10,479 --> 00:25:13,099
the standard dot slash configure

615
00:25:13,810 --> 00:25:14,310
dot Smash,

616
00:25:14,410 --> 00:25:15,050
make install.

617
00:25:15,349 --> 00:25:15,790
But

618
00:25:15,900 --> 00:25:20,969
-- anything written in Python or Java or Rust or anything and
-- these are,

619
00:25:20,979 --> 00:25:22,729
these are dependencies we're talking about.

620
00:25:22,739 --> 00:25:24,939
You're right. Like this is a no brainer, right? We're not talking about it.

621
00:25:24,949 --> 00:25:25,839
Um Keep going.

622
00:25:26,380 --> 00:25:29,250
SAS. Does the project use a static code analysis tool?

623
00:25:29,260 --> 00:25:32,400
I don't agree with this one at all because I think the vast majority of

624
00:25:32,739 --> 00:25:34,569
SAT still sucks rocks.

625
00:25:34,579 --> 00:25:38,329
And I think if you're an open source project, this is a huge burden to put on them.

626
00:25:38,630 --> 00:25:41,349
Well, that also assumes there's a good SASS tool available

627
00:25:41,500 --> 00:25:43,890
-- which
-- they kind of aren't. I mean, there's like code QL from

628
00:25:44,199 --> 00:25:46,439
github, which is cool, but that is a lot of heavy lifting too.

629
00:25:46,750 --> 00:25:49,290
What is, what is the one for ruby called? That's pretty decent,

630
00:25:49,790 --> 00:25:49,930
man.

631
00:25:50,040 --> 00:25:50,180
Yeah,

632
00:25:50,500 --> 00:25:52,209
man. Like break man is good,

633
00:25:52,380 --> 00:25:55,119
but I've run it and there's all. Yeah, it's, oh

634
00:25:55,300 --> 00:25:55,650
man.

635
00:25:55,849 --> 00:25:56,410
Anyway,

636
00:25:56,630 --> 00:25:57,119
like

637
00:25:57,339 --> 00:25:58,410
you're going to get a whole pile of

638
00:25:58,515 --> 00:25:59,734
false positives and then what do you do?

639
00:25:59,744 --> 00:26:04,045
Like teach to the test and fix those or do you just write a big list of exceptions?

640
00:26:04,364 --> 00:26:04,555
So,

641
00:26:05,114 --> 00:26:06,015
I like the,

642
00:26:06,545 --> 00:26:07,425
I think the

643
00:26:07,655 --> 00:26:10,895
SAT should be left in there if nothing else to encourage SAT to get.

644
00:26:11,194 --> 00:26:13,244
That's fair. That's fair. I'll agree with that.

645
00:26:13,344 --> 00:26:16,574
Um Let's keep going. Security policy. Does the project contain security policy?

646
00:26:16,584 --> 00:26:18,334
No brainer. All right. Keep going.

647
00:26:18,750 --> 00:26:21,599
Does the project cryptographically sign releases,

648
00:26:21,829 --> 00:26:22,829
the signed releases?

649
00:26:22,839 --> 00:26:25,479
I would have actually six months ago even, I would have said, you know,

650
00:26:25,489 --> 00:26:27,579
it's nice to have, but not that important because

651
00:26:27,849 --> 00:26:31,099
key management and everything for devs is such a chore and nightmare.

652
00:26:31,290 --> 00:26:33,869
But now with things like SIG store. Let me put it this way.

653
00:26:33,910 --> 00:26:36,160
It's like http s now that you have let some crypt,

654
00:26:36,329 --> 00:26:37,540
there's no excuse not to.

655
00:26:37,650 --> 00:26:38,579
Well, I mean, using

656
00:26:38,824 --> 00:26:40,525
store is still a little hard but I think,

657
00:26:40,535 --> 00:26:42,224
I think this is good to put on the list though so

658
00:26:42,234 --> 00:26:44,525
people can think about it and get ready because I think,

659
00:26:44,535 --> 00:26:45,724
I think at the moment

660
00:26:45,854 --> 00:26:47,204
this is still really hard to do.

661
00:26:47,214 --> 00:26:52,045
But I think once SIG store is, we'll say slightly more mature and more available.

662
00:26:52,055 --> 00:26:53,854
This will be my suspicion is github

663
00:26:53,994 --> 00:26:55,954
is just gonna incorporate this right into

664
00:26:56,224 --> 00:26:58,444
github. And it's gonna be like, ok, we're done. Thanks.

665
00:27:00,694 --> 00:27:02,324
They might have. I just don't know

666
00:27:02,775 --> 00:27:04,525
who knows if they haven't. I'm sure it'll come.

667
00:27:05,369 --> 00:27:08,030
Let's see. Token permissions. Does the project declare github

668
00:27:08,130 --> 00:27:09,829
work full of tokens? It's read only.

669
00:27:10,329 --> 00:27:13,010
I don't know how you test for this one. Can you see that? I don't know.

670
00:27:13,229 --> 00:27:16,510
So I, I just looked here, it says uh the check cannot detect if read,

671
00:27:16,520 --> 00:27:19,619
only permission setting is enabled as there is no API available.

672
00:27:19,630 --> 00:27:21,689
So basically, it sounds like this is a,

673
00:27:21,939 --> 00:27:24,030
you have to tell them you're doing it. Maybe

674
00:27:24,410 --> 00:27:28,810
like, I mean, this is a no brainer anytime you are accessing an API

675
00:27:29,300 --> 00:27:34,329
use the least privilege possible to access it. If read only works,

676
00:27:34,579 --> 00:27:38,790
you don't want, right? Because if someone gets your token, you have a problem.

677
00:27:38,800 --> 00:27:39,010
Well,

678
00:27:39,020 --> 00:27:41,160
and also you want to be using tokens that are

679
00:27:41,170 --> 00:27:43,260
sort of handled by some sort of management system.

680
00:27:43,270 --> 00:27:44,430
So that, oh, I don't know

681
00:27:44,640 --> 00:27:49,910
if there's like some sort of theoretical flaw in your, you know, build system. Say

682
00:27:50,079 --> 00:27:52,099
that kind of exposes all your tokens

683
00:27:52,199 --> 00:27:53,630
that you can maybe rotate them,

684
00:27:53,739 --> 00:27:57,069
that happens all the time, right? Or my favorite show. So

685
00:27:57,260 --> 00:27:59,189
you and I talked about this not too long ago

686
00:27:59,199 --> 00:28:01,030
where you stood up a virtual machine for me.

687
00:28:01,430 --> 00:28:07,050
And I was like, here are all of my SSH keys. And back in the day, I had like one SSH key I

688
00:28:07,209 --> 00:28:07,530
share among

689
00:28:07,630 --> 00:28:07,900
machines.

690
00:28:07,910 --> 00:28:10,189
Now every machine gets its own key because you know what,

691
00:28:10,199 --> 00:28:12,930
if one of my machines gets stolen or lost or compromised,

692
00:28:12,939 --> 00:28:17,079
I just delete that line from my authorized keys and there we go.

693
00:28:17,089 --> 00:28:18,530
I'm good, you know.

694
00:28:19,229 --> 00:28:21,939
All right. All right, we got one more here. Vulnerabilities.

695
00:28:21,949 --> 00:28:25,339
Does the project have unfixed vulnerabilities?

696
00:28:25,829 --> 00:28:26,300
I mean,

697
00:28:27,010 --> 00:28:31,680
this kind of goes back to the scanning service. I think using a dependency scan,

698
00:28:31,800 --> 00:28:34,939
-- the whole clean CV E scan thing.
-- Here is

699
00:28:35,040 --> 00:28:38,040
this one I think needs an enormous amount of education

700
00:28:38,050 --> 00:28:39,810
and I don't want to dwell on it today.

701
00:28:39,819 --> 00:28:41,229
But here is my explanation.

702
00:28:41,390 --> 00:28:42,750
If you have a scan

703
00:28:42,869 --> 00:28:44,089
with no results,

704
00:28:44,099 --> 00:28:47,219
that is worse than a scan with 1000 results because

705
00:28:47,229 --> 00:28:50,369
it either means you're doing something to trick the scanners,

706
00:28:50,380 --> 00:28:50,750
right?

707
00:28:50,760 --> 00:28:55,349
Like with. And the classic example is the Debian Openness cell oopsies

708
00:28:55,510 --> 00:28:58,709
-- Yes.
-- Exactly. Exactly. That and, and so like

709
00:28:59,380 --> 00:29:04,329
the the challenge now is we need the ability to interpret a scan

710
00:29:04,719 --> 00:29:05,510
and say

711
00:29:05,689 --> 00:29:07,550
the results of this scan

712
00:29:07,670 --> 00:29:12,189
fall within. Imagine it's a sliding scale, right? We like nothing is bad.

713
00:29:12,199 --> 00:29:15,150
Too many is bad and you have this sweet spot in the middle.

714
00:29:15,160 --> 00:29:17,670
More to the point are these vulnerabilities

715
00:29:18,280 --> 00:29:21,260
explained or somehow accounted for.

716
00:29:21,270 --> 00:29:23,989
So like the web development team at the CS A, you know,

717
00:29:24,000 --> 00:29:28,609
Ruby on rails and they quite commonly will have a CVE sitting in the code for

718
00:29:28,619 --> 00:29:30,219
maybe one or two or three weeks because

719
00:29:30,229 --> 00:29:32,209
fixing it and updating it just breaks everything.

720
00:29:32,400 --> 00:29:34,760
-- Yeah, it depends what it is
-- exactly.

721
00:29:34,770 --> 00:29:36,660
And they'll do a review of it and be like, OK, well, we're not

722
00:29:36,765 --> 00:29:39,584
actually, you know, my favorite is Jackson Data bind and satellite six, right?

723
00:29:39,594 --> 00:29:43,295
Satellite six use Jackson data bind and did not and probably

724
00:29:43,305 --> 00:29:47,584
hopefully cross my fingers will never use the Jackson Data bind Java

725
00:29:48,045 --> 00:29:51,555
-- XML, whatever deserializing routines,
-- polymorphic deser

726
00:29:55,564 --> 00:29:59,305
and the number of discussions let's call them discussions

727
00:29:59,739 --> 00:30:01,829
uh because they absolutely were not arguments

728
00:30:01,979 --> 00:30:05,540
but the discussions I had with people about we're

729
00:30:05,550 --> 00:30:07,739
not going to update this right away because like,

730
00:30:07,750 --> 00:30:09,550
yes, that CV exists in the code,

731
00:30:09,560 --> 00:30:12,150
but we don't use that code and provably we don't use that code.

732
00:30:12,160 --> 00:30:13,150
Like if you search for that, not

733
00:30:13,449 --> 00:30:13,650
there

734
00:30:14,380 --> 00:30:15,569
and it got to the point where at

735
00:30:16,050 --> 00:30:17,140
some points it was just OK.

736
00:30:17,150 --> 00:30:18,790
No, we're actually going to fix this because man,

737
00:30:18,800 --> 00:30:20,430
it's just going to be easier than arguing with people.

738
00:30:20,560 --> 00:30:21,500
I agree.

739
00:30:21,510 --> 00:30:24,520
And II, I get there sometimes, I mean, the challenge is,

740
00:30:24,530 --> 00:30:26,239
these are critical vulnerabilities.

741
00:30:26,250 --> 00:30:27,030
If you're using it,

742
00:30:27,729 --> 00:30:28,319
no one is using it.

743
00:30:28,574 --> 00:30:29,405
So,

744
00:30:29,675 --> 00:30:33,405
and it's not just that we're not using it, it's not possible to use it,

745
00:30:33,415 --> 00:30:35,285
sort of rewriting the product.

746
00:30:36,145 --> 00:30:38,594
And I was like, and that's not like that's out of support.

747
00:30:38,734 --> 00:30:42,805
-- Like, if you rewrite the product, then we can't support that.
-- Right. Exactly.

748
00:30:42,814 --> 00:30:45,074
Exactly. And, and not only that, look

749
00:30:45,275 --> 00:30:47,484
when you are in a Java environment,

750
00:30:47,574 --> 00:30:52,584
it is often difficult to update certain jars because multiple things can depend

751
00:30:52,594 --> 00:30:55,625
on them and you end up in these weird situations where like,

752
00:30:55,675 --> 00:30:57,084
I would like the new version,

753
00:30:57,329 --> 00:30:59,630
but this other thing over here is using the old

754
00:30:59,640 --> 00:31:02,369
version and so I can't update it yet and it's,

755
00:31:02,949 --> 00:31:06,650
and, and you could say, OK, well, let's just make this, this dependency,

756
00:31:06,660 --> 00:31:09,930
use that jar and I'll use the new jar and now I have two copies.

757
00:31:09,939 --> 00:31:11,790
So yay for me. And it's, it

758
00:31:11,890 --> 00:31:13,949
is difficult to say the least. So anyway,

759
00:31:15,150 --> 00:31:16,449
I think this one, we,

760
00:31:16,459 --> 00:31:19,430
let's just plan on doing a show about this in the near future because

761
00:31:19,439 --> 00:31:23,170
I think there's so much confusion on this topic and I it is the,

762
00:31:23,300 --> 00:31:25,849
well, I wouldn't even say it's a future like it's here today.

763
00:31:25,859 --> 00:31:27,430
-- It's just, it's not well
-- understood.

764
00:31:27,439 --> 00:31:30,270
Here's the thing I like that it's included because we're exposing

765
00:31:30,280 --> 00:31:32,530
the pain point and forcing people to do something about it.

766
00:31:32,540 --> 00:31:33,160
Even if it is,

767
00:31:33,449 --> 00:31:36,530
this is, this is broken and we're intentionally ignoring it,

768
00:31:37,329 --> 00:31:38,410
but you're aware of it.

769
00:31:39,630 --> 00:31:40,609
Now, the,

770
00:31:40,619 --> 00:31:45,189
the one thing I want to end on because we're out of time and I think this is a cool list.

771
00:31:45,400 --> 00:31:48,729
But now the challenge is going to be

772
00:31:49,030 --> 00:31:51,189
using these tests,

773
00:31:51,550 --> 00:31:54,670
understanding the data and completing the loop,

774
00:31:55,819 --> 00:31:56,869
which I'm not,

775
00:31:57,010 --> 00:32:00,130
I'm not connected enough to this project to understand how they're,

776
00:32:00,140 --> 00:32:03,310
how they're measuring and and feeding that back into the process.

777
00:32:03,319 --> 00:32:03,869
But if

778
00:32:04,660 --> 00:32:06,660
that is how things get better, right?

779
00:32:06,670 --> 00:32:10,599
And if if no one's feeding the data back into the other end of the machine,

780
00:32:11,040 --> 00:32:16,260
this will eventually die because it will be on, it will not be useful, right?

781
00:32:16,719 --> 00:32:19,920
Well, the other thing to realize too is the world has changed in that, for example,

782
00:32:19,930 --> 00:32:20,160
github

783
00:32:20,339 --> 00:32:22,229
could look at this list and go oh you know what

784
00:32:22,500 --> 00:32:26,920
like, yeah, we can fix the the signatures thing, we can just support

785
00:32:27,160 --> 00:32:27,520
six

786
00:32:27,930 --> 00:32:30,319
and make a button in the interface

787
00:32:30,569 --> 00:32:30,920
and

788
00:32:31,089 --> 00:32:31,699
it's done.

789
00:32:31,989 --> 00:32:34,790
And, and I think that's part of the magic of the modern world is

790
00:32:34,969 --> 00:32:37,290
literally every single one of these tests.

791
00:32:37,500 --> 00:32:39,359
There are companies that do this and make you know,

792
00:32:39,369 --> 00:32:44,359
money doing this and also quite often provide kind of a free version or free

793
00:32:44,520 --> 00:32:47,869
whatever for the open source world. Or, you know, some light version

794
00:32:48,170 --> 00:32:50,400
and, and that's the future because I think

795
00:32:51,180 --> 00:32:54,310
we come from a world where we would have had to build

796
00:32:54,319 --> 00:32:57,239
all of this ourselves because it didn't exist a lot of it.

797
00:32:58,300 --> 00:32:58,920
I built my own

798
00:32:59,099 --> 00:32:59,810
servers back in the day.

799
00:33:00,579 --> 00:33:01,089
Exactly.

800
00:33:02,369 --> 00:33:04,310
And so I would say if you're looking at

801
00:33:04,319 --> 00:33:08,079
this scorecard and you're interested in implementing it,

802
00:33:08,089 --> 00:33:10,400
I mean, same thing for things like salsa or ci I

803
00:33:10,579 --> 00:33:11,119
is,

804
00:33:11,760 --> 00:33:16,430
don't do it yourself, find a way to automate it

805
00:33:16,569 --> 00:33:18,099
and it's not your problem.

806
00:33:18,199 --> 00:33:20,849
You know what I mean? That is the answer to all of this stuff.

807
00:33:20,859 --> 00:33:22,780
And I think that is the mindset

808
00:33:23,229 --> 00:33:27,329
that is making a lot of this truly successful is it's no longer NIH,

809
00:33:27,339 --> 00:33:30,349
it's how do I solve this problem without creating more work for me?

810
00:33:30,469 --> 00:33:31,250
And that's cool.

811
00:33:31,579 --> 00:33:34,780
Well, and the reality is you're not going to do as good a job as they did.

812
00:33:34,930 --> 00:33:36,550
-- No.
-- Absolutely. You're not an expert

813
00:33:36,979 --> 00:33:38,390
-- like you're just not
-- right.

814
00:33:38,400 --> 00:33:39,030
And I,

815
00:33:39,040 --> 00:33:40,569
and I include in that statement like fortune

816
00:33:40,579 --> 00:33:43,750
100 companies with massive piles of security people.

817
00:33:43,780 --> 00:33:44,810
You have other work to do.

818
00:33:45,145 --> 00:33:49,305
You're managing email and a SQL database. You're going to suck at one of them,

819
00:33:49,494 --> 00:33:52,885
you know, or both. You're not going to be good at them both.

820
00:33:53,035 --> 00:33:56,224
Anyway, I'm calling it. Thank you, Kurt. Thank you all for listening. Go to home

821
00:33:56,415 --> 00:33:57,875
security podcast.com at Russia.

822
00:33:58,074 --> 00:33:58,305
Not su

823
00:33:58,625 --> 00:33:58,734
pound.

824
00:33:58,885 --> 00:34:01,505
Oh, it says podcast hashtag Do hit us up on social media.

825
00:34:01,515 --> 00:34:03,364
-- Kurt have a marvelous rest of your
-- day.

826
00:34:03,635 --> 00:34:04,895
You too. Thanks everybody.

827
00:34:05,035 --> 00:34:06,765
Thanks everyone. Bye bye

828
00:34:11,620 --> 00:34:11,780
that.