0
00:00:05,300 --> 00:00:08,420
Hello and welcome to the open source security podcast with myself,

1
00:00:08,430 --> 00:00:10,079
Kurt Siefried and my partner in Gunk

2
00:00:10,479 --> 00:00:13,909
-- experiment. Josh Pressers.
-- What does that even mean

3
00:00:14,010 --> 00:00:15,119
-- thought
-- experiment?

4
00:00:15,130 --> 00:00:17,159
It's from Einstein where he came up with

5
00:00:17,170 --> 00:00:19,829
the theory of relativity through thought experiments because

6
00:00:20,579 --> 00:00:22,520
he didn't have the budget to build like

7
00:00:22,690 --> 00:00:23,270
the large Hadron

8
00:00:23,489 --> 00:00:27,719
-- Collider
-- to build a spaceship that can travel at the speed of light.

9
00:00:27,909 --> 00:00:30,340
Yeah, exactly. Yeah. Yeah. Exactly. Yeah.

10
00:00:30,350 --> 00:00:34,630
To, to put a bunch of clocks in orbit and like, oh they're off by a few milliseconds.

11
00:00:36,099 --> 00:00:36,540
So,

12
00:00:36,689 --> 00:00:39,599
no, I, I, we're going to do it because you wanted to talk about the,

13
00:00:39,610 --> 00:00:42,279
the security vulnerabilities in g lipsy and curl.

14
00:00:43,049 --> 00:00:46,400
And I wanted to maybe try a bit of a new approach. So a thought experiment,

15
00:00:46,709 --> 00:00:51,340
-- I'm so partially terrified and partially interested in what's going to happen.
-- OK.

16
00:00:51,349 --> 00:00:51,759
So

17
00:00:51,979 --> 00:00:53,150
we have a security flaw in

18
00:00:53,310 --> 00:00:53,659
Gipsy.

19
00:00:53,669 --> 00:00:55,840
That's uh uh my understanding is it's,

20
00:00:55,849 --> 00:00:58,889
it's local to full exploit like it's you get relaxes

21
00:00:59,319 --> 00:01:03,159
and then the thing in curl is a heap overflow under um

22
00:01:03,340 --> 00:01:06,330
let's say a more specific set of circumstances.

23
00:01:06,339 --> 00:01:09,269
You got to be using the Sox five proxy and some DNS shenanigans and

24
00:01:09,849 --> 00:01:12,730
not impossible. And actually a lot of people,

25
00:01:13,080 --> 00:01:15,029
like, I've even used the Sox five

26
00:01:15,500 --> 00:01:17,760
set up when I was traveling because the hotel

27
00:01:17,769 --> 00:01:20,089
Wi Fi was wonky and wouldn't let me out and

28
00:01:20,580 --> 00:01:22,989
did some tunneling and blah, blah, blah. So

29
00:01:23,139 --> 00:01:24,110
it's not

30
00:01:24,370 --> 00:01:27,269
zero, it's more than zero, but it's not obviously everybody.

31
00:01:27,480 --> 00:01:27,790
Right.

32
00:01:27,900 --> 00:01:29,050
Right. Basically.

33
00:01:29,059 --> 00:01:32,089
Uh So this thought experiment works, we're going to do it with curl in mind,

34
00:01:32,099 --> 00:01:36,870
but it literally is the same words, just replace curl with g lipsy and replace

35
00:01:37,019 --> 00:01:39,510
like web requests with like running software.

36
00:01:40,239 --> 00:01:43,669
And basically, it's the same thought experiment. OK. So number one,

37
00:01:44,110 --> 00:01:47,169
we got these like super bad vulnerabilities in this commonly used

38
00:01:47,180 --> 00:01:49,629
software that like you basically have to use by default.

39
00:01:50,059 --> 00:01:51,819
Sure, like you can't not use GPS

40
00:01:52,059 --> 00:01:55,819
C realistically unless you go to something very specific like say alpine Linux,

41
00:01:56,220 --> 00:01:58,180
right, which I think they use something different than

42
00:01:58,379 --> 00:01:59,819
Glips. I want to say, yeah, they use

43
00:02:00,000 --> 00:02:00,209
Mucil,

44
00:02:01,410 --> 00:02:03,230
that's the one, the cereal, one, breakfast,

45
00:02:03,430 --> 00:02:05,480
breakfast cereal. That's how I remember it.

46
00:02:06,040 --> 00:02:06,580
Right.

47
00:02:07,389 --> 00:02:09,960
Anyway, you don't even want to know where you're filed in my brain

48
00:02:10,326 --> 00:02:10,776
next to sauerkraut.

49
00:02:11,166 --> 00:02:12,626
Probably best not to know.

50
00:02:12,636 --> 00:02:15,305
-- I mean,
-- actually, you know, you're next to processed cheese because

51
00:02:16,255 --> 00:02:17,425
I love processed cheese.

52
00:02:17,815 --> 00:02:17,835
So,

53
00:02:18,315 --> 00:02:19,796
so OK, so number one

54
00:02:20,276 --> 00:02:21,305
simple solution,

55
00:02:21,615 --> 00:02:23,906
stop making web requests. I mean, this works for Gopher.

56
00:02:23,916 --> 00:02:26,496
-- It's how we solved all the security problems in
-- Gopher.

57
00:02:26,645 --> 00:02:28,156
No, that's not realistic. Right.

58
00:02:28,386 --> 00:02:28,985
Exactly.

59
00:02:29,305 --> 00:02:29,326
Yeah.

60
00:02:29,606 --> 00:02:30,156
Ok. So we,

61
00:02:30,421 --> 00:02:33,201
-- to eliminate that, just
-- don't use electricity. Right.

62
00:02:33,472 --> 00:02:38,052
-- Like, oh, problem solved.
-- Yeah, exactly. So we can eliminate that one real quick.

63
00:02:38,061 --> 00:02:38,932
Ok. Cool.

64
00:02:39,511 --> 00:02:40,171
Number two,

65
00:02:40,361 --> 00:02:43,001
stop using curl. Use a different better library.

66
00:02:43,272 --> 00:02:45,281
There's no different, better libraries.

67
00:02:45,292 --> 00:02:48,251
There are different libraries but not better

68
00:02:48,361 --> 00:02:50,182
and certainly not compatible

69
00:02:50,860 --> 00:02:53,369
without a ton of work and certainly not gonna handle.

70
00:02:53,380 --> 00:02:55,139
Like, my favorite thing is everybody's like, oh,

71
00:02:55,149 --> 00:02:57,679
I could write a web client in a weekend and then they do and then they're like,

72
00:02:57,690 --> 00:03:00,130
everybody's like, what about this super common corner case?

73
00:03:00,139 --> 00:03:01,960
And they're like, oh, what about this one?

74
00:03:02,070 --> 00:03:03,080
You know what I mean? And it just,

75
00:03:03,649 --> 00:03:06,850
and then you end up reim implementing Curl, but it takes you like two decades.

76
00:03:08,199 --> 00:03:11,940
It amuses me that you said that because in Daniel's blog post

77
00:03:12,139 --> 00:03:12,550
that da da da da,

78
00:03:12,660 --> 00:03:13,949
we're gonna get there, we're gonna get there.

79
00:03:14,800 --> 00:03:15,169
So,

80
00:03:15,179 --> 00:03:16,690
but this is part of the thought experiment where

81
00:03:16,699 --> 00:03:18,669
we're going through some obvious cases and like,

82
00:03:18,679 --> 00:03:19,800
we can't do that.

83
00:03:20,210 --> 00:03:22,389
Like, it's just not a realistic solution.

84
00:03:22,500 --> 00:03:23,139
Right. Right.

85
00:03:23,429 --> 00:03:23,949
OK.

86
00:03:24,429 --> 00:03:26,169
Next one, this is where we were headed.

87
00:03:26,490 --> 00:03:29,009
All right. Let's take Curl and rewrite it,

88
00:03:29,279 --> 00:03:30,570
you know, memory safe language

89
00:03:31,479 --> 00:03:34,729
and you and I are not even gonna answer this question because Daniel already did

90
00:03:35,139 --> 00:03:37,080
rewrite it. Question mark. Yes.

91
00:03:37,089 --> 00:03:40,139
This family of flaws would have been impossible if Curl had been written in a memory

92
00:03:40,149 --> 00:03:42,619
safe language instead of c but hoarding curl

93
00:03:42,630 --> 00:03:45,149
into another language is not on the agenda.

94
00:03:45,160 --> 00:03:45,910
I like how it just,

95
00:03:46,229 --> 00:03:48,309
it's like, no, that's not on the menu.

96
00:03:48,320 --> 00:03:51,330
This amused me because when I saw it all I wanted to

97
00:03:51,339 --> 00:03:53,899
do was reply to him on Mastodon with what do you mean?

98
00:03:53,910 --> 00:03:57,309
-- You can't rewrite curl in a weekend in rust
-- pretty much.

99
00:03:57,839 --> 00:03:59,880
Um, actually no, the correct way to do it would have cha

100
00:04:00,009 --> 00:04:01,190
GP t do it. But anyways,

101
00:04:01,292 --> 00:04:03,942
it would probably just steal Carl SARS

102
00:04:04,162 --> 00:04:05,552
code and feed it to you.

103
00:04:05,733 --> 00:04:06,143
Yeah.

104
00:04:06,563 --> 00:04:09,292
So I am sure the news about this vulnerability will trigger a new

105
00:04:09,302 --> 00:04:12,473
flood of questions about and calls for that and I can sigh,

106
00:04:12,483 --> 00:04:14,263
roll my eyes and try to answer this again.

107
00:04:14,442 --> 00:04:17,833
The only approach in the direction I consider viable and sensible is

108
00:04:17,841 --> 00:04:21,183
to allow and uh use and support more dependencies written in memory,

109
00:04:21,192 --> 00:04:24,252
safe languages and potentially and gradually replace parts of

110
00:04:24,263 --> 00:04:27,032
curl piecemeal like with the introduction of Hyper.

111
00:04:27,042 --> 00:04:28,763
So basically like what the Linux kernel is doing

112
00:04:28,773 --> 00:04:30,993
where you just sort of maybe the public facing

113
00:04:31,286 --> 00:04:35,395
or more internal nasty sensitive bits, kind of get a bit of a tidying up.

114
00:04:35,436 --> 00:04:38,395
Well, and that's what the whole, I mean, we talked to Josh Oates

115
00:04:38,835 --> 00:04:39,615
and that's what the prosal

116
00:04:39,885 --> 00:04:45,196
project is basically trying to do is just slowly move these tools into Rust.

117
00:04:45,205 --> 00:04:46,455
And like, remember when Mozilla

118
00:04:46,686 --> 00:04:49,515
rewrote their web browser and almost died because

119
00:04:49,665 --> 00:04:51,955
as it turns out rewriting a major piece of software.

120
00:04:51,966 --> 00:04:55,696
-- It's gonna take you a few years
-- who knew who could have possibly predicted that?

121
00:04:55,805 --> 00:04:58,615
Weirdly, people are still going to expect you to support the old one.

122
00:04:58,895 --> 00:05:00,865
So it's not like you get to just stop

123
00:05:01,440 --> 00:05:05,140
doing curl, rewrite something clean and ship it right. Like,

124
00:05:05,910 --> 00:05:07,730
because I'm, I'm sure he has a lot of spare time.

125
00:05:07,739 --> 00:05:11,600
-- So,
-- you know what this reminds me of is when we were at Red Hat, I'll never forget

126
00:05:11,929 --> 00:05:14,910
the security team. I always joked, we don't celebrate

127
00:05:15,019 --> 00:05:18,739
like product releases. We celebrate product end of life.

128
00:05:19,809 --> 00:05:22,529
Finally don't have to support this thing anymore,

129
00:05:23,019 --> 00:05:26,880
-- man. When we finally killed off Sam,
-- which one was Sam? Even?

130
00:05:27,500 --> 00:05:28,390
I remember that

131
00:05:28,679 --> 00:05:29,820
-- account
-- manager, I want to

132
00:05:29,829 --> 00:05:30,149
say

133
00:05:30,769 --> 00:05:32,429
-- that. I think that's right. It
-- was like sat

134
00:05:32,579 --> 00:05:33,570
light but

135
00:05:34,250 --> 00:05:35,269
terrible

136
00:05:35,559 --> 00:05:35,910
like

137
00:05:36,109 --> 00:05:38,309
it obviously filled a need at a time. But

138
00:05:38,549 --> 00:05:40,269
regardless anyways. So going back to this.

139
00:05:40,279 --> 00:05:42,109
So such development is however,

140
00:05:42,119 --> 00:05:45,269
currently happening in a near glacial speed and shows with painful clarity,

141
00:05:45,279 --> 00:05:46,350
the challenges involved.

142
00:05:46,700 --> 00:05:50,260
That's the other thing, right? Is people seem to think, oh, take curl.

143
00:05:50,269 --> 00:05:51,529
It's a known hunk of

144
00:05:51,665 --> 00:05:55,125
software, reasonably high quality and we'll just rewrite it and rust,

145
00:05:55,135 --> 00:05:55,945
what could go wrong?

146
00:05:56,015 --> 00:05:56,195
And

147
00:05:56,375 --> 00:05:57,165
the answer is

148
00:05:57,345 --> 00:05:59,785
a lot that we don't know because part of this is

149
00:05:59,904 --> 00:06:00,315
like,

150
00:06:00,334 --> 00:06:01,924
we don't have a lot of people and a lot

151
00:06:01,934 --> 00:06:05,234
of knowledge about rewriting big chunks of Seaco and Rust.

152
00:06:05,434 --> 00:06:06,105
And that's

153
00:06:06,214 --> 00:06:08,964
what that all means. So a part of this is exploratory

154
00:06:09,670 --> 00:06:12,369
to the point of even being like, is this possible?

155
00:06:12,380 --> 00:06:14,450
Like this isn't Hearts of Iron Four where you just pour money

156
00:06:14,459 --> 00:06:17,309
into your research budget and like out pops up a jet plane,

157
00:06:17,670 --> 00:06:19,010
that's not a guaranteed outcome.

158
00:06:19,019 --> 00:06:22,809
Here's what happens every time someone says, oh, we're going to just rewrite

159
00:06:23,179 --> 00:06:24,929
whatever any feature

160
00:06:25,540 --> 00:06:26,970
you will introduce

161
00:06:27,220 --> 00:06:32,309
new bugs and probably all of your old bugs as well, depending upon how you rewrite it.

162
00:06:32,320 --> 00:06:34,890
Because there's different ways to rewrite software.

163
00:06:35,140 --> 00:06:38,880
And if you're basically trying to do like a uh like function for function,

164
00:06:38,890 --> 00:06:42,519
photocopy from one language to another, you're probably going to reim implement

165
00:06:42,850 --> 00:06:47,440
-- those bugs that already exist.
-- And you also just made a massive classical mistake,

166
00:06:47,549 --> 00:06:50,440
which is that you assumed, you know what the software does.

167
00:06:50,850 --> 00:06:50,929
Yeah.

168
00:06:51,809 --> 00:06:55,059
So the software, like a lot of software does stuff, but we're not

169
00:06:55,290 --> 00:06:58,244
like TCP is always my favorite where the software does TCP

170
00:06:58,445 --> 00:07:00,644
and then we encounter some problem and everybody's like, well,

171
00:07:00,654 --> 00:07:01,424
what does the RFC say?

172
00:07:01,434 --> 00:07:02,704
And the RRC says like,

173
00:07:02,864 --> 00:07:05,894
nothing or it's ambiguous or it's not really

174
00:07:06,375 --> 00:07:07,345
well defined.

175
00:07:07,954 --> 00:07:09,484
And it's kind of like, well, you know,

176
00:07:09,554 --> 00:07:11,535
these people did it this way and these people did

177
00:07:11,545 --> 00:07:13,535
it this way and it's kind of sort of compatible.

178
00:07:13,545 --> 00:07:15,785
-- So we kind of really never noticed that.
-- Oops.

179
00:07:16,084 --> 00:07:18,725
So I have a fun story about that actually.

180
00:07:18,994 --> 00:07:22,265
So I have, I, I put it on math and I'll put a link in the show notes, but

181
00:07:22,799 --> 00:07:25,190
I have been working on like a very cheap,

182
00:07:25,200 --> 00:07:28,790
like conference badge project for a couple of groups that

183
00:07:28,799 --> 00:07:31,429
will say have an interest in having such a thing

184
00:07:31,859 --> 00:07:34,339
in my intent. I had two, well, three goals in mind. Really?

185
00:07:34,350 --> 00:07:38,390
When I did it, first of all, I wanted it to be $5 or less. Right.

186
00:07:39,339 --> 00:07:44,510
Second goal was it had to run for more than eight hours on AC R 2032 battery.

187
00:07:45,049 --> 00:07:48,959
And the third goal was that I want like normal people to be able to like,

188
00:07:48,970 --> 00:07:51,130
put it together and hack on it and do stuff.

189
00:07:52,089 --> 00:07:54,250
They're soldering, but it's all true. Whole soldering.

190
00:07:54,260 --> 00:07:57,119
It's no surface mount, right? Because surface mount soldering is

191
00:07:57,269 --> 00:08:00,529
if you've never tried it before, you are not doing it. Right. Exactly.

192
00:08:00,890 --> 00:08:01,760
And so anyway,

193
00:08:02,320 --> 00:08:05,440
it runs this processor called an a tiny 85.

194
00:08:05,450 --> 00:08:09,019
It's like the, the, the world we live in now is like, blows my mind.

195
00:08:09,029 --> 00:08:10,989
This is a, a, this is a supercomputer,

196
00:08:11,000 --> 00:08:13,940
$1 microprocessor that can run at 16 megahertz.

197
00:08:13,950 --> 00:08:17,230
I only run it at eight because the power use is cut in half at eight.

198
00:08:17,929 --> 00:08:18,230
But

199
00:08:18,829 --> 00:08:18,850
the

200
00:08:19,059 --> 00:08:19,869
megahertz

201
00:08:20,000 --> 00:08:20,679
it has

202
00:08:21,000 --> 00:08:25,859
what? Eight pins on the thing. I can use five of the pins for data and stuff.

203
00:08:25,869 --> 00:08:28,869
And so I, I built this bad, I just got an eight by eight led matrix display.

204
00:08:28,880 --> 00:08:31,910
It scrolls and stuff and it's very fun, right? But here's the thing,

205
00:08:32,429 --> 00:08:36,070
there is a ton of it is what are the undefined,

206
00:08:36,580 --> 00:08:40,280
just like stuff in C++ you don't realize

207
00:08:40,640 --> 00:08:43,599
that I've never hit before. Like one example is, did you know

208
00:08:43,700 --> 00:08:48,210
a Y loop that never completes is considered undefined behavior in C++

209
00:08:48,359 --> 00:08:49,239
-- OK.
-- I'm gonna,

210
00:08:49,359 --> 00:08:53,729
here's my answer to this is this is why I basically only write code and bash and

211
00:08:53,909 --> 00:08:54,150
Python.

212
00:08:54,270 --> 00:08:54,799
But here's my

213
00:08:55,000 --> 00:08:55,150
point,

214
00:08:55,419 --> 00:08:56,340
here's my point

215
00:08:56,684 --> 00:08:59,544
is I'm writing software, right to make this thing work.

216
00:08:59,554 --> 00:09:00,554
And at one point, I'm like,

217
00:09:00,565 --> 00:09:03,424
I just need it to basically loop through this thing and like print

218
00:09:03,434 --> 00:09:05,474
dots on the screen so I can figure out what's going on.

219
00:09:05,484 --> 00:09:06,914
I, I turn on a Y loop

220
00:09:07,044 --> 00:09:09,534
and literally nothing works. I'm like, what the heck is going on.

221
00:09:09,544 --> 00:09:12,585
And so I'm like, I'm reading documentation and trying to understand, I'm like,

222
00:09:12,594 --> 00:09:13,344
holy crap.

223
00:09:13,474 --> 00:09:16,664
Like a wire loop that never returns is undefined in C++

224
00:09:17,059 --> 00:09:18,400
so the compiler,

225
00:09:18,530 --> 00:09:20,700
I don't even know what it did because nothing

226
00:09:20,809 --> 00:09:22,179
-- you
-- fix the halting problem,

227
00:09:22,450 --> 00:09:23,000
right?

228
00:09:23,169 --> 00:09:25,299
But it's, it's one of those things, right? Like there's,

229
00:09:25,539 --> 00:09:28,320
I have learned about so much undefined behavior working

230
00:09:28,330 --> 00:09:30,760
on this project that you never really think about.

231
00:09:30,969 --> 00:09:34,239
But all of a sudden, I'm in this like super resource constrained environment

232
00:09:34,450 --> 00:09:38,719
and the compiler is doing like horrible, horrible things to make the code fit.

233
00:09:38,840 --> 00:09:41,119
I'm like, oh my goodness, this is bananas.

234
00:09:41,219 --> 00:09:45,239
That's one of the fascinating things I find is when 40 or 50 years ago,

235
00:09:45,250 --> 00:09:48,219
resource constrained environments were the default.

236
00:09:48,229 --> 00:09:48,520
That's it.

237
00:09:49,150 --> 00:09:49,190
That's

238
00:09:49,400 --> 00:09:49,520
right.

239
00:09:50,099 --> 00:09:50,719
And so

240
00:09:50,869 --> 00:09:52,309
you and I have some idea of what

241
00:09:52,320 --> 00:09:55,250
working in a resource constrained environment works uh means

242
00:09:55,400 --> 00:09:56,789
sort of at a fundamental level.

243
00:09:57,280 --> 00:09:59,400
And watching people rediscover this, for example,

244
00:09:59,409 --> 00:10:01,409
with smart contracts in Blockchain where

245
00:10:01,619 --> 00:10:05,270
oh you want to write some software? Cool, except it is

246
00:10:05,679 --> 00:10:07,460
very expensive to run this code.

247
00:10:07,469 --> 00:10:11,900
So you literally have to pay gas to run the code and to see them just

248
00:10:12,280 --> 00:10:13,900
run into a brick wall because they're used

249
00:10:13,909 --> 00:10:15,669
to like building an electron app that's like

250
00:10:15,929 --> 00:10:17,099
displays a flashing button,

251
00:10:17,570 --> 00:10:18,969
eight gigs of ra M

252
00:10:19,119 --> 00:10:22,940
people aren't used to this anymore and they run into it like a brick wall

253
00:10:23,609 --> 00:10:24,909
and there's so much

254
00:10:25,159 --> 00:10:29,830
institutional knowledge here that's never been properly written down or

255
00:10:30,039 --> 00:10:31,070
documented

256
00:10:31,359 --> 00:10:33,619
or if it is, people are like, oh, that's like

257
00:10:33,859 --> 00:10:37,815
old timey, you know, getting tuberculosis. We have hospitals now. Who cares? Well,

258
00:10:38,174 --> 00:10:40,465
that works until you encounter some new technology where

259
00:10:40,474 --> 00:10:42,375
like A I with your A K token limit

260
00:10:42,494 --> 00:10:45,494
and to watch these people like reinventing sharding.

261
00:10:45,525 --> 00:10:48,825
And I'm like, oh like splitting your data up into chunks and process. And it's,

262
00:10:49,364 --> 00:10:50,734
but it goes to this thing.

263
00:10:50,744 --> 00:10:52,205
It's the same thing as the rewriting curl

264
00:10:52,215 --> 00:10:55,775
where unless you've actually even sort of attempted it

265
00:10:55,895 --> 00:10:58,174
at some point like refactoring your own code,

266
00:10:58,565 --> 00:11:00,565
just refactor your own code. A function

267
00:11:00,905 --> 00:11:04,395
no, seriously. And that will, and a lot of people will come back and we can be like,

268
00:11:04,919 --> 00:11:07,619
with, you know, the 1000 Yard Stern, just like I had no idea.

269
00:11:07,710 --> 00:11:10,650
-- It's
-- my, what did, what did, what is a quote? There's a funny quote.

270
00:11:10,659 --> 00:11:12,239
I read one time that was like,

271
00:11:12,559 --> 00:11:13,859
I'm only, I,

272
00:11:13,869 --> 00:11:17,659
I wrote this code a year ago and pass me was an idiot or something like that.

273
00:11:17,710 --> 00:11:21,059
And like, I totally get that. There's so much code I've looked at I wrote

274
00:11:21,299 --> 00:11:22,669
in the past and I'm like,

275
00:11:23,000 --> 00:11:26,179
I can't even explain why. I thought this was a good idea.

276
00:11:26,320 --> 00:11:27,539
There's no excuse,

277
00:11:27,770 --> 00:11:28,679
I forgot to comment it.

278
00:11:28,690 --> 00:11:31,760
-- So I'm like staring at it and I'm like, no, it's self commenting.
-- It's fine.

279
00:11:32,460 --> 00:11:37,650
It cleverly does something and it produces the correct output. I have like why?

280
00:11:37,659 --> 00:11:40,679
And then I'll eventually maybe re invent the wheel and understand what I did.

281
00:11:41,429 --> 00:11:44,840
-- Yeah. Anyway. All right, back to your thought experiment
-- to continue on

282
00:11:44,950 --> 00:11:46,320
and then he's actually got some data

283
00:11:46,570 --> 00:11:49,090
every oh yeah, everyone not happy about this is of course,

284
00:11:49,099 --> 00:11:50,780
welcome to roll up their sleeves and get working

285
00:11:51,619 --> 00:11:52,049
like

286
00:11:52,450 --> 00:11:56,409
fair. Including the latest two CV ES reported for Curl 8.4 0.0.

287
00:11:56,419 --> 00:11:59,690
The accumulated total says that 41% of the security vulnerabilities

288
00:11:59,700 --> 00:12:02,169
ever found in Curl would likely not have happened.

289
00:12:02,179 --> 00:12:04,119
Uh Should we have used a memory safe language?

290
00:12:04,309 --> 00:12:06,469
But also the Ross language was not even

291
00:12:06,479 --> 00:12:08,440
a possibility for practical use for this purpose

292
00:12:08,450 --> 00:12:11,500
during the time in which we introduced maybe the 1st 80% of sea related problems.

293
00:12:11,510 --> 00:12:13,080
For sure. For sure. Right.

294
00:12:13,090 --> 00:12:17,799
This is like, let's replace all the cars with self driving electric vehicles. I wish

295
00:12:17,969 --> 00:12:18,530
like,

296
00:12:19,059 --> 00:12:20,070
yeah, it

297
00:12:20,289 --> 00:12:25,900
sort of will kind of happen eventually in 10 or 20 years, but certainly not tomorrow.

298
00:12:26,099 --> 00:12:29,859
-- No, that for sure for sure.
-- So, I think we've established

299
00:12:30,299 --> 00:12:32,489
just with our discussion and backed up by

300
00:12:32,500 --> 00:12:35,289
Daniel rewriting curl in a memory safe language.

301
00:12:35,299 --> 00:12:38,809
Even piecemeal is not gonna happen anytime soon.

302
00:12:38,820 --> 00:12:43,080
-- No,
-- not without an enormous effort funded by someone

303
00:12:43,090 --> 00:12:43,880
resourcing. Yeah.

304
00:12:44,130 --> 00:12:44,489
Right.

305
00:12:44,500 --> 00:12:47,640
Unless someone is willing to spend like literally

306
00:12:47,650 --> 00:12:50,109
tens of millions of dollars on this project,

307
00:12:50,239 --> 00:12:55,299
it's probably going to take more than 20 years at the current pace that I'm aware of.

308
00:12:55,309 --> 00:12:57,280
Well, especially with how fast the web is

309
00:12:57,640 --> 00:13:01,869
like quick, http two, the whole, like the whole http two reflection ddos

310
00:13:02,190 --> 00:13:03,859
attacks, things that came out last week.

311
00:13:04,140 --> 00:13:06,640
Right. And all the a lot of the web servers are like whoopsy doodle.

312
00:13:07,460 --> 00:13:08,859
Yeah, because people forget you can't.

313
00:13:08,869 --> 00:13:10,400
It's not just refactoring the code,

314
00:13:10,409 --> 00:13:15,520
it's not some static accounting toilet system that sits in isolation and doesn't,

315
00:13:15,530 --> 00:13:15,859
you know,

316
00:13:16,099 --> 00:13:20,140
-- curl literally talks to everything on the planet
-- and off the planet like

317
00:13:20,630 --> 00:13:21,340
Yeah. Yeah.

318
00:13:21,940 --> 00:13:22,869
So OK,

319
00:13:23,250 --> 00:13:23,619
so

320
00:13:23,750 --> 00:13:26,679
then the question becomes, what can we do now,

321
00:13:26,690 --> 00:13:28,690
we can obviously continue to play whack a

322
00:13:28,700 --> 00:13:31,400
mole with security vulnerabilities that works 100%.

323
00:13:31,409 --> 00:13:34,359
Which is what we'll do. That's exactly what's going to happen.

324
00:13:34,489 --> 00:13:40,320
Yeah. And, and it's affordable and it's honestly, it's kind of what we got.

325
00:13:40,460 --> 00:13:43,799
It's working. All right. I mean, look, let's face it.

326
00:13:43,809 --> 00:13:46,679
-- It's all in all society functions.
-- Yep.

327
00:13:47,200 --> 00:13:49,539
But here's the question. Are there any new things we could do?

328
00:13:49,549 --> 00:13:51,429
And I would pause it but there is,

329
00:13:52,010 --> 00:13:54,010
there is a new capability

330
00:13:54,119 --> 00:13:55,960
in the form of A I in the last

331
00:13:56,280 --> 00:13:57,869
year coming available

332
00:13:58,099 --> 00:13:59,140
and I would pause it.

333
00:13:59,150 --> 00:14:01,039
This is something that curl can do and a lot

334
00:14:01,049 --> 00:14:03,549
of software projects can and I think should do which is

335
00:14:04,000 --> 00:14:05,179
using A I

336
00:14:05,580 --> 00:14:06,250
to

337
00:14:06,789 --> 00:14:09,809
explain the code and maybe have people walk through the code and

338
00:14:09,820 --> 00:14:12,359
maybe something like this heap overflow will kind of pop out.

339
00:14:12,460 --> 00:14:13,729
Maybe not. I don't know.

340
00:14:14,090 --> 00:14:15,000
Uh number two,

341
00:14:15,169 --> 00:14:17,760
maybe using A I to help write test cases and

342
00:14:17,770 --> 00:14:20,210
number three using A I to help write fuzzing cases.

343
00:14:20,219 --> 00:14:24,570
So having the A I for example, process and go through all the um options,

344
00:14:24,580 --> 00:14:27,320
the command like fuzzing all the command line options for example,

345
00:14:27,369 --> 00:14:29,909
but maybe a bit more intelligently with A I.

346
00:14:29,919 --> 00:14:32,099
So instead of just feeding at random garbage, it's like

347
00:14:32,510 --> 00:14:35,289
you could have like a test suite of Wonky DNS names

348
00:14:35,619 --> 00:14:38,630
like long, too many dots, not enough dots

349
00:14:39,049 --> 00:14:42,619
like every time now, Google links to their blog and it's like blog dot Google.

350
00:14:42,630 --> 00:14:47,380
My brain is like uh huh blog dot google dot what and no dot Google is a TLD. Now,

351
00:14:47,559 --> 00:14:51,599
your, it, your, your suggestion is as ridiculous as writing curl on a weekend

352
00:14:52,549 --> 00:14:55,099
also because who's going to do the work, Kurt,

353
00:14:55,260 --> 00:14:56,299
who's gonna do it?

354
00:14:56,799 --> 00:14:57,989
Interesting is gonna do it?

355
00:14:58,460 --> 00:15:02,390
Well, see, here's an interesting aspect I think of using A I is that

356
00:15:02,780 --> 00:15:02,789
a

357
00:15:02,969 --> 00:15:06,539
person who is not overly familiar with the curl code base

358
00:15:06,950 --> 00:15:10,000
can do this. Now, I don't know that they're going to get a useful result,

359
00:15:10,520 --> 00:15:12,989
but there is at least the possibility of them dipping

360
00:15:13,000 --> 00:15:15,179
their toes in the water and participating to some degree.

361
00:15:15,190 --> 00:15:17,260
-- Here's
-- what's going to happen and this is why

362
00:15:17,590 --> 00:15:20,880
maybe someday, but I think the reality is today. It's ridiculous.

363
00:15:20,890 --> 00:15:24,559
So first of all, doing what you just described would be pretty expensive.

364
00:15:24,570 --> 00:15:26,710
So someone's got to pay for it. It's not free.

365
00:15:26,719 --> 00:15:30,919
Let's say someone donates A I time to do this right

366
00:15:31,539 --> 00:15:33,400
now. You're gonna have brand new people

367
00:15:33,859 --> 00:15:38,440
going through code and either adding ridiculous comments that are wrong

368
00:15:38,570 --> 00:15:41,320
or filing bugs that are wrong and incorrect.

369
00:15:41,330 --> 00:15:42,419
And what's going to happen is the

370
00:15:42,429 --> 00:15:45,799
curl maintainers who are already overworked and probably

371
00:15:45,809 --> 00:15:51,140
just in general grumpy at poorly worded commits are going to say f this.

372
00:15:51,210 --> 00:15:55,890
If you bring any A I crap to this project ever again, I ban you forever.

373
00:15:55,900 --> 00:15:56,679
That's what's going to happen

374
00:15:57,130 --> 00:15:59,890
in my world. They're explicitly not touching the curl code base.

375
00:15:59,900 --> 00:16:01,840
They're explicitly touching test cases and

376
00:16:01,849 --> 00:16:03,640
fuzzing and staying away from touching,

377
00:16:03,719 --> 00:16:06,210
but they have to commit them eventually, right?

378
00:16:06,219 --> 00:16:06,679
Where do you know

379
00:16:06,780 --> 00:16:08,299
the test cases in the fuzzing in a

380
00:16:08,450 --> 00:16:09,159
separate repo?

381
00:16:09,239 --> 00:16:10,130
But then no,

382
00:16:10,140 --> 00:16:13,270
this is a ridiculous story because if you have

383
00:16:13,280 --> 00:16:15,760
test cases and fuzzing in a separate repo,

384
00:16:16,010 --> 00:16:20,659
how do they get applied to the primary curl repo? I assume they're going to generate.

385
00:16:20,669 --> 00:16:21,119
-- But
-- you don't

386
00:16:21,229 --> 00:16:21,469
-- have
-- to,

387
00:16:23,219 --> 00:16:23,640
how do,

388
00:16:23,780 --> 00:16:26,640
how do security researchers research software?

389
00:16:27,349 --> 00:16:29,450
-- They do no
-- security researchers,

390
00:16:29,460 --> 00:16:31,429
research software and then they have to take

391
00:16:31,440 --> 00:16:33,609
their research and do something with it.

392
00:16:33,820 --> 00:16:35,260
Be it file bugs

393
00:16:35,549 --> 00:16:39,570
-- or write a paper or something or
-- file a bug bounty.

394
00:16:39,580 --> 00:16:39,929
But,

395
00:16:40,109 --> 00:16:41,559
but that's the problem

396
00:16:42,000 --> 00:16:47,070
is if enough people do this with A I and I think it is no surprise that at the moment,

397
00:16:47,080 --> 00:16:50,780
the quality of what would come out of this project would not be particularly high,

398
00:16:50,840 --> 00:16:54,140
which would put all of the burden on the crow maintainers to deal with

399
00:16:54,150 --> 00:16:57,159
the heap of garbage that's going to end up being the result of this.

400
00:16:57,169 --> 00:16:57,849
Right? And

401
00:16:58,359 --> 00:17:02,200
-- so how do we get better at this unless we start doing it?
-- Not with Carl.

402
00:17:03,380 --> 00:17:05,618
Look, you can say we have to do better.

403
00:17:05,630 --> 00:17:09,479
And I agree and I think people who would want to work on something like this and,

404
00:17:09,489 --> 00:17:11,160
and experiment with it and learn

405
00:17:11,270 --> 00:17:12,239
100%.

406
00:17:12,540 --> 00:17:14,280
But what, what you just said

407
00:17:14,500 --> 00:17:16,358
is probably

408
00:17:16,489 --> 00:17:20,118
years in the future at this. Point of being practically applicable.

409
00:17:20,130 --> 00:17:23,760
-- So, but we can't, that's not helpful to curl today actually.
-- No, there's,

410
00:17:24,035 --> 00:17:26,135
there's already been some results with people using

411
00:17:26,145 --> 00:17:27,675
A I to fuzz stuff and find things.

412
00:17:27,685 --> 00:17:29,714
That's, that's a done deal that's happened months ago.

413
00:17:30,125 --> 00:17:33,685
Whatever fuzzing is well understood though. And, but you still,

414
00:17:33,905 --> 00:17:37,035
you're not going to give a fuzz or an A I fuzz to a Noob.

415
00:17:37,204 --> 00:17:40,425
-- It's a go fuzz curl because,
-- well, we did that with a FL

416
00:17:40,625 --> 00:17:41,244
American fuzzy

417
00:17:41,814 --> 00:17:41,984
-- loop
-- but

418
00:17:42,114 --> 00:17:42,665
you're not. No,

419
00:17:42,814 --> 00:17:44,435
they weren't noobs though. Kurt like

420
00:17:45,040 --> 00:17:48,819
when uh look if you're an open source project or a company

421
00:17:49,150 --> 00:17:49,770
and someone,

422
00:17:49,780 --> 00:17:52,359
and I remember this happening where someone would show up and be

423
00:17:52,369 --> 00:17:56,800
like I ran this fuzz here are 36,000 files that crash it.

424
00:17:56,810 --> 00:17:57,430
And we're like,

425
00:17:57,540 --> 00:17:58,319
and,

426
00:17:58,459 --> 00:18:00,949
and they'd say, well, we didn't do any more work. You figure it out.

427
00:18:00,959 --> 00:18:03,439
-- We're like, no, I'm not doing this, but
-- here's

428
00:18:03,449 --> 00:18:03,959
-- the
-- problem.

429
00:18:04,640 --> 00:18:06,760
We need to start doing something new, right?

430
00:18:06,770 --> 00:18:10,780
This whole, for example, how many people are still banging on about,

431
00:18:11,089 --> 00:18:14,040
we need to train developers, people are still banging on about,

432
00:18:14,050 --> 00:18:17,739
we need to train developers to write code securely and it's like, no that will never,

433
00:18:17,760 --> 00:18:19,280
it was like saying we need to train people

434
00:18:19,290 --> 00:18:21,989
to drive cars better to reduce the collision that

435
00:18:22,199 --> 00:18:22,439
work.

436
00:18:22,560 --> 00:18:27,619
-- Like no, this is peak humanity as far as driving and writing code goes.
-- Look, I think

437
00:18:27,849 --> 00:18:29,699
A I isn't the answer either.

438
00:18:29,719 --> 00:18:32,060
The answer is to have tool sets that don't

439
00:18:32,069 --> 00:18:34,300
let you stab yourself in the leg repeatedly.

440
00:18:35,329 --> 00:18:37,040
But that ignores the fact that

441
00:18:37,400 --> 00:18:39,839
like we have the existing technical debt of

442
00:18:39,939 --> 00:18:41,880
all the C code and 100%.

443
00:18:43,130 --> 00:18:43,369
-- And
-- this is a

444
00:18:43,579 --> 00:18:47,630
problem. But A I, Kurt, like you have to get off the A I will solve everything,

445
00:18:47,819 --> 00:18:47,839
it

446
00:18:48,400 --> 00:18:50,839
will solve everything. But I'm saying it's a new capability.

447
00:18:50,849 --> 00:18:53,079
No, I'm saying it's a new capability

448
00:18:53,699 --> 00:18:55,920
and I'm already seeing good security results with it.

449
00:18:56,060 --> 00:18:56,790
I for example,

450
00:18:56,800 --> 00:18:58,729
have been using it to do threat modeling and it's come

451
00:18:58,739 --> 00:19:02,410
-- up with actually correct results
-- and it's probably good at that.

452
00:19:02,420 --> 00:19:06,239
It's probably not good at writing curled test cases by suspicion.

453
00:19:06,930 --> 00:19:06,969
There's

454
00:19:07,079 --> 00:19:07,130
some

455
00:19:07,560 --> 00:19:08,000
out there

456
00:19:08,270 --> 00:19:12,290
maybe, maybe someday look, I think this is exactly one of the instants

457
00:19:12,569 --> 00:19:14,969
of extraordinary claims require extraordinary

458
00:19:15,780 --> 00:19:16,910
and so not right now,

459
00:19:17,140 --> 00:19:20,709
but you send me the extraordinary evidence because I would love to see it

460
00:19:20,839 --> 00:19:24,030
and I want it specific to curl, not some like random paper,

461
00:19:24,040 --> 00:19:27,560
you find an archive that talks about how A I could maybe do this thing

462
00:19:27,569 --> 00:19:30,910
in the lab that we made it do with interns or grad students or whatever.

463
00:19:31,319 --> 00:19:32,670
But anyway. All right. All right.

464
00:19:32,680 --> 00:19:35,479
So is that your thought experiment or is there more to it?

465
00:19:35,729 --> 00:19:39,660
OK. Perfect example. Can we educate the curl developers trade code more securely?

466
00:19:39,670 --> 00:19:43,829
-- Um Not really, I mean,
-- look, here's, here's my comment on all of this,

467
00:19:43,839 --> 00:19:45,829
I think the way Curl works

468
00:19:46,119 --> 00:19:47,359
is acceptable.

469
00:19:47,369 --> 00:19:51,130
All things considered, you can argue like we should have better development,

470
00:19:51,140 --> 00:19:53,270
we should have safer tools, we should have whatever.

471
00:19:53,709 --> 00:19:58,609
But the reality is we have what we have and Curl does a pretty good job, like full stop.

472
00:19:58,750 --> 00:20:00,800
The way I'm approaching this is I'm looking at this and it's,

473
00:20:00,810 --> 00:20:03,239
it's sort of similar to when I tried to push mod security

474
00:20:03,250 --> 00:20:06,530
for web server stuff at Red Hat uh for the products.

475
00:20:06,819 --> 00:20:08,250
With the idea being, for example,

476
00:20:08,260 --> 00:20:11,520
a cross site scripting vulnerability pops up in satellite version six.

477
00:20:11,760 --> 00:20:14,194
And it's instead of having to fix satellite version six,

478
00:20:14,505 --> 00:20:16,375
we just deploy a mod security role

479
00:20:16,505 --> 00:20:19,114
and deploy that to customers and it blocks it. Boom done.

480
00:20:19,555 --> 00:20:20,035
I've done that.

481
00:20:20,464 --> 00:20:24,994
Like for example, the, the, the CS A has a really old PHP app running. It's

482
00:20:25,104 --> 00:20:28,314
like just a data visualization thing. There's no like

483
00:20:28,545 --> 00:20:30,555
user data even log in or anything.

484
00:20:30,920 --> 00:20:33,770
And it's got a reflective cross site security vulnerability

485
00:20:33,780 --> 00:20:36,170
in it because it's a really old PHP framework.

486
00:20:36,339 --> 00:20:37,180
And so I just,

487
00:20:38,040 --> 00:20:38,229
yeah,

488
00:20:38,239 --> 00:20:40,250
so I just wrote a cloud flare rule that blocks

489
00:20:40,260 --> 00:20:42,469
every request that has a ankle brackets in it.

490
00:20:42,520 --> 00:20:42,689
-- There
-- you

491
00:20:42,810 --> 00:20:43,010
go.

492
00:20:43,140 --> 00:20:45,050
-- I mean, that probably catches most
-- of

493
00:20:45,060 --> 00:20:45,290
them

494
00:20:45,459 --> 00:20:49,609
and it doesn't break the app and it basically fixes

495
00:20:49,619 --> 00:20:53,890
like 99% of my security related X SS S reflection,

496
00:20:54,306 --> 00:20:55,395
whatever attacks

497
00:20:55,676 --> 00:20:56,036
done

498
00:20:56,526 --> 00:20:58,956
because I can't fix the underlying act because it's so old.

499
00:20:58,985 --> 00:21:02,965
See, but what you've just described that's a mitigating control.

500
00:21:03,505 --> 00:21:06,416
And that's what I'm saying is we need to start maybe thinking of using

501
00:21:06,426 --> 00:21:10,656
A I as a mitigating control as helping us write Fuzzs and test cases.

502
00:21:10,666 --> 00:21:11,956
And if you just Google it,

503
00:21:11,965 --> 00:21:14,836
there's a whole bunch of examples here where people have successfully used chat

504
00:21:15,076 --> 00:21:15,436
PT

505
00:21:15,706 --> 00:21:16,176
to

506
00:21:16,276 --> 00:21:17,056
do better.

507
00:21:17,631 --> 00:21:18,021
No,

508
00:21:18,182 --> 00:21:20,151
no, you don't get to get away with that easily.

509
00:21:20,161 --> 00:21:21,921
I'm gonna, I'm gonna put your feet to the fire here.

510
00:21:22,112 --> 00:21:24,842
A I is not the mitigating control.

511
00:21:24,871 --> 00:21:29,541
You can use A I to help you create mitigating controls. I would accept that.

512
00:21:29,671 --> 00:21:30,322
And that's what I'm saying.

513
00:21:30,332 --> 00:21:34,421
We have a new capability, let's use it instead of saying for 50 years, hey, let's,

514
00:21:34,432 --> 00:21:36,982
but people have to show how it works.

515
00:21:36,991 --> 00:21:40,222
You can't just say A I will fix it and then run away

516
00:21:40,569 --> 00:21:42,290
like that's not how this works.

517
00:21:42,560 --> 00:21:46,619
Someone needs to do the work to show this is how we do this.

518
00:21:46,800 --> 00:21:49,790
So I've, for example, I've literally used

519
00:21:50,060 --> 00:21:50,430
chai PT

520
00:21:51,000 --> 00:21:53,020
to like explain this code to me,

521
00:21:53,030 --> 00:21:55,859
-- explain where there might be security flaws and it
-- has

522
00:21:55,869 --> 00:21:59,050
it absolutely can do that for simple code base.

523
00:21:59,060 --> 00:22:03,500
I want you to do that with curl, do it with curl and then I will be impressed

524
00:22:04,069 --> 00:22:04,699
as cart

525
00:22:04,819 --> 00:22:05,760
starts typing.

526
00:22:06,140 --> 00:22:09,270
No, it's and obviously it's not gonna work perfectly now.

527
00:22:09,310 --> 00:22:10,069
But I want,

528
00:22:10,079 --> 00:22:13,630
I've spoken with people at Microsoft and they're doing stuff internally where

529
00:22:13,640 --> 00:22:15,939
they have the A I with the other thing you're gonna remember is

530
00:22:16,040 --> 00:22:19,849
we have the A I with guardrails where you can't ask it to hack for sure.

531
00:22:19,859 --> 00:22:21,050
And there is like,

532
00:22:21,219 --> 00:22:25,739
there's a form where you can essentially ask Microsoft to give you access to the pest

533
00:22:26,010 --> 00:22:26,430
A I.

534
00:22:26,439 --> 00:22:30,170
Here's my comment on all of this and this is we're going to

535
00:22:30,180 --> 00:22:33,420
end this conversation now because I'm not turning this into A A I podcast

536
00:22:34,130 --> 00:22:37,859
A I has potential to help with many problems.

537
00:22:38,069 --> 00:22:42,410
But today there's too many A I fan boys running around screaming

538
00:22:42,420 --> 00:22:44,930
A I hitting you in the face and then running away.

539
00:22:45,010 --> 00:22:48,530
-- And that's not helpful.
-- Do you not remember the web in 95 to 2000?

540
00:22:48,540 --> 00:22:49,439
I do

541
00:22:49,579 --> 00:22:53,760
and remember how hard it was to convince certain people that it was a really good idea

542
00:22:54,150 --> 00:22:57,199
right now. People claiming A I will solve everything

543
00:22:57,464 --> 00:23:03,324
are going to set A I backwards by years in many instances. And that is a huge problem.

544
00:23:03,334 --> 00:23:07,244
-- Same with the web, same with Blockchain, but that doesn't
-- make it OK.

545
00:23:07,765 --> 00:23:10,984
But what's the alternative? We're going to do this perfectly and safely.

546
00:23:11,035 --> 00:23:13,505
The alternative is to be sane

547
00:23:14,055 --> 00:23:14,084
and

548
00:23:14,604 --> 00:23:15,545
screaming about it.

549
00:23:15,685 --> 00:23:16,324
But seeing

550
00:23:17,155 --> 00:23:17,675
poop KT,

551
00:23:17,795 --> 00:23:20,364
-- that's the answer.
-- But until we try and

552
00:23:20,589 --> 00:23:23,439
experiment with this, we don't know what is sane or insane

553
00:23:23,739 --> 00:23:25,270
if you had told me

554
00:23:25,500 --> 00:23:29,369
10 or a year ago, some of the use cases I now daily use

555
00:23:29,530 --> 00:23:32,010
A I for I would have been like, that's completely bonkers.

556
00:23:32,020 --> 00:23:33,609
Like I'm reminded of when I used to

557
00:23:33,839 --> 00:23:35,489
not use Amazon web

558
00:23:35,609 --> 00:23:37,729
services load bouncing because I didn't want them to

559
00:23:37,739 --> 00:23:40,839
have my SSL certificates and they have them all.

560
00:23:40,859 --> 00:23:41,890
And then I realized there

561
00:23:42,180 --> 00:23:43,550
and then I realized they're running all my work

562
00:23:44,064 --> 00:23:46,045
on because I'm not turning this into an

563
00:23:46,214 --> 00:23:46,295
answers.

564
00:23:46,545 --> 00:23:47,564
I want to talk about G

565
00:23:47,755 --> 00:23:50,795
lipsy because we have a few more minutes. And the G Lipsy bug

566
00:23:50,994 --> 00:23:51,535
is

567
00:23:51,744 --> 00:23:53,854
the one reason I want to talk about it

568
00:23:54,074 --> 00:23:58,494
is because this is one of the only instances I know of where secure

569
00:23:58,594 --> 00:24:02,635
boot stopped a security vulnerability and I am ecstatic by that.

570
00:24:03,025 --> 00:24:07,114
Well, exactly what what's going on this amuses me to no end.

571
00:24:07,569 --> 00:24:09,819
So there's this GLC bug

572
00:24:10,040 --> 00:24:15,599
which is the, the the details are mostly irrelevant. It's a buffer overflow in

573
00:24:15,750 --> 00:24:17,390
this weird

574
00:24:17,560 --> 00:24:19,300
performance environment.

575
00:24:19,310 --> 00:24:23,430
Variable GLC supports that you can use with a set U ID application

576
00:24:23,670 --> 00:24:25,750
to overflow, the heap and gain root, right?

577
00:24:25,920 --> 00:24:30,140
Very typical set U ID functionality, no surprises there.

578
00:24:30,479 --> 00:24:31,060
But

579
00:24:31,489 --> 00:24:33,910
when you turn on secure boot.

580
00:24:33,920 --> 00:24:36,510
So and to be clear, what do you mean what is secure boot here?

581
00:24:36,969 --> 00:24:38,880
Like the UEF I blah blah blah stuff,

582
00:24:39,290 --> 00:24:42,599
right? Like when you in your bios, you say like secure boot on, right?

583
00:24:42,729 --> 00:24:44,040
When secure boot is on,

584
00:24:44,540 --> 00:24:47,550
there are environment variables set in the kernel and

585
00:24:47,560 --> 00:24:50,770
G Lipsy checks them and it disables certain functionality in

586
00:24:51,060 --> 00:24:54,010
this particular environment variable.

587
00:24:54,209 --> 00:24:57,189
That is the result of, I also need to say, what was the name of it? Lo

588
00:24:57,329 --> 00:25:00,160
looney tunable. They named it, which is very amusing to me.

589
00:25:00,510 --> 00:25:03,729
The environment variable is not red

590
00:25:03,989 --> 00:25:05,689
if, if secure boot is on.

591
00:25:05,699 --> 00:25:10,050
So I saw that I was like, oh my goodness, secure boot actually did something good

592
00:25:10,839 --> 00:25:14,530
that only works on hardware now in V MS or containers. Correct?

593
00:25:14,709 --> 00:25:16,319
Well, containers,

594
00:25:16,920 --> 00:25:17,199
you know,

595
00:25:17,209 --> 00:25:21,609
I don't know if the secure boot magic makes it into a container running on a system.

596
00:25:22,339 --> 00:25:25,040
That's a good question. But it's from the kernel. I don't know.

597
00:25:25,170 --> 00:25:29,359
People are kind of working on that, all that attestation stuff, right. But it's not

598
00:25:29,609 --> 00:25:30,150
their

599
00:25:30,689 --> 00:25:33,449
V MS support this like crap too, for sure, for sure.

600
00:25:34,020 --> 00:25:34,479
It's

601
00:25:34,689 --> 00:25:36,760
the g lipsy thing is really wild to me because,

602
00:25:36,930 --> 00:25:41,420
ok, back in the day we had multi user systems for one very simple reason. What was it?

603
00:25:41,459 --> 00:25:42,479
It's because we could only afford one

604
00:25:42,589 --> 00:25:43,930
computer cost

605
00:25:44,180 --> 00:25:46,209
-- and like,
-- right for build a room,

606
00:25:46,479 --> 00:25:47,060
like,

607
00:25:47,670 --> 00:25:48,099
like

608
00:25:48,339 --> 00:25:52,989
I had a mail server and FTP and web and login server running on

609
00:25:53,000 --> 00:25:57,660
a single box because really simple reason is I only could afford one box.

610
00:25:57,699 --> 00:25:57,760
You

611
00:25:57,890 --> 00:25:58,050
know what?

612
00:25:58,949 --> 00:26:02,760
You know what I think is funny is I remember in the early two thousands

613
00:26:03,040 --> 00:26:06,979
where UNIX people would brag how one UNIX system can basically do.

614
00:26:06,989 --> 00:26:09,599
Like a data center's worth of work of a windows.

615
00:26:09,609 --> 00:26:12,500
You know, environment where you need like Microsoft was like,

616
00:26:12,510 --> 00:26:15,540
if you have a web server, you run the web server on one computer.

617
00:26:15,550 --> 00:26:16,699
Like you don't put all this crap.

618
00:26:16,709 --> 00:26:21,119
And us UNIX people were like, we can run everything on this one system.

619
00:26:22,119 --> 00:26:23,729
And then of course, leads to

620
00:26:23,969 --> 00:26:27,430
the problem is between those different system components.

621
00:26:27,439 --> 00:26:30,469
There's a lot of interconnection points to talk to each other that there

622
00:26:30,920 --> 00:26:31,599
shouldn't be.

623
00:26:32,040 --> 00:26:34,780
But what really blows my mind is to this day, for example,

624
00:26:34,790 --> 00:26:36,599
my web browser basically I wanted to be able

625
00:26:36,609 --> 00:26:38,660
to like read and write its config directory,

626
00:26:38,670 --> 00:26:41,040
arguably write to my downloads directory.

627
00:26:41,689 --> 00:26:44,439
And that's kind of all I wanted to do to my system

628
00:26:45,040 --> 00:26:46,810
and maybe be able to print once in a while.

629
00:26:47,140 --> 00:26:49,520
-- But
-- instead your web server prints.

630
00:26:49,609 --> 00:26:50,849
No, my web client. Sorry,

631
00:26:51,680 --> 00:26:51,800
sorry.

632
00:26:52,130 --> 00:26:54,670
Did I not say web client? Sorry. So my web browser,

633
00:26:55,260 --> 00:26:55,369
my

634
00:26:55,719 --> 00:26:55,810
brain

635
00:26:56,109 --> 00:26:56,130
is

636
00:26:56,729 --> 00:26:59,579
like I said, I want my web browser basically to view web pages

637
00:26:59,739 --> 00:27:01,180
maybe print once in a while.

638
00:27:01,680 --> 00:27:01,800
Yeah,

639
00:27:01,930 --> 00:27:04,430
but like not poop all over my system unless I like

640
00:27:04,439 --> 00:27:06,500
tell it to save a file to a very specific spot.

641
00:27:06,510 --> 00:27:06,959
But

642
00:27:07,069 --> 00:27:08,300
the world we live in

643
00:27:08,489 --> 00:27:11,310
unless I do some like crazy se links policies or something.

644
00:27:11,500 --> 00:27:14,869
My web browser has fundamentally access to everything.

645
00:27:14,880 --> 00:27:18,119
If I write a Python script and I import a single library,

646
00:27:18,130 --> 00:27:19,380
what can that single library do?

647
00:27:19,390 --> 00:27:19,959
The answer is

648
00:27:20,119 --> 00:27:21,540
-- everything,
-- everything,

649
00:27:22,130 --> 00:27:23,459
whatever it wants

650
00:27:23,609 --> 00:27:24,680
it can be me,

651
00:27:24,689 --> 00:27:26,500
-- it can write to the file and
-- you're totally

652
00:27:26,510 --> 00:27:28,630
checking the code in all your Python libraries,

653
00:27:28,640 --> 00:27:29,000
right?

654
00:27:30,459 --> 00:27:31,109
And so

655
00:27:31,619 --> 00:27:32,430
of course,

656
00:27:33,140 --> 00:27:37,410
well, the honestly the solution to this is kind of containers, which one?

657
00:27:37,420 --> 00:27:39,719
Because also it just makes stuff work. Sure. Sure.

658
00:27:39,959 --> 00:27:40,589
And so

659
00:27:40,989 --> 00:27:45,119
what do you remember when we had those kind of thought experiment discussions

660
00:27:45,130 --> 00:27:47,199
at Red Hat about Red Hat Nine and what we wanted to see?

661
00:27:47,209 --> 00:27:48,589
And a bunch of us were proposing,

662
00:27:48,719 --> 00:27:50,189
we want Red Hat Nine

663
00:27:50,420 --> 00:27:52,189
to be basically a very

664
00:27:52,599 --> 00:27:53,069
like

665
00:27:53,530 --> 00:27:54,209
the hardware.

666
00:27:54,219 --> 00:27:54,800
Uh Basically,

667
00:27:54,810 --> 00:27:58,390
we wanted to re invent nt version 351 with the hardware abstraction layer

668
00:27:58,910 --> 00:28:02,180
with like a like with a VM slash container level.

669
00:28:02,290 --> 00:28:06,369
And so like literally, if you ssh into the system is root, spins up a container is root

670
00:28:07,089 --> 00:28:07,520
and,

671
00:28:07,670 --> 00:28:10,780
and then you would be allowed to maybe with special circumstances,

672
00:28:10,790 --> 00:28:11,949
talk to the underlying system,

673
00:28:12,020 --> 00:28:14,859
but that underlying system would be like very tight and clean

674
00:28:15,260 --> 00:28:17,410
and, you know, unless you're doing high frequency trading,

675
00:28:17,550 --> 00:28:19,829
you run everything in a container or on a VM.

676
00:28:20,410 --> 00:28:22,689
And so, right, the idea was that we had,

677
00:28:23,520 --> 00:28:26,540
we could stop trying to make Se Linux actually keep people

678
00:28:26,550 --> 00:28:29,329
from touching each other and just have containers do it.

679
00:28:29,339 --> 00:28:29,530
And

680
00:28:30,010 --> 00:28:30,209
for the

681
00:28:30,310 --> 00:28:32,839
the majority of apps like, oh, I need to talk to a database. OK.

682
00:28:32,849 --> 00:28:36,199
Here's your, you know, port 5432 for Post Grass or whatever,

683
00:28:36,640 --> 00:28:38,949
here's your web server. Here's your thing. And of course, that didn't happen.

684
00:28:38,959 --> 00:28:42,739
Red Hat version nine was just Red hat version eight. But with more up to date software

685
00:28:43,239 --> 00:28:45,369
distribution, it was architecturally identical.

686
00:28:45,959 --> 00:28:46,439
But

687
00:28:46,619 --> 00:28:50,920
what gets me is, well, my web servers do that now. Like we use Hiroko,

688
00:28:51,640 --> 00:28:53,839
we have a bunch of containers and

689
00:28:54,390 --> 00:28:55,280
I think it's a Buntu

690
00:28:55,380 --> 00:28:57,890
based, I don't even know anymore or care. And that's the point.

691
00:28:58,390 --> 00:28:59,859
Most of this stuff just works.

692
00:29:00,349 --> 00:29:00,849
And

693
00:29:01,300 --> 00:29:03,250
that's, I think is an example of

694
00:29:03,880 --> 00:29:07,290
how do I put this nicely. The solution to this g lipsy security flaw

695
00:29:07,619 --> 00:29:11,329
is like, yeah, we'll play security whack a mole with the bugs as they come up.

696
00:29:11,339 --> 00:29:13,650
But fundamentally how do we fix something like that? And it's

697
00:29:13,890 --> 00:29:15,829
not rewriting it in rust.

698
00:29:16,040 --> 00:29:17,810
That's probably not gonna work.

699
00:29:18,180 --> 00:29:18,239
I

700
00:29:18,530 --> 00:29:19,119
mean, it's

701
00:29:19,329 --> 00:29:22,920
possible but I, I imagine if you try to rewrite g lipsy and rush,

702
00:29:22,930 --> 00:29:24,920
you're gonna encounter some weird corner cases or

703
00:29:24,930 --> 00:29:27,719
-- undefined behaviors
-- it can't take but a weekend.

704
00:29:28,050 --> 00:29:31,199
-- Yeah,
-- exactly. I really like Linus wrote Linux

705
00:29:31,349 --> 00:29:34,489
in like a few weekends, didn't he? Yeah, a couple days probably,

706
00:29:34,890 --> 00:29:35,270
you know,

707
00:29:35,459 --> 00:29:35,890
get mi

708
00:29:36,099 --> 00:29:37,060
level functionality.

709
00:29:37,469 --> 00:29:37,800
But

710
00:29:38,239 --> 00:29:38,859
that's the thing.

711
00:29:38,869 --> 00:29:41,380
I'm, I'm looking at again, kind of back to this compensating control.

712
00:29:41,390 --> 00:29:44,560
I think we need to kind of go to this bolt on security because

713
00:29:44,680 --> 00:29:45,439
we can't

714
00:29:45,880 --> 00:29:47,150
fix the underlying system.

715
00:29:47,160 --> 00:29:49,739
It's just, it's like trying to fix all the roads in Edmonton.

716
00:29:49,949 --> 00:29:51,020
No, I mean,

717
00:29:51,030 --> 00:29:54,239
look there's lots of organizations that don't have

718
00:29:54,250 --> 00:29:55,750
to care about this because so here,

719
00:29:55,760 --> 00:29:58,099
here's a great example when I was at Elastic,

720
00:29:58,510 --> 00:30:00,550
they have a cloud service and at one point there

721
00:30:00,560 --> 00:30:03,500
was some sort of set U ID bug or something.

722
00:30:03,560 --> 00:30:05,770
I remember it was, I think it was a bug in Pseudo

723
00:30:06,000 --> 00:30:06,819
and our solution was

724
00:30:07,000 --> 00:30:09,630
to upgrade Pseudo. It was to remove Pseudo

725
00:30:09,839 --> 00:30:11,189
from all of our containers.

726
00:30:11,199 --> 00:30:14,189
We're good now, We don't care and we never have to care again.

727
00:30:14,199 --> 00:30:16,829
And they were like, wait a minute, why should we stop with pseudo?

728
00:30:16,839 --> 00:30:20,109
Let's remove every set U ID thing on these containers.

729
00:30:20,560 --> 00:30:22,910
I used to do that as a security thing on the web services,

730
00:30:22,920 --> 00:30:24,589
remove all the set U ID junk because

731
00:30:25,449 --> 00:30:27,520
it's probably just gonna cause me problems

732
00:30:27,719 --> 00:30:30,390
like it's already a container. You're not like ss

733
00:30:30,510 --> 00:30:33,349
-- hing in and doing stuff. I
-- was doing this like 20 years ago,

734
00:30:33,359 --> 00:30:33,609
right?

735
00:30:33,619 --> 00:30:35,530
Like it, it, but that's the thing is,

736
00:30:35,810 --> 00:30:35,829
I

737
00:30:35,930 --> 00:30:41,109
think that's, this is an example where we'll use our A I threat model, right?

738
00:30:41,119 --> 00:30:45,739
To tell us like, let's look at this. Oh, set U ID stuff is a potential problem.

739
00:30:45,750 --> 00:30:48,750
Let's just get rid of it because we don't need it and we're done

740
00:30:48,760 --> 00:30:51,709
and we don't even have to care about this bug even a little bit.

741
00:30:51,849 --> 00:30:52,750
And that's awesome.

742
00:30:52,930 --> 00:30:57,189
Well, the offset being is you have to sell, getting rid of set U ID and part of that is.

743
00:30:57,219 --> 00:30:57,739
Well,

744
00:30:57,750 --> 00:30:59,150
what if we move to an environment where we

745
00:30:59,160 --> 00:31:01,729
just don't need it like containers where we have one

746
00:31:01,900 --> 00:31:05,430
privilege set or whatever you want, call it per container.

747
00:31:05,439 --> 00:31:07,469
They talk through well-defined network sockets.

748
00:31:07,739 --> 00:31:11,229
They could even talk over shared, you know, volumes if they really want to.

749
00:31:11,680 --> 00:31:12,849
But fundamentally

750
00:31:13,099 --> 00:31:15,569
you chunk it up into nice discreet chunks

751
00:31:16,030 --> 00:31:16,689
and they're,

752
00:31:16,790 --> 00:31:22,260
well, you don't have like 20 kids with one has a cold in a classroom equivalent of it.

753
00:31:22,780 --> 00:31:24,339
We're all gonna get sick

754
00:31:24,459 --> 00:31:24,819
and see.

755
00:31:24,829 --> 00:31:27,459
And that's what I'm talking about is because

756
00:31:27,469 --> 00:31:29,489
every time I see somebody say something like,

757
00:31:29,500 --> 00:31:31,670
oh, we just need to train developers to write code securely.

758
00:31:31,680 --> 00:31:32,599
I'm like, yeah, we,

759
00:31:33,229 --> 00:31:36,569
-- it's been 50 years. Let me know when that's going to work.
-- No, it, it doesn't work.

760
00:31:36,579 --> 00:31:37,630
It doesn't work.

761
00:31:37,640 --> 00:31:38,609
In fact, was it, I'll,

762
00:31:38,619 --> 00:31:42,609
I'll try to find uh Bob Lord had a really nice too the other day that basically said

763
00:31:42,949 --> 00:31:45,689
fishing training is inhumane.

764
00:31:45,939 --> 00:31:47,530
It's, it's mean

765
00:31:47,640 --> 00:31:50,109
because you're basically trying to trick your employees

766
00:31:50,119 --> 00:31:51,589
into clicking a link and when they do,

767
00:31:51,599 --> 00:31:54,030
you're punishing them like that's bananas.

768
00:31:54,150 --> 00:31:57,989
Well, and more to the point if, if one of your employees clicking a link

769
00:31:58,180 --> 00:32:01,890
-- like down like, yeah,
-- your security team is terrible. The

770
00:32:01,900 --> 00:32:02,530
MGM.

771
00:32:02,540 --> 00:32:04,770
If truly what happened to MGM is basically

772
00:32:04,780 --> 00:32:08,050
one or two phone calls resulted in 100 million

773
00:32:08,155 --> 00:32:13,645
dollar claimed claimed loss, then your, it is bad for sure, for sure.

774
00:32:13,655 --> 00:32:16,165
But I think the problem is we have to start looking at new

775
00:32:16,175 --> 00:32:19,854
capabilities and new ways of doing things because this whole thought experiment,

776
00:32:19,864 --> 00:32:22,045
we, we can't rewrite stuff in rust.

777
00:32:22,055 --> 00:32:26,194
We can start nibbling at it like the Linux kernel and windows. Absolutely.

778
00:32:26,334 --> 00:32:26,655
But

779
00:32:27,045 --> 00:32:30,175
that requires resources that not everybody has. Like

780
00:32:30,275 --> 00:32:30,604
curl, curl

781
00:32:30,714 --> 00:32:33,385
doesn't have a pile of magic resources.

782
00:32:33,785 --> 00:32:37,645
And if they had a pile of magic resources, they probably have a pile of bugs that are

783
00:32:38,020 --> 00:32:42,400
-- need to be fixed like sooner rather than for
-- sure, for sure. And, and I think

784
00:32:42,550 --> 00:32:45,000
this is the perpetual problem and we've been talking

785
00:32:45,010 --> 00:32:47,479
like this for decades at this point of using

786
00:32:47,650 --> 00:32:51,660
compensating technology to deal with certain vulnerabilities.

787
00:32:51,939 --> 00:32:53,489
And as much as I'd love to say, yeah,

788
00:32:53,500 --> 00:32:56,319
we should all start doing this like this is not new thinking

789
00:32:56,900 --> 00:33:01,219
and I don't think it's going, here's the reality and this is what I'm going to end on.

790
00:33:01,739 --> 00:33:05,410
We have the security, the market demands. That is it.

791
00:33:06,260 --> 00:33:07,290
Well,

792
00:33:07,680 --> 00:33:10,689
we, that was also true for cigarettes and cars with no seatbelts.

793
00:33:10,869 --> 00:33:12,489
How did that get changed?

794
00:33:12,810 --> 00:33:15,949
Yeah. Well, through regulation and through people making a sting.

795
00:33:16,260 --> 00:33:19,930
-- And
-- so today we have the security of the market demands.

796
00:33:19,939 --> 00:33:22,109
If we want to make security better,

797
00:33:22,250 --> 00:33:24,290
we have to change the environment,

798
00:33:24,939 --> 00:33:28,589
the external environment, we can't fix the software,

799
00:33:28,729 --> 00:33:32,439
we can't bolt on security unless the market

800
00:33:32,449 --> 00:33:35,530
somehow demands it and regulation can create demand.

801
00:33:35,540 --> 00:33:37,300
Consumers can create demand.

802
00:33:37,640 --> 00:33:42,000
But fundamentally that has to come from outside. It can't come from us.

803
00:33:42,270 --> 00:33:45,810
Yeah. Well, and we're seeing that like the White House released their um,

804
00:33:45,910 --> 00:33:45,949
open

805
00:33:46,209 --> 00:33:47,609
source security paper

806
00:33:48,319 --> 00:33:52,489
did. And so I feel like we're starting to move a little bit,

807
00:33:52,880 --> 00:33:54,380
but at the end of the day,

808
00:33:54,760 --> 00:33:57,189
that is where the change comes from,

809
00:33:57,339 --> 00:33:58,380
not from

810
00:33:58,660 --> 00:34:00,849
people like us complaining on a podcast.

811
00:34:01,170 --> 00:34:01,699
That's it.

812
00:34:02,089 --> 00:34:02,810
All right.

813
00:34:02,949 --> 00:34:05,060
Thank you, Kurt. Thank you everyone for listening.

814
00:34:05,069 --> 00:34:07,660
Go to Social security podcast.com. Find the show notes.

815
00:34:08,228 --> 00:34:08,739
Here's a pando

816
00:34:08,958 --> 00:34:12,780
podcast. Hashtag on Mastodon. Kurt. You have a marvelous rest of your day.

817
00:34:13,010 --> 00:34:16,179
-- You too. Thanks everybody.
-- Thanks everyone. Bye bye.