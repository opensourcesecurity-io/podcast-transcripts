0
00:00:05,420 --> 00:00:10,279
Hello and welcome to episode 134 of the open source security podcast with myself,

1
00:00:10,289 --> 00:00:10,479
Kurt

2
00:00:10,600 --> 00:00:12,960
Siefried and my partner in Thought Crime. Josh Bresser.

3
00:00:13,149 --> 00:00:15,000
-- Well,
-- everything's on fire again.

4
00:00:15,250 --> 00:00:16,879
-- Yeah. Isn't it
-- great?

5
00:00:17,350 --> 00:00:22,319
I, I should go back and see how many times I've said that in the intro of the show and I,

6
00:00:22,559 --> 00:00:26,799
-- it would probably make me sad if
-- I think it's about once or twice a month.

7
00:00:26,809 --> 00:00:29,280
-- Uh It, it maybe a little less than that, but
-- it's,

8
00:00:29,290 --> 00:00:31,569
I'd say it's less than half and more than a quarter.

9
00:00:32,340 --> 00:00:34,159
Yeah, I probably,

10
00:00:34,479 --> 00:00:35,799
probably,

11
00:00:37,759 --> 00:00:39,180
oh, my goodness.

12
00:00:39,400 --> 00:00:41,860
So containers they're all broken

13
00:00:42,369 --> 00:00:45,119
-- for us actually,
-- actually. Yeah, that's the funny thing.

14
00:00:45,130 --> 00:00:48,360
It is all of them because it's run C not just

15
00:00:48,619 --> 00:00:49,369
this time.

16
00:00:49,590 --> 00:00:52,060
So it's also Creole and

17
00:00:52,189 --> 00:00:54,840
those are the only two I know offhand, but I think there was a list of what,

18
00:00:54,849 --> 00:00:55,900
five or six of them

19
00:00:56,000 --> 00:00:57,419
that are affected by this bug.

20
00:00:57,599 --> 00:01:00,419
Uh So do you want to explain the bug or shall I

21
00:01:00,720 --> 00:01:03,220
-- I will let you do the honors?
-- All right.

22
00:01:03,610 --> 00:01:08,529
So paraphrase containers don't contain. So, containers

23
00:01:08,919 --> 00:01:10,629
actually have

24
00:01:11,389 --> 00:01:14,239
a lot of interactions with the underlying host system.

25
00:01:14,250 --> 00:01:16,489
So for example, they, they share the same kernel

26
00:01:16,760 --> 00:01:20,599
and on a Linux system, one of the, the cool things is everything's a file

27
00:01:21,080 --> 00:01:24,309
and this has led to problems. So

28
00:01:24,589 --> 00:01:26,709
this is a beautiful everything is a file.

29
00:01:26,720 --> 00:01:27,400
And in Linux,

30
00:01:27,489 --> 00:01:31,690
there's this file system called slash proc uh which is the process file system.

31
00:01:32,440 --> 00:01:34,000
And it's basically

32
00:01:34,120 --> 00:01:36,389
got some magic files

33
00:01:36,779 --> 00:01:39,930
uh like slash prox slash self slash exe

34
00:01:40,720 --> 00:01:44,050
and proc self exe is, is basically exactly what it sounds like. It's

35
00:01:44,480 --> 00:01:46,529
the executable that's running,

36
00:01:47,669 --> 00:01:50,150
you know, so the executable can essentially look at itself.

37
00:01:50,919 --> 00:01:52,760
I I know that there used to be good reasons

38
00:01:52,769 --> 00:01:55,220
for having this kind of prop interface to it.

39
00:01:55,230 --> 00:01:59,620
But nowadays, I, I think it's incredibly dangerous and not maybe so safe

40
00:01:59,959 --> 00:02:01,379
and it turns out

41
00:02:01,660 --> 00:02:03,349
uh if you're in the container

42
00:02:03,510 --> 00:02:06,019
with enough privilege, you can write to this.

43
00:02:06,919 --> 00:02:10,229
So OK, you can write to your own process that you're running as well.

44
00:02:10,369 --> 00:02:14,419
Yeah. OK. Normally that's not such a big deal, right? The process can modify itself.

45
00:02:14,619 --> 00:02:17,520
It's not great but you know, not the end of the world, right?

46
00:02:17,529 --> 00:02:19,419
You're not crossing a trust boundary, right?

47
00:02:19,860 --> 00:02:25,059
In theory. Yeah, except in this case, you're modifying the run C binary that is

48
00:02:25,160 --> 00:02:26,979
running all the other containers,

49
00:02:27,500 --> 00:02:30,300
right. Right. Uh The fix is actually incredibly simple.

50
00:02:30,309 --> 00:02:32,460
They just basically clone the binary so that

51
00:02:32,660 --> 00:02:35,220
sure go modify it, that's your copy of it.

52
00:02:35,529 --> 00:02:36,389
Uh Right.

53
00:02:36,649 --> 00:02:39,470
Well, this is I mean, this is common in fork exec land.

54
00:02:39,479 --> 00:02:43,770
I mean, this has been an issue forever in UNIX and, and unfortunately,

55
00:02:43,779 --> 00:02:48,770
spawning child processes is in, it's way, way harder than it should be.

56
00:02:48,779 --> 00:02:51,070
I mean, it's one of those things that at this point in time

57
00:02:51,520 --> 00:02:53,949
they should just have a freaking system call that does this

58
00:02:53,960 --> 00:02:57,690
correctly instead of relying on humans to not screw it up because

59
00:02:58,039 --> 00:02:59,389
humans always screw it up.

60
00:02:59,789 --> 00:03:02,490
And so yeah, basically it's, it's your,

61
00:03:02,500 --> 00:03:06,410
I guess holy grail of container to host escapes,

62
00:03:06,660 --> 00:03:11,020
which is basically when you're running a container that's as bad as it gets.

63
00:03:11,089 --> 00:03:11,830
Well, that's kind of the whole,

64
00:03:12,020 --> 00:03:16,330
I mean, again, people are generally trying to use containers to contain

65
00:03:17,309 --> 00:03:18,729
as the name implies

66
00:03:18,960 --> 00:03:19,759
somewhat,

67
00:03:19,949 --> 00:03:20,360
right?

68
00:03:20,460 --> 00:03:21,630
I mean, I, you know,

69
00:03:21,639 --> 00:03:24,720
you can't really blame people for thinking containers would contain stuff.

70
00:03:24,729 --> 00:03:25,130
That's

71
00:03:25,669 --> 00:03:29,520
-- literally the name.
-- It, it it seems to be right.

72
00:03:29,710 --> 00:03:32,500
It is, it is the accepted, I guess attitude.

73
00:03:32,509 --> 00:03:36,130
So here's what I think is interesting about

74
00:03:36,460 --> 00:03:37,610
this story.

75
00:03:38,100 --> 00:03:39,250
There is the the

76
00:03:39,479 --> 00:03:44,050
the issue was discovered, it was clearly coordinate in some way,

77
00:03:44,479 --> 00:03:47,380
a bunch of organizations patched it in a timely manner

78
00:03:47,789 --> 00:03:48,419
and

79
00:03:48,649 --> 00:03:52,619
there was an advisory posted to the OS S security mailing list.

80
00:03:53,139 --> 00:03:56,580
And as part of the advisory, they included a demo exploit.

81
00:03:56,639 --> 00:04:00,929
And the thing that I think amuses me is the demo exploit is

82
00:04:01,119 --> 00:04:01,419
it, it,

83
00:04:01,429 --> 00:04:06,649
-- they talk about how it's not weaponized and it's like a two line fix to weaponize
-- it.

84
00:04:06,669 --> 00:04:11,199
Even if they didn't release an exploit when I read the code, commit to fix this,

85
00:04:11,210 --> 00:04:12,179
it's like, oh

86
00:04:12,800 --> 00:04:14,809
you can write to the runi process,

87
00:04:15,809 --> 00:04:15,860
the,

88
00:04:15,880 --> 00:04:19,290
the run C process that runs all the containers

89
00:04:19,298 --> 00:04:23,510
as again the name run C implies runs containers.

90
00:04:23,769 --> 00:04:27,290
Like this is, you know, this is what frustrates me when people are like we should do

91
00:04:27,720 --> 00:04:28,950
when people bring up that hole,

92
00:04:28,959 --> 00:04:31,450
we should fix security bugs in secret and just ship the fixes.

93
00:04:31,679 --> 00:04:33,399
Yeah, that'll work once in a while.

94
00:04:33,410 --> 00:04:36,910
But honestly, the majority of security bugs are so simple and stupid.

95
00:04:36,920 --> 00:04:39,670
Like this one is a perfect example of simple and stupid.

96
00:04:40,089 --> 00:04:44,130
-- All right. So se Linux blocks it, which is, I mean, that's
-- cool. Yeah.

97
00:04:44,140 --> 00:04:45,309
Well, if you're running the Def

98
00:04:45,489 --> 00:04:47,559
uh, I think what was it on? Red Hat Linux,

99
00:04:47,679 --> 00:04:49,940
if you're running the default policy with it enabled.

100
00:04:50,309 --> 00:04:51,850
So it basically, and it's a,

101
00:04:51,859 --> 00:04:55,299
it's a relatively simple same policy that says as I understand it,

102
00:04:55,309 --> 00:04:58,600
like the runi binary should not be modified or written to which,

103
00:04:59,529 --> 00:05:01,380
yeah, that makes sense. Actually, I think

104
00:05:02,489 --> 00:05:07,700
I was actually shocked to, to read that app Armor doesn't stop this. It seems like

105
00:05:08,040 --> 00:05:12,500
containers shouldn't be able to write to anything outside of the container.

106
00:05:12,510 --> 00:05:14,600
Part of the problem is how App Armor handles

107
00:05:14,609 --> 00:05:18,029
file paths and how it handles access to stuff.

108
00:05:18,040 --> 00:05:20,450
Oh, that's right. Because it does something weird, doesn't it?

109
00:05:20,459 --> 00:05:23,209
Because remember that was one of the OK. This is OK.

110
00:05:23,220 --> 00:05:24,890
This is going to show how old and crotch.

111
00:05:25,040 --> 00:05:25,049
I

112
00:05:25,369 --> 00:05:26,339
so remember when the,

113
00:05:26,880 --> 00:05:30,059
remember when the NSA tried to get Se Linux into the Linux kernel

114
00:05:30,950 --> 00:05:34,880
and they failed the first time around because quite simply put,

115
00:05:34,899 --> 00:05:36,329
they had to touch everything,

116
00:05:37,910 --> 00:05:38,279
right?

117
00:05:38,290 --> 00:05:42,380
They had to touch every single thing that they wanted to control access to, which

118
00:05:42,730 --> 00:05:45,440
was everything, you know, network memory

119
00:05:45,579 --> 00:05:47,140
file system, everything.

120
00:05:47,489 --> 00:05:51,980
It was an incredibly intrusive set of patches and the community looked at it,

121
00:05:52,109 --> 00:05:54,410
looked at the email domain it came from and went

122
00:05:54,690 --> 00:05:55,529
no.

123
00:05:56,760 --> 00:05:58,269
Right. That that's basically what happened.

124
00:05:58,359 --> 00:06:01,140
And then the NSA partnered with Red Hat and kind of learned

125
00:06:01,149 --> 00:06:04,049
how to community and got the patches and and you know,

126
00:06:04,200 --> 00:06:09,739
turns out se Linux is actually not some evil backdoor from the N SAS E. Linux

127
00:06:09,850 --> 00:06:12,760
does, I would say they do it correctly and unfortunately,

128
00:06:12,769 --> 00:06:15,250
in this case correctly means horrendously

129
00:06:15,799 --> 00:06:16,720
complicated.

130
00:06:16,730 --> 00:06:18,059
Whereas App Armor tries to take a

131
00:06:18,070 --> 00:06:20,540
very simplistic approach which I appreciate because

132
00:06:20,859 --> 00:06:21,720
sort of

133
00:06:22,190 --> 00:06:24,700
App Armour is really good at the application level.

134
00:06:25,630 --> 00:06:28,250
But once you kind of cross past the application level,

135
00:06:28,260 --> 00:06:31,220
App Armor just doesn't work really to put it bluntly.

136
00:06:31,230 --> 00:06:32,489
Whereas Se Linux is,

137
00:06:33,440 --> 00:06:36,850
is, you know, very much kernel level, so it's much more complicated, but it's

138
00:06:37,279 --> 00:06:39,579
well, it's much more robust and

139
00:06:39,850 --> 00:06:41,570
-- fine grained, right.
-- Right.

140
00:06:41,619 --> 00:06:43,380
So now I I will say, I mean,

141
00:06:43,390 --> 00:06:45,619
this is one of the downfalls to se Linux is just the

142
00:06:45,630 --> 00:06:49,209
-- fact that a lot of people disable it
-- because it breaks things.

143
00:06:49,380 --> 00:06:53,140
And obviously this is, this is a poster child for saying don't do that.

144
00:06:53,510 --> 00:06:55,970
But it also comes down to, I mean, heck, man,

145
00:06:56,049 --> 00:06:58,589
I've been there a million times if something isn't working,

146
00:06:58,600 --> 00:07:00,040
what's the first thing I do turn off?

147
00:07:01,880 --> 00:07:02,540
Oh, it works.

148
00:07:02,950 --> 00:07:05,519
Right. And then I just never turn it back on because why would I,

149
00:07:05,920 --> 00:07:06,350
and I,

150
00:07:06,359 --> 00:07:09,970
hopefully most of the container hosts aren't doing that

151
00:07:09,980 --> 00:07:11,829
because if you're running containers on the host,

152
00:07:11,839 --> 00:07:13,200
let's hope that's all you're doing

153
00:07:13,929 --> 00:07:14,429
pretty much it.

154
00:07:15,149 --> 00:07:15,420
Yeah.

155
00:07:15,429 --> 00:07:18,920
No, I, I don't know what to say and, and what's really depressing to me actually is I,

156
00:07:18,929 --> 00:07:22,179
I kind of took a look at containers and container security ages ago

157
00:07:22,190 --> 00:07:24,399
because that's kind of what I was in charge of for a while

158
00:07:24,559 --> 00:07:28,109
and I wanted to do some threat modeling and attack modeling of. Ok.

159
00:07:28,119 --> 00:07:31,230
So we've got this stuff running in a container and let's assume for a moment,

160
00:07:31,320 --> 00:07:32,790
you know, these containers are running,

161
00:07:33,109 --> 00:07:33,670
um,

162
00:07:34,000 --> 00:07:34,859
privileged

163
00:07:35,029 --> 00:07:35,649
stuff.

164
00:07:35,660 --> 00:07:37,059
So it's not just running at a low privilege,

165
00:07:37,070 --> 00:07:38,880
but it's running within the container as route.

166
00:07:39,149 --> 00:07:42,660
And the general consensus was early on that. If you do that, you have no security.

167
00:07:43,290 --> 00:07:43,309
Oh,

168
00:07:43,410 --> 00:07:45,190
ok. That's unfortunate.

169
00:07:45,820 --> 00:07:47,119
But what I wanted to do was map,

170
00:07:47,130 --> 00:07:50,320
sort of where the container could talk back to the host os.

171
00:07:50,329 --> 00:07:53,519
So for example, it shares a kernel. So

172
00:07:53,880 --> 00:07:57,239
well, now you have the entire Linux kernel as an attack surface.

173
00:07:57,910 --> 00:08:02,040
Fantastic. For whatever reason, it didn't occur to me to look deeply into proc

174
00:08:03,209 --> 00:08:06,640
um which I have looked at before because proc is a, is one of those classic gauchos

175
00:08:06,920 --> 00:08:08,390
of. Oh, it does what now

176
00:08:08,730 --> 00:08:12,410
yet nobody would have expected this though. Man, I would not expect

177
00:08:12,589 --> 00:08:14,070
a typical threat model to,

178
00:08:14,079 --> 00:08:16,929
to consider this because would have just assumed that they're

179
00:08:16,940 --> 00:08:20,500
forking the process correctly in a way that doesn't lead

180
00:08:20,720 --> 00:08:21,750
-- the file the scripture
-- to.

181
00:08:22,089 --> 00:08:25,109
Well. And so the problem is perfectly what you said.

182
00:08:25,119 --> 00:08:29,549
So I looked, I actually just spent yesterday looking for attack modeling tools,

183
00:08:29,559 --> 00:08:33,989
either ones that are sort of specific or ones that are more general like that,

184
00:08:34,000 --> 00:08:36,190
you know, basically help you produce pretty pictures and,

185
00:08:36,200 --> 00:08:37,909
and keep track of all the relationships.

186
00:08:39,070 --> 00:08:40,330
There are a lot of tumbleweeds,

187
00:08:40,750 --> 00:08:43,049
uh like there was, there was an attempt by

188
00:08:43,270 --> 00:08:43,280
a

189
00:08:43,440 --> 00:08:48,849
soap to create one called dragon and it hasn't had to commit since uh January of 2018,

190
00:08:49,169 --> 00:08:53,280
Microsoft has one specific to windows. So that's not going to be very helpful.

191
00:08:54,070 --> 00:08:57,510
That's basically it, there's really, there's uh I, I'm sure,

192
00:08:57,520 --> 00:08:59,369
I think there are some commercial tools, but yeah,

193
00:08:59,380 --> 00:09:01,030
I'm not going to go through the hassle of trying to get a

194
00:09:01,039 --> 00:09:03,049
hold of a commercial tool and see if it works or not.

195
00:09:03,590 --> 00:09:06,719
-- Um I mean, fundamentally, I
-- don't know how many there are,

196
00:09:06,729 --> 00:09:08,809
I feel like I looked for this at one point and

197
00:09:08,820 --> 00:09:10,450
I don't think there were very many and let's face it,

198
00:09:10,460 --> 00:09:12,289
man, like what's the market for this?

199
00:09:12,679 --> 00:09:12,969
It's,

200
00:09:12,979 --> 00:09:17,969
-- it's pretty honestly
-- like a UML diagram is I suspect what most people end up doing

201
00:09:19,000 --> 00:09:21,979
or some sort of graph, you know, this is related to this. OK.

202
00:09:21,989 --> 00:09:23,869
Let's look at that relationship and see,

203
00:09:24,080 --> 00:09:28,059
you know, what, what can I maximally expose or abuse there?

204
00:09:28,070 --> 00:09:31,099
And then what is it changed to? And what can I then get access to,

205
00:09:31,520 --> 00:09:34,130
you know, to create these sort of chains of dependencies like so,

206
00:09:34,830 --> 00:09:37,929
you know, perfect example here is like, OK, I get access to the run C I.

207
00:09:38,229 --> 00:09:41,809
Uh Well, even better example is I'm in a container that's less privileged.

208
00:09:41,820 --> 00:09:43,039
I get access to the run seat.

209
00:09:43,049 --> 00:09:45,549
Now I'm accessing all the containers running on that host.

210
00:09:45,559 --> 00:09:48,979
I now access a container on that host that's running with privileges like, oh,

211
00:09:48,989 --> 00:09:53,210
maybe they're running the Docker Damon in a container privileged to do builds,

212
00:09:53,219 --> 00:09:54,609
for example, right.

213
00:09:54,619 --> 00:09:55,760
That's not unreasonable.

214
00:09:55,969 --> 00:09:59,099
Well, now I can access that container and that gives me really,

215
00:09:59,109 --> 00:10:01,469
really easy access to the underlying

216
00:10:01,609 --> 00:10:04,580
operating system and to, you know, take over the entire system.

217
00:10:04,859 --> 00:10:05,690
-- Uh
-- Right.

218
00:10:05,840 --> 00:10:06,409
Yes.

219
00:10:06,820 --> 00:10:10,760
So there are some, some clever facts about this issue though, for,

220
00:10:10,770 --> 00:10:13,669
for listeners who, who may not be aware, I guess so

221
00:10:13,849 --> 00:10:17,219
the way it works is you end up overriding the run

222
00:10:17,320 --> 00:10:18,380
C binary, right?

223
00:10:18,549 --> 00:10:20,719
Meaning if you can

224
00:10:20,820 --> 00:10:22,320
keep an eye on that binary, right?

225
00:10:22,330 --> 00:10:25,880
If you're running in, in some sort of logging infrastructure,

226
00:10:25,929 --> 00:10:29,859
you can set up a rule for the audit subsystem to keep an eye on runs.

227
00:10:30,059 --> 00:10:31,169
If run C changes,

228
00:10:31,340 --> 00:10:33,960
you know, make, make noise. Now, you know, something's wrong.

229
00:10:34,349 --> 00:10:37,520
And the other thing that's going to happen is

230
00:10:37,619 --> 00:10:40,890
most Attackers are going to overwrite runs sea with,

231
00:10:40,900 --> 00:10:44,210
with garbage that's going to break all of your container orchestration.

232
00:10:45,070 --> 00:10:47,119
And so that's something else to watch out for.

233
00:10:47,130 --> 00:10:47,369
Now,

234
00:10:47,380 --> 00:10:50,090
a clever attacker is going to overwrite run C

235
00:10:50,099 --> 00:10:52,969
with something that is run C plus a bonus,

236
00:10:52,979 --> 00:10:53,349
right?

237
00:10:53,359 --> 00:10:55,090
That does whatever they want it to do

238
00:10:55,400 --> 00:10:56,650
and then you won't be detected.

239
00:10:57,010 --> 00:10:59,359
But I mean, that's something else to keep an eye on. So I guess

240
00:10:59,510 --> 00:11:02,440
the one thing I keep thinking of here that kind of buys us a

241
00:11:02,669 --> 00:11:07,599
little bit of a peace of mind is the fact that this is going to be like a filthy,

242
00:11:07,609 --> 00:11:08,469
dirty export.

243
00:11:08,479 --> 00:11:12,369
This is not something you can easily just, you know, escape from, from the,

244
00:11:12,400 --> 00:11:14,219
the seeing eye of Saron

245
00:11:14,489 --> 00:11:15,109
here

246
00:11:15,349 --> 00:11:17,340
who's potentially watching our infrastructure.

247
00:11:17,349 --> 00:11:20,994
Now, of course, if you have no logging, well, too bad, you're screwed. Go get some

248
00:11:21,215 --> 00:11:24,385
-- right. That's the easy answer there.
-- Well, and more of the point too, like,

249
00:11:24,585 --> 00:11:27,734
I mean, this is one of the reasons that as I understand Google compute engine,

250
00:11:27,744 --> 00:11:30,174
the way they run containers is they run containers each one

251
00:11:30,184 --> 00:11:33,234
-- in its own VM because they don't trust the security
-- boundary.

252
00:11:33,335 --> 00:11:38,005
Yeah. I think it's worth talking about why is a VM safe here and why a container isn't?

253
00:11:38,015 --> 00:11:38,844
Because

254
00:11:39,114 --> 00:11:43,565
I know a lot of people don't always understand some of the fundamental differences.

255
00:11:43,960 --> 00:11:48,580
Uh, well, so, I mean, the simplest answer is that V MS have 20 years of CV,

256
00:11:48,590 --> 00:11:49,859
whack a mole and hardening.

257
00:11:52,409 --> 00:11:55,169
Yeah, you're not wrong. I mean that's to it. It's

258
00:11:55,479 --> 00:12:01,030
so not only that, I think that the real key here is the fact that a virtual machine

259
00:12:01,320 --> 00:12:01,989
is

260
00:12:02,320 --> 00:12:06,309
there, there's special hooks in the processors these days.

261
00:12:06,359 --> 00:12:08,369
-- Well,
-- yeah, to make it even more secure and fast,

262
00:12:08,619 --> 00:12:13,159
right? That, that basically we're talking about kind of hardware level hardening

263
00:12:13,289 --> 00:12:17,710
where the the code is running in the processor in a way

264
00:12:17,909 --> 00:12:18,669
that makes it

265
00:12:19,020 --> 00:12:23,900
nearly impossible to break out of the I, I almost called it a container,

266
00:12:23,909 --> 00:12:25,679
the virtual machine

267
00:12:26,090 --> 00:12:27,659
that is in casing it,

268
00:12:27,820 --> 00:12:28,679
right? And

269
00:12:28,780 --> 00:12:30,159
back in the day,

270
00:12:30,250 --> 00:12:35,159
virtual machines worked in a manner we'll say similar to how containers work today

271
00:12:35,580 --> 00:12:38,770
and those had tons of problems.

272
00:12:39,000 --> 00:12:39,770
And and of course,

273
00:12:39,780 --> 00:12:44,200
just even even the KVM style technology had its fair share of issues back in the day.

274
00:12:44,549 --> 00:12:45,090
And

275
00:12:45,320 --> 00:12:46,979
I do think containers

276
00:12:47,380 --> 00:12:52,169
could get better. But in all seriousness, the easy way out is to just

277
00:12:52,349 --> 00:12:53,929
put them all in a virtual machine.

278
00:12:53,940 --> 00:12:57,659
And I know Intel was working on this with clear containers at one point. I don't know,

279
00:12:57,840 --> 00:13:00,200
I don't know if that project still exists, but it's,

280
00:13:00,349 --> 00:13:02,150
it's definitely the way to go.

281
00:13:02,619 --> 00:13:04,349
No, it's if, if you,

282
00:13:04,619 --> 00:13:07,409
basically, if you want to use containers and you want

283
00:13:07,820 --> 00:13:09,169
actual security

284
00:13:09,510 --> 00:13:12,159
then you, if you want multi-tenant,

285
00:13:12,169 --> 00:13:15,900
so you want more than one workload per machine that maybe doesn't, you know, need,

286
00:13:15,909 --> 00:13:18,479
they, they're not allowed to talk to each other or interact with each other.

287
00:13:18,900 --> 00:13:19,739
Uh in

288
00:13:19,919 --> 00:13:21,549
an uh in a security sense,

289
00:13:21,770 --> 00:13:25,429
then they need to either run on physically separate hosts or they,

290
00:13:25,440 --> 00:13:27,650
you really need to run them inside of a virtual machine.

291
00:13:28,179 --> 00:13:31,260
-- There, there's really, those are your two options.
-- Right. Right.

292
00:13:31,270 --> 00:13:32,760
Now, my understanding though,

293
00:13:32,770 --> 00:13:36,859
I don't do any of the container orchestrators make it easy to do this though.

294
00:13:36,869 --> 00:13:39,479
I don't, I, I haven't really paid that close of attention.

295
00:13:39,489 --> 00:13:43,679
-- I don't know, like can Kubernetes use virtual machines like this
-- sort of,

296
00:13:43,690 --> 00:13:44,460
but not really,

297
00:13:44,760 --> 00:13:46,979
you can make it work, but it's not

298
00:13:47,609 --> 00:13:48,359
easy.

299
00:13:48,650 --> 00:13:48,919
And,

300
00:13:48,929 --> 00:13:51,340
and I guess there's also the issue of

301
00:13:51,349 --> 00:13:54,280
when you're using containers in a virtual machine,

302
00:13:54,580 --> 00:13:59,390
there is slightly more overhead in terms of just memory, we'll say,

303
00:13:59,650 --> 00:14:03,960
-- and they do start up slower.
-- The annoying thing is they don't need to necessarily be

304
00:14:04,390 --> 00:14:05,239
that way, right?

305
00:14:05,250 --> 00:14:08,200
Because with memory deduplication and stuff like that, it should be just fine.

306
00:14:09,090 --> 00:14:13,280
-- But then we enter into the whole
-- I, no, that isn't gonna work though.

307
00:14:13,289 --> 00:14:13,869
I'm gonna, I'm gonna,

308
00:14:13,880 --> 00:14:17,780
I'm gonna pick on you for this one because memory deduplication is actually really,

309
00:14:17,789 --> 00:14:20,169
really expensive from a resource perspective.

310
00:14:20,179 --> 00:14:23,520
And when you have a container that's expected to be up for, you know,

311
00:14:23,669 --> 00:14:26,450
10 microseconds, 10 milliseconds, whatever.

312
00:14:26,960 --> 00:14:28,000
Uh That's

313
00:14:28,109 --> 00:14:29,450
-- never happening.
-- Oh, ok.

314
00:14:29,460 --> 00:14:31,950
So you're talking about people actually using containers correctly?

315
00:14:32,330 --> 00:14:35,299
-- See my assumption is
-- people are, yeah, if you're using it like a fat

316
00:14:35,520 --> 00:14:37,359
or thin VM then yeah. Sure. V

317
00:14:37,469 --> 00:14:37,719
MS.

318
00:14:39,340 --> 00:14:41,419
Um Well, it's, it's I know some of the tele

319
00:14:41,780 --> 00:14:44,349
telecom companies have done work around this, you know,

320
00:14:44,359 --> 00:14:46,179
bringing up V MS and bringing them down real

321
00:14:46,190 --> 00:14:49,309
quick and Amazon just announced it right last year.

322
00:14:49,320 --> 00:14:51,630
Um that they have their, I forget the name of it, but

323
00:14:51,849 --> 00:14:52,929
you know, they're, they,

324
00:14:52,940 --> 00:14:55,929
they can bring you up a virtual machine and I think it was 250 milliseconds and they,

325
00:14:55,940 --> 00:14:59,630
they, they were saying that they will definitely make it faster this year because,

326
00:14:59,979 --> 00:15:02,679
well, with this exact issue, right, you want to service a request.

327
00:15:02,690 --> 00:15:02,979
Well,

328
00:15:02,989 --> 00:15:04,719
if you have to just wait a quarter of

329
00:15:04,729 --> 00:15:06,669
a second before you can even service that request,

330
00:15:08,500 --> 00:15:08,840
right?

331
00:15:09,849 --> 00:15:13,630
-- So,
-- well, in a quarter of a second is a long freaking time,

332
00:15:13,640 --> 00:15:15,869
that's how long the entire request handling should take.

333
00:15:16,049 --> 00:15:18,630
Right. Right. Exactly. That's what is it.

334
00:15:18,640 --> 00:15:20,770
I remember one time talking to somebody

335
00:15:20,780 --> 00:15:24,710
about human interaction with like computer systems and

336
00:15:25,030 --> 00:15:29,809
I think it's 300 milliseconds is basically what we can understand anything

337
00:15:29,820 --> 00:15:33,609
less than that we generally can't perceive but anything more than that,

338
00:15:33,619 --> 00:15:36,789
-- we totally see
-- human reaction time is a quarter of a second.

339
00:15:36,799 --> 00:15:40,989
So anything below 0.1 of a second is, is instantaneous as far as we're concerned.

340
00:15:41,000 --> 00:15:41,479
Right.

341
00:15:41,969 --> 00:15:43,239
We just can't process that.

342
00:15:43,390 --> 00:15:43,510
Yeah.

343
00:15:43,520 --> 00:15:46,349
And up to 300 milliseconds, it's not very noticeable,

344
00:15:46,359 --> 00:15:49,130
but for things like virtual reality that's not gonna work,

345
00:15:49,140 --> 00:15:50,570
you're gonna start barfing everywhere

346
00:15:50,809 --> 00:15:52,809
and anything above a half a second and you're,

347
00:15:52,820 --> 00:15:55,679
you're now introducing enough control delays that if it's like a real time system,

348
00:15:55,690 --> 00:15:57,789
like say you're trying to drive a car with a half second delay,

349
00:15:58,429 --> 00:15:59,570
you're going to die.

350
00:16:02,599 --> 00:16:06,830
Yeah, that's probably fair. That's probably like texting and driving right there.

351
00:16:06,840 --> 00:16:06,989
Yeah,

352
00:16:07,000 --> 00:16:09,619
because this is the brutal part of like virtual reality is like

353
00:16:09,630 --> 00:16:12,750
a virtual reality system with a 0.2 or three second delay.

354
00:16:12,840 --> 00:16:17,440
-- People are going to get violently ill. Uh
-- I would expect that. So

355
00:16:17,890 --> 00:16:22,229
I, I am one of the lucky people that can't watch 3D movies

356
00:16:22,590 --> 00:16:23,229
and

357
00:16:23,599 --> 00:16:24,340
I have,

358
00:16:24,349 --> 00:16:26,840
I forget I was doing something once where it was

359
00:16:26,849 --> 00:16:30,619
like a VR like system and there was a noticeable lag

360
00:16:30,989 --> 00:16:32,520
and I was

361
00:16:32,919 --> 00:16:34,289
an unhappy person

362
00:16:34,429 --> 00:16:39,969
almost instantaneously with it. Like II I struggled to deal with that environment

363
00:16:40,359 --> 00:16:40,969
and

364
00:16:41,419 --> 00:16:44,349
Yeah. Right. Anyway, why are we talking about VR containers?

365
00:16:44,359 --> 00:16:46,409
Containers are broken, go patch your containers.

366
00:16:46,419 --> 00:16:48,400
So I guess so here's the other half of it, right?

367
00:16:48,409 --> 00:16:52,250
Is, is I just said one of the key terms, everyone's like, oh go patch your containers.

368
00:16:52,690 --> 00:16:57,369
Uh That's not possible for a lot of organizations because let's face it.

369
00:16:57,380 --> 00:17:00,179
If you're using containers, like they're kind of, you know,

370
00:17:00,559 --> 00:17:03,000
poor man's virtual machines.

371
00:17:03,289 --> 00:17:06,310
Uh you can't call them fat V MS. They're skinny V MS, right?

372
00:17:06,449 --> 00:17:09,750
Maybe, I guess, I don't know, fat containers, skinny V MS, right?

373
00:17:09,900 --> 00:17:13,770
Uh There's a lot of default cloud or a container images

374
00:17:13,780 --> 00:17:15,270
that are like I was looking at some of them,

375
00:17:15,280 --> 00:17:16,098
they're two gigs.

376
00:17:16,828 --> 00:17:18,888
That's not skinny. Skinny is like

377
00:17:19,178 --> 00:17:20,638
disco cheap. It's fine. Four men

378
00:17:21,208 --> 00:17:21,678
are cheap

379
00:17:21,818 --> 00:17:25,958
anyway. Anyway, so here's the deal. If you have long running containers,

380
00:17:26,068 --> 00:17:29,529
you can't patch this because you have to shut down the fleet

381
00:17:29,818 --> 00:17:31,208
and for a lot of people

382
00:17:31,810 --> 00:17:32,979
that's not happening.

383
00:17:33,130 --> 00:17:33,959
Like no way.

384
00:17:34,380 --> 00:17:38,140
I mean, I guess the good news is you could maybe either enable Se Linux,

385
00:17:38,199 --> 00:17:40,630
hope nothing breaks or selectively enable se Linux.

386
00:17:40,650 --> 00:17:44,050
-- Like create a custom policy that just want let just protects one C
-- Well,

387
00:17:44,060 --> 00:17:45,849
it depends how you've disabled it though.

388
00:17:45,880 --> 00:17:48,819
I mean, if you've disabled it at boot, you can't turn it back on.

389
00:17:49,109 --> 00:17:51,790
-- Right. You have to reboot.
-- That is very true actually. Yes,

390
00:17:52,069 --> 00:17:54,550
there's nothing more infuriating to me. The people that are just like go

391
00:17:54,689 --> 00:17:54,719
at

392
00:17:54,849 --> 00:17:55,829
your systems people.

393
00:17:55,839 --> 00:17:59,150
It's like, no, that's, that's, that's like saying stop being poor.

394
00:17:59,160 --> 00:18:02,189
-- It's just, you can't tell people that it's not helpful,
-- I guess.

395
00:18:02,199 --> 00:18:06,060
So, here's my advice of sort of the, the, the poor man's way to deal with.

396
00:18:06,069 --> 00:18:08,349
This is go get like pie notify, py,

397
00:18:08,359 --> 00:18:11,030
notify and it hooks into the I notify system of Linux.

398
00:18:11,050 --> 00:18:12,959
So you can pie notify the run C binary

399
00:18:13,130 --> 00:18:17,349
and you'll immediately get a note, you can set up a script to email you if it modifies

400
00:18:18,030 --> 00:18:18,890
immediately.

401
00:18:19,099 --> 00:18:22,400
Yeah, I mean, that's an easy way out if you lack proper logging,

402
00:18:22,410 --> 00:18:23,250
which you should have.

403
00:18:23,589 --> 00:18:27,609
And, and actually something else I was thinking of here that, that interests me.

404
00:18:27,619 --> 00:18:29,680
Now, mind you, the trick is

405
00:18:30,589 --> 00:18:33,380
when you, if you have a container host set up,

406
00:18:33,469 --> 00:18:36,819
it would not be unreasonable to mark your,

407
00:18:36,939 --> 00:18:39,199
basically your whole file system read only,

408
00:18:39,469 --> 00:18:42,420
which would totally stop this also because let's

409
00:18:42,430 --> 00:18:44,890
face it if you're running containers on a host

410
00:18:45,119 --> 00:18:45,930
and in theory,

411
00:18:45,939 --> 00:18:49,020
your container host should be as disposable as your containers are

412
00:18:49,030 --> 00:18:51,719
where it's a matter of instead of patching your container host,

413
00:18:51,729 --> 00:18:53,339
you should probably just be

414
00:18:53,469 --> 00:18:55,170
spinning up a new container host that's

415
00:18:55,180 --> 00:18:57,849
patched and then migrating workloads as needed.

416
00:18:57,859 --> 00:19:01,489
But then that requires you to have your workloads correctly set up for containers,

417
00:19:01,500 --> 00:19:04,010
which a lot of workloads are not

418
00:19:04,219 --> 00:19:04,969
there.

419
00:19:05,170 --> 00:19:06,449
Yep. Absolutely.

420
00:19:06,910 --> 00:19:09,329
And so that's part of the challenge too. And, and I guess

421
00:19:09,660 --> 00:19:11,349
this is, ah, man,

422
00:19:11,739 --> 00:19:15,869
I just keep thinking about this and this is a horrible scenario.

423
00:19:16,119 --> 00:19:19,510
There are tons of people that probably have no freaking clue what to do

424
00:19:19,719 --> 00:19:22,010
and there just aren't a lot of good answers here.

425
00:19:22,020 --> 00:19:25,930
Now, the one thing I will say that I think is advantageous to this is

426
00:19:26,239 --> 00:19:29,469
many container workloads aren't running untrusted code.

427
00:19:30,109 --> 00:19:30,369
You know,

428
00:19:30,380 --> 00:19:32,489
that's not a reason to say I don't have to care because

429
00:19:32,500 --> 00:19:35,089
obviously people can break into your containers and stuff like that.

430
00:19:35,099 --> 00:19:35,420
But,

431
00:19:35,569 --> 00:19:36,079
but here's,

432
00:19:36,089 --> 00:19:39,260
here's the deal and here's something I was thinking about for how to exploit this.

433
00:19:39,369 --> 00:19:44,010
So, first of all, you need the ability to get inside of a container. Right.

434
00:19:44,300 --> 00:19:44,890
And

435
00:19:45,020 --> 00:19:46,030
if you're,

436
00:19:46,390 --> 00:19:50,770
we'll, we'll assume you can somehow break into an application or something and,

437
00:19:50,780 --> 00:19:51,660
and work your way in.

438
00:19:51,670 --> 00:19:52,140
Right.

439
00:19:52,160 --> 00:19:55,109
-- Well,
-- the one thing to consider is the multi-tenant environments, like, say,

440
00:19:55,119 --> 00:19:57,290
digital Ocean or rack space or whoever.

441
00:19:57,489 --> 00:19:58,369
Right. Right.

442
00:19:58,380 --> 00:20:03,250
And those are, they already have their own set of issues in those environments.

443
00:20:03,300 --> 00:20:05,060
Right. So we're going to ignore that.

444
00:20:05,119 --> 00:20:07,469
Well, hopefully they're doing the, the Google trick

445
00:20:07,640 --> 00:20:08,920
of one container

446
00:20:09,165 --> 00:20:10,685
because if they're not doing it, there's, they're

447
00:20:11,354 --> 00:20:12,145
creek at some point.

448
00:20:12,305 --> 00:20:14,344
Right. Right. Exactly. Exactly.

449
00:20:14,564 --> 00:20:16,344
So, but here's the deal. So you got to get in,

450
00:20:16,675 --> 00:20:17,974
then you got to get root.

451
00:20:17,984 --> 00:20:22,905
Like, and again, here's one of those things don't run your containers as root,

452
00:20:22,915 --> 00:20:25,464
but everything works when you run it as route, it just works.

453
00:20:25,474 --> 00:20:26,905
Exactly. Don't do that.

454
00:20:27,084 --> 00:20:27,425
Uh, oh,

455
00:20:27,435 --> 00:20:28,964
you know what else we didn't mention if

456
00:20:28,974 --> 00:20:31,425
you're using user name spaces this doesn't work

457
00:20:31,859 --> 00:20:33,680
because what user name spaces do

458
00:20:33,869 --> 00:20:38,560
is the run C process runs as a non root user.

459
00:20:38,719 --> 00:20:42,140
And that means the, the container process

460
00:20:42,290 --> 00:20:45,260
doesn't have the permissions to modify the run C binary.

461
00:20:45,660 --> 00:20:49,079
So that is also something if you're doing that,

462
00:20:49,229 --> 00:20:52,760
you can go drinking or something now, right? Because you're fine

463
00:20:54,619 --> 00:20:57,170
anyway, so you got to get in, you got to get root

464
00:20:57,369 --> 00:20:59,920
and then you got to modify RUN C and then it has

465
00:20:59,930 --> 00:21:03,300
to kick off a new container image by running Run Sea,

466
00:21:03,310 --> 00:21:03,760
right?

467
00:21:04,040 --> 00:21:04,800
Which is

468
00:21:05,430 --> 00:21:07,369
I, I'm not saying that doesn't happen very often,

469
00:21:07,380 --> 00:21:09,869
-- but it's potentially not an attacker
-- controlled.

470
00:21:09,880 --> 00:21:12,859
A very simple way is once, once you modify the runs,

471
00:21:12,920 --> 00:21:15,329
you just kill the existing container, you're exploited and

472
00:21:15,640 --> 00:21:19,050
being admins, they're like, oh, this thing broke, turn it back on.

473
00:21:19,359 --> 00:21:22,439
Well, realistically when a container stops working or crashes,

474
00:21:22,449 --> 00:21:26,290
do you do a security level investigation or do you turn it back on?

475
00:21:26,609 --> 00:21:28,439
No, you just turn that back on. It's fine.

476
00:21:28,939 --> 00:21:32,680
-- Right. Yeah,
-- there's no way you're gonna investigate every time something fails.

477
00:21:33,040 --> 00:21:37,739
No, no, definitely not. And, and, but anyway, so there's, there's enough steps.

478
00:21:37,750 --> 00:21:40,750
This isn't one of those, do nothing and get hacked.

479
00:21:40,760 --> 00:21:42,709
-- The,
-- the real, I think the challenge is,

480
00:21:42,719 --> 00:21:47,339
is for any provider providing multi-tenant container environments there

481
00:21:47,560 --> 00:21:51,209
and they're not doing it correctly. Like no Se Linux or

482
00:21:51,439 --> 00:21:52,780
you know, no container

483
00:21:52,979 --> 00:21:55,180
wrapped in a VM. They're, they're up the creek.

484
00:21:55,189 --> 00:21:57,310
But again, they're up the creek regardless.

485
00:21:57,339 --> 00:22:00,260
Like some, it's like the, it's like all the Linux kernel vulnerabilities.

486
00:22:00,270 --> 00:22:04,680
If you are relying upon the Linux kernel to be secure,

487
00:22:04,800 --> 00:22:07,680
-- it, it's
-- not, yeah, all 3 million lines of it.

488
00:22:07,689 --> 00:22:11,300
-- Uh,
-- 3 million isn't, I don't even know what it is now, I guessed.

489
00:22:11,310 --> 00:22:14,020
-- Oh,
-- it's tens of millions. It's, um,

490
00:22:14,410 --> 00:22:15,170
is it? Yeah,

491
00:22:15,579 --> 00:22:17,699
-- I'm not surprised
-- if I hit, uh, let's see,

492
00:22:17,709 --> 00:22:22,920
we got uh 2596 CV entries that match the phrase Linux kernel.

493
00:22:23,310 --> 00:22:25,329
-- Uh
-- Whatever. That's no fun here. I can ask my phone.

494
00:22:26,260 --> 00:22:28,599
Hey, Google, I'll say, ok, Google,

495
00:22:29,660 --> 00:22:32,640
how many lines are in the Linux kernel?

496
00:22:33,000 --> 00:22:33,560
According to

497
00:22:33,660 --> 00:22:33,670
a

498
00:22:34,140 --> 00:22:34,170
tech?

499
00:22:35,069 --> 00:22:35,459
Shut up.

500
00:22:38,880 --> 00:22:44,599
It says 13 million, 0, 15 million. Oh, wait 15 million lines of code in 2011.

501
00:22:45,479 --> 00:22:47,540
Uh So it's probably more than that now.

502
00:22:47,680 --> 00:22:50,739
-- So, I don't know. It's a lot, we'll just say that I
-- think it's 20 or 30

503
00:22:50,750 --> 00:22:51,500
probably.

504
00:22:51,569 --> 00:22:55,800
And that was 2011 was what, like seven internet lifetimes ago?

505
00:22:55,829 --> 00:22:59,290
Well, and even if you got it down to like what would be used on a container host.

506
00:22:59,300 --> 00:23:00,420
It still is

507
00:23:01,180 --> 00:23:03,780
-- in the 5 to 10 million lines of code realm.
-- Uh

508
00:23:03,890 --> 00:23:09,300
At least, at least. So. So anyway, I guess, uh the only advice you can get

509
00:23:09,400 --> 00:23:13,410
people is patchier systems, which is terrible advice and una actionable.

510
00:23:13,420 --> 00:23:15,500
And so in summary, we're doomed.

511
00:23:15,550 --> 00:23:19,430
Well, I, I would say even more importantly, if you are going to use containers

512
00:23:19,589 --> 00:23:20,380
again,

513
00:23:20,390 --> 00:23:24,739
this isn't very helpful advice but start looking at trying to use them correctly.

514
00:23:24,750 --> 00:23:26,949
And like this is a challenge I'm having, you know, with the CS A,

515
00:23:26,959 --> 00:23:27,859
with our infrastructure,

516
00:23:28,119 --> 00:23:31,400
I've at least very carefully now separated our state.

517
00:23:31,469 --> 00:23:33,180
So although we're not using containers,

518
00:23:33,619 --> 00:23:35,489
we are able to use containers because the

519
00:23:35,500 --> 00:23:38,150
underlying application is just doing underlying application stuff.

520
00:23:38,160 --> 00:23:39,510
It's actually there's no data there.

521
00:23:39,520 --> 00:23:43,310
It's all in the back end database or S3 or whatever,

522
00:23:43,500 --> 00:23:44,520
right? Like I can

523
00:23:44,699 --> 00:23:47,719
actually transfer that application into a container

524
00:23:48,199 --> 00:23:50,369
and not have to worry about there being some local

525
00:23:50,380 --> 00:23:52,890
state that I care about like data storage or whatever.

526
00:23:53,189 --> 00:23:55,650
Right. Right. And, and that's fair.

527
00:23:55,660 --> 00:23:55,949
Well,

528
00:23:55,959 --> 00:23:59,290
and the reason I did this is so that I could know I was properly backing everything up.

529
00:23:59,640 --> 00:24:01,060
It had nothing to do with containers

530
00:24:01,209 --> 00:24:02,489
-- and,
-- and that's fair.

531
00:24:02,839 --> 00:24:04,349
But at the same time, man,

532
00:24:04,359 --> 00:24:07,589
that's not really actionable advice for most people because

533
00:24:07,719 --> 00:24:08,420
saying

534
00:24:08,589 --> 00:24:12,140
again, you should, you should, you know, build your applications to

535
00:24:12,390 --> 00:24:16,060
containers doesn't account for the fact that there's tons of currently deployed

536
00:24:16,069 --> 00:24:18,800
applications that are let's face it never going to be updated.

537
00:24:18,810 --> 00:24:20,339
Well, I mean there's, there's tricks you can do,

538
00:24:20,349 --> 00:24:23,829
you can mount file systems within containers from underlying systems or whatever,

539
00:24:23,839 --> 00:24:25,579
from a, you know, NFS or whatever.

540
00:24:25,829 --> 00:24:29,380
Um So maybe this might be the evidence or the impetus you need to, you know,

541
00:24:29,390 --> 00:24:31,660
get some time from your manager to, you know,

542
00:24:32,189 --> 00:24:34,150
spend some time addressing technical debt

543
00:24:34,609 --> 00:24:35,650
with any luck. Right.

544
00:24:36,010 --> 00:24:38,290
-- Uh,
-- no, you won't because you're, you're busy patching.

545
00:24:39,349 --> 00:24:40,439
Yeah, pretty much.

546
00:24:40,689 --> 00:24:46,489
Oh, man. Although you know what actually is potentially good advice here is,

547
00:24:46,800 --> 00:24:51,640
this is one of those instances where I think using a container service

548
00:24:51,939 --> 00:24:55,400
can have immense value because you don't care

549
00:24:55,410 --> 00:24:57,280
if someone else is running your containers.

550
00:24:57,290 --> 00:25:00,760
Now, granted they're going to get shut down. Even if you don't want them to be

551
00:25:00,939 --> 00:25:04,189
-- just given the, the current environment.
-- Not necessarily like with Google,

552
00:25:05,140 --> 00:25:05,699
you know,

553
00:25:06,030 --> 00:25:08,079
wrapping it in a VM, they, they're just like,

554
00:25:08,410 --> 00:25:10,630
yeah, we don't care about this attack. It's, it's an on issue.

555
00:25:11,489 --> 00:25:13,060
Yeah, that's, that's probably fair.

556
00:25:13,069 --> 00:25:16,089
And I guess that's part of the beauty of it is if it's not your container,

557
00:25:16,099 --> 00:25:17,599
ho you don't have to carry either.

558
00:25:17,640 --> 00:25:20,829
The, the issue becomes if you don't want your application rebooted

559
00:25:21,050 --> 00:25:22,670
and you, they're going to make you reboot

560
00:25:23,020 --> 00:25:24,589
then, then it's your problem.

561
00:25:24,599 --> 00:25:26,189
But yeah, for the most part, I mean,

562
00:25:26,199 --> 00:25:30,829
this is part of the beauty of using like everything as a service I think is you can,

563
00:25:30,839 --> 00:25:32,290
you can push a lot of the,

564
00:25:33,000 --> 00:25:36,060
I guess risk and danger often to someone else.

565
00:25:36,130 --> 00:25:36,540
Well,

566
00:25:36,550 --> 00:25:38,079
more to the point you can push the risk and

567
00:25:38,089 --> 00:25:40,439
danger off onto somebody else that's more competent than you.

568
00:25:40,449 --> 00:25:43,500
I can't run a security operation center or

569
00:25:43,739 --> 00:25:47,099
secure systems as well. As Amazon or Google or Microsoft can

570
00:25:48,239 --> 00:25:51,410
even with a budget of a million dollars or $100 million

571
00:25:51,819 --> 00:25:56,449
that's still less than the, you know, Amazon has custom silicon, you know,

572
00:25:56,459 --> 00:25:58,209
the nitro chip in their new hosts.

573
00:25:58,349 --> 00:26:02,140
Google has custom silicon, I believe Microsoft, I mean,

574
00:26:02,150 --> 00:26:05,699
these guys are making custom add on, you know, watchdog, security chips.

575
00:26:06,390 --> 00:26:09,229
-- Nobody else can do that.
-- Right. Well, in ignoring,

576
00:26:09,790 --> 00:26:10,930
ignoring that

577
00:26:11,119 --> 00:26:12,839
you have other work to do,

578
00:26:13,290 --> 00:26:17,760
right. These guys have security people that, that is their only job.

579
00:26:17,949 --> 00:26:18,439
I mean,

580
00:26:18,949 --> 00:26:22,770
this is, this is one of the things II, I always tell people when they're asking about.

581
00:26:22,780 --> 00:26:24,589
Oh, but you know, are these people a bunch of idiots?

582
00:26:24,599 --> 00:26:28,290
It's like, well, they probably are but you have other work to do and they don't.

583
00:26:28,300 --> 00:26:30,760
So even though they might not be the smartest cookies

584
00:26:30,770 --> 00:26:32,969
in the pack like this is all they're doing.

585
00:26:32,979 --> 00:26:35,329
So they have the potential to definitely do a

586
00:26:35,339 --> 00:26:37,930
better job than you even if you're a genius.

587
00:26:38,260 --> 00:26:38,400
Yeah.

588
00:26:38,670 --> 00:26:38,910
Agreed.

589
00:26:39,260 --> 00:26:40,010
So anyway,

590
00:26:40,719 --> 00:26:45,459
that is that, I, I guess we can probably wrap this one up now. Put a ball on it. It's,

591
00:26:45,599 --> 00:26:46,050
uh

592
00:26:46,660 --> 00:26:47,859
for what it's worth.

593
00:26:47,979 --> 00:26:49,890
My parting thoughts on this are,

594
00:26:49,920 --> 00:26:54,219
I'm shocked it took this long for a flaw like this to happen

595
00:26:54,619 --> 00:26:57,089
because, I mean, containers have been a big deal for what?

596
00:26:57,099 --> 00:26:59,300
-- Probably 10 years now, I would
-- say closer.

597
00:26:59,310 --> 00:27:01,660
Well, they've been a big deal for, I'd say more like five years.

598
00:27:03,390 --> 00:27:04,160
They've been around a while.

599
00:27:04,969 --> 00:27:05,939
But like this is,

600
00:27:06,689 --> 00:27:10,390
I'm, I'm surprised this is the first one we've seen and

601
00:27:10,770 --> 00:27:13,130
I'm sure we'll see another

602
00:27:13,930 --> 00:27:19,400
but at the same time, like five years and only one, like super crazy escape flaw.

603
00:27:19,680 --> 00:27:21,310
That's pretty solid.

604
00:27:21,810 --> 00:27:22,030
Well,

605
00:27:22,040 --> 00:27:25,680
the fear would be now is that people go looking for more of these and find a pile more.

606
00:27:25,689 --> 00:27:26,069
Uh,

607
00:27:27,619 --> 00:27:28,510
maybe I,

608
00:27:28,520 --> 00:27:31,439
I feel like this is already a lucrative

609
00:27:31,449 --> 00:27:35,349
enough security problem that people have been looking

610
00:27:35,800 --> 00:27:36,430
and

611
00:27:36,800 --> 00:27:38,900
I don't know how many more

612
00:27:39,189 --> 00:27:41,020
people are going to find

613
00:27:41,239 --> 00:27:46,319
just because it's, it's hard to find problems like this. And like this is

614
00:27:46,670 --> 00:27:49,339
when you look at it, it's like, well, duh look how simple it was,

615
00:27:49,349 --> 00:27:52,819
but the reality is actually finding it was quite difficult.

616
00:27:53,270 --> 00:27:55,420
Well, I mean, by definition, some, I mean,

617
00:27:55,630 --> 00:27:59,280
it was white hat guys, I assume they're white hats. They work for souza

618
00:27:59,670 --> 00:28:00,550
found it.

619
00:28:00,560 --> 00:28:01,369
Uh So, you know,

620
00:28:01,380 --> 00:28:05,640
clearly other white hat hackers haven't found this and reported it because it,

621
00:28:05,650 --> 00:28:08,780
-- well, by definition, it would have been dealt with by now,
-- right?

622
00:28:08,790 --> 00:28:09,530
And

623
00:28:10,609 --> 00:28:11,310
yes,

624
00:28:11,640 --> 00:28:13,880
I would, I would point out

625
00:28:14,359 --> 00:28:18,750
it was found by white hat or it was reported by white hats,

626
00:28:19,000 --> 00:28:19,609
right?

627
00:28:20,060 --> 00:28:20,869
It would,

628
00:28:21,170 --> 00:28:26,030
it would not shock me if someone's exploit just got burnt this week,

629
00:28:26,260 --> 00:28:26,729
right?

630
00:28:27,170 --> 00:28:31,170
Because this is very simple. But anyway, we we shall not

631
00:28:31,510 --> 00:28:34,569
speculate on zero day flaws. So,

632
00:28:34,869 --> 00:28:37,800
all right, man, I guess. Thank you. Thank you everyone for listening.

633
00:28:37,810 --> 00:28:40,680
You can go to open source security podcast.com, hit up the show notes,

634
00:28:40,699 --> 00:28:41,280
you can use the P

635
00:28:41,630 --> 00:28:44,170
OS S podcast. Hashtag You hit us up on social media,

636
00:28:44,390 --> 00:28:48,530
-- Kurt. You have a fantastic rest of your day.
-- You too. Thanks everybody.

637
00:28:48,699 --> 00:28:50,000
-- Thanks
-- everyone. Bye bye.