0
00:00:05,369 --> 00:00:09,329
Hello and welcome to the open source security podcast with myself, Kurt Siefried

1
00:00:09,520 --> 00:00:13,359
-- and my partner in Time travel, Josh Bresser.
-- It's not time travel.

2
00:00:13,369 --> 00:00:16,079
It's a blast from the past. There's a difference. I

3
00:00:16,190 --> 00:00:17,950
guess we're not moving.

4
00:00:17,959 --> 00:00:21,750
Well, we are moving forward in time at a rate of one second per second.

5
00:00:22,149 --> 00:00:25,270
But we're going to talk about the past. We are,

6
00:00:25,430 --> 00:00:28,299
we move forward in time at a rate of one second per second.

7
00:00:28,309 --> 00:00:31,860
Wait a minute, wait a minute. Because with relativity, the faster you move, the

8
00:00:32,168 --> 00:00:33,740
time slows down to an observer.

9
00:00:34,680 --> 00:00:36,689
So is a second. A second is Justin

10
00:00:37,150 --> 00:00:40,659
as X number of steps or transitions for a season, madam. Right.

11
00:00:41,009 --> 00:00:41,400
Right.

12
00:00:41,490 --> 00:00:45,330
-- Oh, what speed
-- at the reference speed of wherever you're at, wherever you're at.

13
00:00:45,340 --> 00:00:46,369
A second is a second.

14
00:00:46,709 --> 00:00:48,090
Like you

15
00:00:48,220 --> 00:00:49,180
observing me,

16
00:00:49,700 --> 00:00:50,169
your,

17
00:00:50,290 --> 00:00:52,799
-- your frame of reference would have a different one.
-- Ok. That makes sense.

18
00:00:52,810 --> 00:00:52,860
So,

19
00:00:52,869 --> 00:00:55,279
basically what you're arguing is like earth time would be UTC

20
00:00:55,290 --> 00:00:57,279
time and me in a spaceship would be Kurt time.

21
00:00:58,029 --> 00:00:58,509
Exactly.

22
00:00:58,610 --> 00:01:00,720
Exactly. Like my 37 minute nap on Mars.

23
00:01:01,900 --> 00:01:04,379
Oh, man, I forgot about, we don't have potholes

24
00:01:04,888 --> 00:01:06,760
and I'm dumber than I ever,

25
00:01:07,120 --> 00:01:10,099
well, I, well, I don't know. This Tar Fil thing's pretty dumb.

26
00:01:10,569 --> 00:01:12,510
-- It's
-- pretty dumb. So it's, well,

27
00:01:12,629 --> 00:01:13,489
it's not just dumb.

28
00:01:14,919 --> 00:01:16,860
It's widespread. All right. So

29
00:01:17,099 --> 00:01:20,410
there's going to be a lot to unpack in this one. And

30
00:01:21,010 --> 00:01:24,300
let's just start with the CV E ID.

31
00:01:24,949 --> 00:01:33,099
We're talking about CV E 2007. That's right. 2007 4559.

32
00:01:33,110 --> 00:01:35,050
And it's not like it's a back ported CV, like

33
00:01:35,209 --> 00:01:38,589
it was released in 2007. Like this is when it was

34
00:01:38,800 --> 00:01:39,080
like,

35
00:01:39,089 --> 00:01:43,290
-- there's links to Python mailing archives from 2007 which
-- we got

36
00:01:43,300 --> 00:01:45,660
to dig back through and we got to see people,

37
00:01:45,669 --> 00:01:47,180
we remember back then

38
00:01:47,480 --> 00:01:52,199
-- adding bugs to stuff.
-- But like no, like people that were my boss at one point.

39
00:01:52,519 --> 00:01:53,459
Uh That's true.

40
00:01:53,970 --> 00:01:55,349
And this was 2007.

41
00:01:55,360 --> 00:01:57,449
I would have been at Red Hat for three years

42
00:01:57,459 --> 00:02:00,349
at this point doing all of this sort of work.

43
00:02:00,620 --> 00:02:02,459
I started in 2000 and four.

44
00:02:02,580 --> 00:02:04,230
Yeah, I wasn't there until 2010.

45
00:02:04,480 --> 00:02:07,069
-- So
-- you weren't there yet. I started in 2004

46
00:02:07,199 --> 00:02:07,870
doing

47
00:02:08,029 --> 00:02:08,220
vulnerable

48
00:02:08,339 --> 00:02:09,449
and, and one of the links,

49
00:02:09,460 --> 00:02:13,149
I'll put the Red Hat bug in the show notes because it's actually really good.

50
00:02:13,160 --> 00:02:15,899
-- And I don't blame Red Hat for this too much
-- Red

51
00:02:15,910 --> 00:02:17,580
hat just rolled with it like the rest of it,

52
00:02:17,809 --> 00:02:18,809
-- it
-- happens. I

53
00:02:19,160 --> 00:02:20,179
it was a different time

54
00:02:20,449 --> 00:02:22,979
and I mean, we'll talk about this but yeah, I mean,

55
00:02:23,149 --> 00:02:27,449
-- basically to buck the trend is a pain. So
-- let's start at the beginning.

56
00:02:27,919 --> 00:02:31,380
There is a story that

57
00:02:31,750 --> 00:02:35,860
I found on the register. This has been a couple a week or two now, I think,

58
00:02:36,059 --> 00:02:37,610
I don't know, remember how long it's been.

59
00:02:37,619 --> 00:02:38,270
But anyway,

60
00:02:38,279 --> 00:02:42,320
there's a story on the register that basically a security researcher in, what is it?

61
00:02:42,330 --> 00:02:47,279
2022 a security researcher basically figured out that the Python Tar

62
00:02:47,440 --> 00:02:48,250
file

63
00:02:48,429 --> 00:02:51,850
module is susceptible to path traversal.

64
00:02:52,179 --> 00:02:53,600
And this is something that

65
00:02:53,889 --> 00:02:55,919
I feel like probably around 2007,

66
00:02:55,929 --> 00:03:01,509
every single tar file handling whatever was being susceptible to

67
00:03:01,520 --> 00:03:02,869
and we were fixing them all over the place.

68
00:03:02,880 --> 00:03:07,639
And the idea is if I tar up a file with a path of dot dot slash dot dot

69
00:03:07,919 --> 00:03:08,259
dot dot

70
00:03:08,529 --> 00:03:08,610
dot

71
00:03:08,759 --> 00:03:11,600
dot slash, which kind of slash the good slash da

72
00:03:12,279 --> 00:03:12,679
slash,

73
00:03:13,130 --> 00:03:15,889
there's only one slash the other slash is dumb dot

74
00:03:16,039 --> 00:03:19,990
slash whatever. All the usual path traversal slash Etsy slash password

75
00:03:20,229 --> 00:03:20,889
and

76
00:03:21,029 --> 00:03:25,339
the root user un tars a tar file, it will overwrite

77
00:03:26,009 --> 00:03:26,429
Etsy path

78
00:03:28,039 --> 00:03:29,029
-- or any
-- file you want.

79
00:03:30,259 --> 00:03:32,880
Essentially, it's a director traversal attack

80
00:03:33,139 --> 00:03:33,800
and

81
00:03:34,050 --> 00:03:36,210
tar files historically supported

82
00:03:36,630 --> 00:03:39,690
dot dot slash because, well, things like symbolic links,

83
00:03:40,240 --> 00:03:40,669
right? Like

84
00:03:40,919 --> 00:03:43,809
there's, there's, this is one of the few times where there's

85
00:03:43,990 --> 00:03:44,000
a

86
00:03:44,389 --> 00:03:44,529
path.

87
00:03:44,960 --> 00:03:48,779
This is one of the few times where there is an actual legitimate,

88
00:03:48,789 --> 00:03:50,910
correct use case to support that

89
00:03:51,309 --> 00:03:53,589
like on a web server and stuff. No, just, no,

90
00:03:53,800 --> 00:03:54,080
the t

91
00:03:54,250 --> 00:03:57,110
-- doesn't need this anymore.
-- Not anymore. No. But back in the day it never did.

92
00:03:57,270 --> 00:03:57,869
Never did.

93
00:03:57,970 --> 00:04:00,100
I'm saying it never did fight me, fight me

94
00:04:00,460 --> 00:04:05,119
anyway. The path traversal issue is basically reported in 2007.

95
00:04:05,130 --> 00:04:05,919
Well, ok, I'm sorry. So

96
00:04:06,089 --> 00:04:07,229
back to 2022

97
00:04:07,720 --> 00:04:11,000
2022 researcher finds it does some investigation

98
00:04:11,009 --> 00:04:14,479
has demo exploits all that stuff and

99
00:04:14,679 --> 00:04:15,660
finds out, oh,

100
00:04:15,940 --> 00:04:17,678
we found this in 2007

101
00:04:18,100 --> 00:04:20,410
and the people who developed Tar threw their hands

102
00:04:20,420 --> 00:04:22,540
in the air and declared it not their problem.

103
00:04:22,709 --> 00:04:22,820
Uh

104
00:04:23,350 --> 00:04:23,700
Tar

105
00:04:23,859 --> 00:04:24,329
file

106
00:04:24,609 --> 00:04:24,769
tar

107
00:04:24,880 --> 00:04:25,380
file, sorry.

108
00:04:26,269 --> 00:04:29,480
Fun fact of history CV E 2001

109
00:04:30,230 --> 00:04:32,290
dash 1267

110
00:04:32,510 --> 00:04:34,670
directory traversal vulnerability in gene

111
00:04:34,799 --> 00:04:38,730
uar 1.13 0.19 and early allows local users to overwrite arbitrary files during our

112
00:04:39,059 --> 00:04:41,470
archive extraction via Tar file whose file name contains

113
00:04:41,679 --> 00:04:42,299
dot dot

114
00:04:42,420 --> 00:04:43,709
So tartar

115
00:04:43,989 --> 00:04:48,279
fixed it like well in 2001. So like this is not unknown

116
00:04:48,480 --> 00:04:50,519
variants of this have been found in

117
00:04:50,850 --> 00:04:53,200
multiple times since 2001.

118
00:04:53,359 --> 00:04:56,959
So there have been many, many different ways to exploit this.

119
00:04:56,970 --> 00:05:00,040
Well, everything that basically does Tar at some point learns this the hard way.

120
00:05:00,049 --> 00:05:01,589
Even the Tar program.

121
00:05:01,600 --> 00:05:05,000
I I'm pretty sure if we did enough digging and we're not going to.

122
00:05:05,149 --> 00:05:06,209
But if we did enough digging,

123
00:05:06,220 --> 00:05:09,350
we would find examples of this fix multiple times

124
00:05:09,359 --> 00:05:11,660
in the new Tar because there were different codings.

125
00:05:11,670 --> 00:05:14,510
I remember there were different, like plugins, there was all this stuff.

126
00:05:14,519 --> 00:05:16,549
There are different ways to extract anyway. It doesn't matter.

127
00:05:16,559 --> 00:05:16,730
So,

128
00:05:16,739 --> 00:05:20,390
a person in 2022 finds this realizes it's old

129
00:05:20,399 --> 00:05:24,390
and also realizes that this affects 350,000 things.

130
00:05:24,399 --> 00:05:29,420
-- Essentially.
-- Well, everything, I mean, tar files are kind of

131
00:05:29,660 --> 00:05:31,589
your options are tar files and zip files.

132
00:05:32,049 --> 00:05:32,609
Yeah, basically.

133
00:05:34,220 --> 00:05:34,230
Uh,

134
00:05:34,940 --> 00:05:36,839
they, they, they, they can. Yes.

135
00:05:36,850 --> 00:05:41,720
Well, I wonder if the zip module in Python addresses this, it probably does

136
00:05:41,920 --> 00:05:45,119
anyway, anyway, back to 2007. Now

137
00:05:45,329 --> 00:05:51,029
this is found it gets reported. The tar file people have a patch

138
00:05:51,790 --> 00:05:53,480
and then the author

139
00:05:53,670 --> 00:05:54,420
or not the author.

140
00:05:54,429 --> 00:05:57,500
But the maintainer of Tar file basically puts a message into the bug tracker.

141
00:05:57,510 --> 00:05:58,049
That's like

142
00:05:58,179 --> 00:06:02,790
after some thought and discussion, I decided this isn't a security vulnerability.

143
00:06:02,799 --> 00:06:04,850
Like if you're un tarring files,

144
00:06:05,070 --> 00:06:09,980
it is your job to check the file before you un tar it. I'm not fixing this

145
00:06:10,119 --> 00:06:10,690
and I would

146
00:06:10,880 --> 00:06:13,170
partly agree in the sense of ignoring the

147
00:06:13,179 --> 00:06:17,170
dot dot directory traversal shenanigans tar files.

148
00:06:17,179 --> 00:06:20,390
Well, depending on implementation, some of them can also have absolute paths,

149
00:06:20,440 --> 00:06:20,779
right?

150
00:06:20,790 --> 00:06:22,100
But basically ignoring that.

151
00:06:22,109 --> 00:06:24,279
So let's ignore absolute paths if they're supported or not.

152
00:06:24,290 --> 00:06:27,339
And let's ignore directory traversal issues if you, for example,

153
00:06:27,350 --> 00:06:29,859
unpack a tar ball in your home directory.

154
00:06:30,190 --> 00:06:33,329
Well, yeah, like you could over dot Ssh configure or something

155
00:06:33,510 --> 00:06:34,000
like that.

156
00:06:34,790 --> 00:06:37,559
Like I don't know, like, because I legitimately have a Tar Ball,

157
00:06:37,570 --> 00:06:41,640
like with my dot SSH directory in it because I wanted to back it up,

158
00:06:42,070 --> 00:06:45,250
back in the day. Right? Because like, yeah, I mean, how else am I going to back it up?

159
00:06:45,450 --> 00:06:47,570
Ir sync my home directory somewhere else.

160
00:06:47,779 --> 00:06:52,690
Well, but I mean, like I would tar it up and, you know, anyways, so there is a,

161
00:06:53,029 --> 00:06:55,329
there is one argument to be made that is essentially

162
00:06:55,339 --> 00:06:57,929
as if you are extracting data onto a file system,

163
00:06:57,940 --> 00:07:01,769
either you need to be really careful or like do it kind of inside of

164
00:07:01,890 --> 00:07:01,899
a,

165
00:07:02,089 --> 00:07:04,209
when I say container, I don't mean like a new modern container.

166
00:07:04,220 --> 00:07:06,774
I'm talking about like 20 years ago, like I'm talking like make dirt

167
00:07:06,975 --> 00:07:07,765
CD, tamp,

168
00:07:07,875 --> 00:07:11,545
-- unpack
-- it. But if it's got a bunch of dot dot slashes, you can still escape that.

169
00:07:11,725 --> 00:07:15,285
Yeah. Yeah. So, and you know, and so if you want to be super paranoid, right?

170
00:07:15,295 --> 00:07:16,755
You could like ch root it, you know,

171
00:07:16,765 --> 00:07:19,654
because I know ch roots not a security thing because yeah, it's not,

172
00:07:19,665 --> 00:07:20,295
but it's convenient.

173
00:07:20,304 --> 00:07:22,334
But anyways or a free DJ or whatever the

174
00:07:22,345 --> 00:07:26,904
point is if you want to unpack an archive safely

175
00:07:27,709 --> 00:07:30,350
and, and this is ignoring dot dot slash and like

176
00:07:30,459 --> 00:07:31,750
arbitrary path names,

177
00:07:31,910 --> 00:07:33,369
it's still tricky because

178
00:07:33,579 --> 00:07:36,769
you have to do it in like a directory where there's nothing that you care about

179
00:07:37,070 --> 00:07:39,059
that other Attackers can't see.

180
00:07:39,279 --> 00:07:44,109
So they can't exploit to talk to or simlink or whatever. But having said that if I make

181
00:07:44,250 --> 00:07:48,089
dirt, temp CD, temp and unpack a file in there, I expect that file to stay in there.

182
00:07:48,100 --> 00:07:51,059
-- Like not,
-- I agree. I, I would not expect it to escape

183
00:07:51,470 --> 00:07:53,609
-- and
-- I shouldn't have to do stuff like ch root

184
00:07:53,619 --> 00:07:55,959
or free BS D jail or all sorts of shenanigans.

185
00:07:56,320 --> 00:07:56,850
It should just,

186
00:07:58,149 --> 00:08:01,859
yeah, like when I right, click on something in windows and extract zip. I expect that

187
00:08:02,070 --> 00:08:06,329
it's going to make a directory and then spew garbage all o all the way down.

188
00:08:06,339 --> 00:08:09,760
I don't care. But in that directory and fun fact to bring up the zip

189
00:08:10,109 --> 00:08:12,209
zip slip, zip already. Yeah. Also went through this.

190
00:08:12,220 --> 00:08:16,910
-- Remember, I mean,
-- zip, well, zip slip is a copy and paste problem

191
00:08:17,279 --> 00:08:18,170
is it? I thought it was

192
00:08:18,290 --> 00:08:18,720
so zips,

193
00:08:18,920 --> 00:08:20,350
the problem with zip slip is

194
00:08:20,600 --> 00:08:23,399
the, the Java zip library

195
00:08:23,589 --> 00:08:25,640
could be used unsafely.

196
00:08:26,279 --> 00:08:31,649
It was there, there was an example on stack overflow that if you copy and pasted it,

197
00:08:31,660 --> 00:08:34,760
you were vulnerable to zip slip, which was the literally the same problem.

198
00:08:34,770 --> 00:08:35,789
It was the directory traversal.

199
00:08:35,880 --> 00:08:38,380
And I guess it's harder to fix because now you have to fix

200
00:08:38,808 --> 00:08:38,960
um

201
00:08:39,090 --> 00:08:40,950
kajillions million instances and

202
00:08:41,080 --> 00:08:41,549
Ty Magill

203
00:08:41,669 --> 00:08:42,400
codes.

204
00:08:42,409 --> 00:08:44,500
Well, so I mean, but here's the thing,

205
00:08:44,570 --> 00:08:48,570
this is this the fix in this case is the same as the fix and zip slip

206
00:08:48,580 --> 00:08:50,559
where you have to send a patch to every

207
00:08:50,570 --> 00:08:54,330
project because according to the tar file authors,

208
00:08:54,690 --> 00:08:59,609
the problem isn't tar file, the problem is you extracting untrusted TARS.

209
00:08:59,619 --> 00:09:03,429
And the fun thing is there is a patch for this for Python Tar file to fix it.

210
00:09:03,979 --> 00:09:07,530
-- There is which I don't know if that'll get added or not.
-- Well, here's the thing.

211
00:09:07,539 --> 00:09:09,260
You could fix this on the system,

212
00:09:09,270 --> 00:09:12,500
Python and then be done with it and you don't have to patch all the things using it.

213
00:09:12,700 --> 00:09:17,049
That is the right way to fix it. And I'm hopeful, Python will change their mind.

214
00:09:17,059 --> 00:09:19,109
Given it's been a decade,

215
00:09:19,580 --> 00:09:21,090
almost two decades.

216
00:09:21,179 --> 00:09:22,859
Let's thought experiment assume for a moment

217
00:09:22,869 --> 00:09:24,969
that this is not a security vulnerability.

218
00:09:24,979 --> 00:09:26,320
OK. Cool. What is the

219
00:09:26,549 --> 00:09:27,309
side to fixing it?

220
00:09:27,460 --> 00:09:31,849
-- Like, why not just fix it?
-- I agree with you. I don't, I don't think there is a downside.

221
00:09:32,099 --> 00:09:36,890
I, I can construct a pathological use case where I do need dot dot Stuff to escape.

222
00:09:36,900 --> 00:09:37,369
And it's

223
00:09:37,580 --> 00:09:40,780
again like pathological and there's far better ways to do it.

224
00:09:40,789 --> 00:09:43,809
And that's the point is it's such an extreme corner case that it's wrong.

225
00:09:44,200 --> 00:09:47,210
I agree. So this isn't like I'm not saying, never do this.

226
00:09:47,219 --> 00:09:49,219
I'm saying not only am I basically saying no,

227
00:09:49,270 --> 00:09:52,210
do this but given even the use cases where I would say do this.

228
00:09:52,429 --> 00:09:52,989
It's,

229
00:09:53,159 --> 00:09:55,369
there's, it's wrong. It's, there's better ways to do it.

230
00:09:55,429 --> 00:10:00,469
-- Add a flag to the function that says like I'm not smart or something, you know,
-- like,

231
00:10:00,500 --> 00:10:02,929
yeah, like I really do want this crazy behavior

232
00:10:03,119 --> 00:10:04,000
and that's the thing.

233
00:10:04,010 --> 00:10:04,260
So,

234
00:10:04,340 --> 00:10:06,679
and that is where I wanted to bring up open

235
00:10:06,690 --> 00:10:10,159
SSL S host name checks when it's processing certificates.

236
00:10:10,169 --> 00:10:10,479
So

237
00:10:10,590 --> 00:10:11,890
I want you to tell me

238
00:10:12,380 --> 00:10:18,469
-- when did Open SSL actually start checking host names by default
-- 2007,

239
00:10:18,479 --> 00:10:20,489
let's say just because that's what you're already talking about.

240
00:10:20,919 --> 00:10:21,320
Openness.

241
00:10:22,200 --> 00:10:23,340
No, I don't think so. Well,

242
00:10:23,440 --> 00:10:24,309
it's complicated. So

243
00:10:24,780 --> 00:10:29,010
up until version 1.02 it didn't even have support for it

244
00:10:29,520 --> 00:10:30,309
like you had to,

245
00:10:30,429 --> 00:10:31,419
you had to build your own

246
00:10:31,919 --> 00:10:36,109
and then they finally turned it on by default in 1.1 point. Oh, like that.

247
00:10:36,119 --> 00:10:40,169
I mean, the openness of C 1.02 release was in, I looked this up and then of course,

248
00:10:40,179 --> 00:10:41,030
I closed the tab

249
00:10:41,219 --> 00:10:42,429
2015.

250
00:10:43,090 --> 00:10:49,150
So in 2015 they gave you the possibility of checking it 2015.

251
00:10:49,200 --> 00:10:52,710
-- I mean, I'm sorry, this should have been done in the, hold
-- on. Ok.

252
00:10:52,719 --> 00:10:55,229
Wait, wait before you go. All judgy.

253
00:10:55,530 --> 00:10:59,469
I want to address two important things. I think number one,

254
00:10:59,650 --> 00:11:04,570
this was a very common mindset back in the, we'll say the odds,

255
00:11:04,880 --> 00:11:08,210
-- the two thousands.
-- Well, up until 2015, apparently

256
00:11:08,280 --> 00:11:08,859
and, and

257
00:11:08,979 --> 00:11:11,349
open SSL has historically

258
00:11:11,700 --> 00:11:16,099
held on to their mindset far longer than they ever should

259
00:11:16,359 --> 00:11:20,210
countless times. So that's ok. But that, that's part of the open SSL group.

260
00:11:20,219 --> 00:11:21,530
It's that's fine. That's fine.

261
00:11:21,539 --> 00:11:24,000
Back in the arts and even the nineties,

262
00:11:24,010 --> 00:11:27,760
this was the way it was where if you were going to use a live,

263
00:11:28,030 --> 00:11:29,500
you had to be smart.

264
00:11:29,510 --> 00:11:32,469
And there were multiple ways like this was a,

265
00:11:32,479 --> 00:11:37,380
a twisty path on the side of a cliff with loose rocks everywhere and it was up to

266
00:11:37,390 --> 00:11:40,859
you to watch your feet and not step on a loose rock and fall to your death.

267
00:11:41,039 --> 00:11:43,789
Well, or get mauled by a mountain lion.

268
00:11:44,320 --> 00:11:46,049
That's true. There were also mountain lions.

269
00:11:46,059 --> 00:11:48,010
-- The problem
-- is not just that openness is held to this.

270
00:11:48,190 --> 00:11:49,440
Everybody did this.

271
00:11:49,489 --> 00:11:51,880
I I agree that look at this tar issue, Kirk,

272
00:11:51,890 --> 00:11:54,799
this tar issue is literally that and there were many,

273
00:11:54,809 --> 00:12:00,150
many especially security things that would fall in this kind of just mindset.

274
00:12:00,159 --> 00:12:02,780
It, it, it was what it was and it was

275
00:12:03,210 --> 00:12:07,159
dangerous to use a lot of this stuff and a lot of security problems over the last,

276
00:12:07,169 --> 00:12:10,119
how many decades are the result of this?

277
00:12:10,130 --> 00:12:11,260
Like do it right?

278
00:12:11,270 --> 00:12:15,760
You moron when the reality is we should have made it hard to do it wrong.

279
00:12:15,859 --> 00:12:18,520
Well, inherent safety. And here's my favorite thing

280
00:12:18,719 --> 00:12:22,400
is in the open SSL stuff where they're talking about this. They

281
00:12:22,614 --> 00:12:23,174
literally like,

282
00:12:23,205 --> 00:12:25,744
oh we should like go grab the ruby implementation of this and

283
00:12:25,755 --> 00:12:29,174
just use it like because Ruby wrote a whole bile of code

284
00:12:29,335 --> 00:12:33,354
to do host name checks. Like and I guess I'm gonna say something kind of mean, but

285
00:12:33,455 --> 00:12:37,395
somebody had to go first and I guess it wasn't open as a cell. That blows my mind.

286
00:12:37,484 --> 00:12:42,075
That doesn't surprise me at all. No, no. And, and, well, even I remember in Python

287
00:12:42,265 --> 00:12:45,075
there was no host name checking. You could enable it,

288
00:12:45,474 --> 00:12:47,875
but it didn't work by default because you, they did,

289
00:12:47,885 --> 00:12:51,315
Python didn't ship with C A certificates.

290
00:12:51,669 --> 00:12:55,010
So there was no way for them to do any sort of verification.

291
00:12:55,299 --> 00:12:57,030
So it was up to you to get some

292
00:12:57,039 --> 00:13:00,450
C A certificates and then turn on verification manually.

293
00:13:00,599 --> 00:13:04,090
Which again, that was the way it was. And, and here's the thing,

294
00:13:04,210 --> 00:13:05,250
here's the thing.

295
00:13:05,260 --> 00:13:08,570
We had all these weird problems and we look at it now and we're horrified this,

296
00:13:08,580 --> 00:13:11,130
-- this feels like
-- this isn't even that long ago.

297
00:13:11,140 --> 00:13:15,409
-- This is less than a decade. This is six years,
-- Kurt, this was 100 years

298
00:13:15,690 --> 00:13:19,530
in normal dispute of history. Like this is 100 years ago.

299
00:13:19,890 --> 00:13:22,390
This is like eating lead

300
00:13:22,830 --> 00:13:25,179
in your cereal type stuff.

301
00:13:25,190 --> 00:13:28,390
But again, we have survivorship bias sometimes where it's like, oh,

302
00:13:28,400 --> 00:13:29,219
it wasn't that bad.

303
00:13:29,229 --> 00:13:33,179
I survived. Honestly, I don't think it was that bad and I don't think,

304
00:13:33,479 --> 00:13:35,900
I guess that's a thing. This didn't take anyone's life.

305
00:13:38,684 --> 00:13:39,075
I'm

306
00:13:39,344 --> 00:13:42,635
comfortable saying it did not take anyone's life.

307
00:13:42,885 --> 00:13:45,994
I, from what I understand of some of the stuff coming out of the

308
00:13:46,265 --> 00:13:46,905
anyways.

309
00:13:47,195 --> 00:13:47,934
Um Here's a question in

310
00:13:48,205 --> 00:13:49,205
the last five years,

311
00:13:50,434 --> 00:13:51,864
but here's the thing. So for example,

312
00:13:52,434 --> 00:13:57,114
in fairness back in 2000, how would you get all the root certificate, certificates

313
00:13:57,445 --> 00:13:59,155
or sorry, root certificate, authority certificates.

314
00:13:59,164 --> 00:14:00,315
And the answer is like good luck with that.

315
00:14:00,729 --> 00:14:01,799
So no, you took them from

316
00:14:02,039 --> 00:14:04,510
-- Mozilla. They published a nice list,
-- the Cab Forum.

317
00:14:04,520 --> 00:14:07,619
So what does the Cab forum stand for? Again? I'm totally spacing on that

318
00:14:07,719 --> 00:14:11,570
certification authority browser forum. And it's a voluntary consortium.

319
00:14:11,580 --> 00:14:13,909
But I mean, it's basically like once,

320
00:14:14,169 --> 00:14:17,570
like once Mozilla, like Chrome and Microsoft joined it was,

321
00:14:17,780 --> 00:14:21,549
that's it that only started existing in 2005. But having said that

322
00:14:21,929 --> 00:14:23,609
we've had the C A form and a

323
00:14:23,890 --> 00:14:28,590
like a generally agreed upon list of root certificate, authority providers

324
00:14:28,760 --> 00:14:30,630
since, well, 2005.

325
00:14:30,799 --> 00:14:33,030
-- Well,
-- we had one before. It's just Mozilla did it.

326
00:14:33,039 --> 00:14:33,679
So, yeah.

327
00:14:33,739 --> 00:14:37,940
And then it took 11 years for people to actually like start checking host names.

328
00:14:37,950 --> 00:14:38,869
Oh, see, here's the thing,

329
00:14:39,359 --> 00:14:42,000
web browsers have been checking host names

330
00:14:42,109 --> 00:14:42,989
correctly.

331
00:14:43,849 --> 00:14:45,929
Well, basically since day one. Ok,

332
00:14:46,080 --> 00:14:47,409
this is a good

333
00:14:47,679 --> 00:14:48,239
segue

334
00:14:48,650 --> 00:14:50,809
into something I've been thinking about a lot lately

335
00:14:50,820 --> 00:14:52,909
that I don't have my thoughts completely formed.

336
00:14:53,150 --> 00:14:57,460
But if you look at the world of web browsers, specifically,

337
00:14:57,469 --> 00:15:01,090
web browsers have been under attack pretty much forever.

338
00:15:01,099 --> 00:15:02,940
And I think the reason is they're actually like,

339
00:15:02,950 --> 00:15:06,520
there's real money moving around generally so you can steal credit cards and stuff.

340
00:15:06,929 --> 00:15:09,940
I was about to say they're, they're one of the few pieces of software that

341
00:15:10,364 --> 00:15:13,695
-- normal people use to transact. Right.
-- Right. Right.

342
00:15:13,705 --> 00:15:18,705
And so there's like, literally money, there's money in web browsers, literally. So

343
00:15:19,054 --> 00:15:20,234
they've been attacked

344
00:15:20,565 --> 00:15:21,875
opportunistically

345
00:15:22,005 --> 00:15:23,755
since the beginning, pretty much.

346
00:15:23,765 --> 00:15:26,835
And so they had to solve these problems because they were solving real problems.

347
00:15:27,090 --> 00:15:30,109
Now, if you look at like host, name checking and Python scripts,

348
00:15:30,229 --> 00:15:33,510
how many of those are legitimately going to be attacked?

349
00:15:33,520 --> 00:15:37,830
The number is exceedingly small. We're talking probably a PT attack.

350
00:15:37,929 --> 00:15:40,750
-- Yeah,
-- to a degree. But there's also, for example, the whole thing

351
00:15:40,979 --> 00:15:43,299
where remember Ssh Sniff and SSL,

352
00:15:43,309 --> 00:15:46,309
sniff and all those used to just magically work because it was so

353
00:15:46,640 --> 00:15:47,890
trivial

354
00:15:48,640 --> 00:15:54,140
-- to, for example, intercept like software updates.
-- No. OK. No, it wasn't trivial.

355
00:15:54,299 --> 00:15:57,400
If you were in charge of a network, it was trivial.

356
00:15:57,409 --> 00:16:00,219
But the, the reality is you sitting where you're sitting

357
00:16:00,549 --> 00:16:03,530
and a software mirror sitting somewhere else,

358
00:16:03,830 --> 00:16:06,799
the ability for an attacker to get between you. And that

359
00:16:06,900 --> 00:16:08,460
is not simple.

360
00:16:08,599 --> 00:16:08,739
The

361
00:16:09,059 --> 00:16:11,030
back in the olden days on that local area network,

362
00:16:11,039 --> 00:16:12,460
you could run arps spoof or whatever.

363
00:16:12,469 --> 00:16:12,760
And

364
00:16:12,880 --> 00:16:13,469
but, but

365
00:16:13,830 --> 00:16:17,090
again, if someone's on your network, they can do many other shenanigans. I'm

366
00:16:17,570 --> 00:16:18,570
generally speaking

367
00:16:18,840 --> 00:16:19,039
well.

368
00:16:19,210 --> 00:16:19,520
OK.

369
00:16:19,690 --> 00:16:22,739
And that's the thing this is, but this is the use case for SSL and TLS.

370
00:16:22,750 --> 00:16:24,979
-- This is the exact use case.
-- I know.

371
00:16:25,179 --> 00:16:26,489
I know, but here's my point

372
00:16:26,869 --> 00:16:31,289
browsers had real legitimate attacks and they had to solve these problems,

373
00:16:31,299 --> 00:16:35,940
things like open SSL and Python, there really aren't a lot of legitimate attacks.

374
00:16:35,950 --> 00:16:37,609
And even with this tar file thing,

375
00:16:37,750 --> 00:16:41,890
like the reality is if this was actually being attacked in a significant way,

376
00:16:41,900 --> 00:16:43,979
we would have found it and fixed it a long time ago.

377
00:16:44,025 --> 00:16:47,684
The fact that it sat dormant for this long tells me it's

378
00:16:48,075 --> 00:16:48,135
no

379
00:16:48,265 --> 00:16:48,414
one

380
00:16:48,594 --> 00:16:48,895
cares.

381
00:16:49,174 --> 00:16:52,075
But for example, there's still a tunnel log for Jay that's not been fixed.

382
00:16:53,434 --> 00:16:53,534
That's

383
00:16:53,844 --> 00:16:54,034
not

384
00:16:55,065 --> 00:16:55,684
like

385
00:16:55,984 --> 00:16:58,325
I, I still see front page uh

386
00:16:58,445 --> 00:16:59,515
scans

387
00:16:59,724 --> 00:17:01,215
and I mean, front pages.

388
00:17:01,755 --> 00:17:03,775
Uh Jeez, when did I use like

389
00:17:04,015 --> 00:17:04,714
that was,

390
00:17:04,723 --> 00:17:06,665
that was some old Microsoft technology from 20

391
00:17:06,675 --> 00:17:08,525
years ago and people are still scanning for it

392
00:17:09,358 --> 00:17:11,300
and walk for J now is like, well,

393
00:17:11,449 --> 00:17:15,719
-- it,
-- it'll, yeah, it'll be around forever. But I'm not, I'm not making up an excuse.

394
00:17:15,839 --> 00:17:17,630
I'm just pointing out the fact that

395
00:17:17,839 --> 00:17:22,469
browsers had real problems. Python necessarily didn't, which is why

396
00:17:22,650 --> 00:17:23,949
you don't see the kind of,

397
00:17:24,145 --> 00:17:26,155
of progress in fast fixing

398
00:17:26,344 --> 00:17:27,375
because it's just

399
00:17:27,564 --> 00:17:31,464
you're, you're not solving like immediate in your face problem.

400
00:17:31,474 --> 00:17:35,494
Well, I also wonder part of it is the widespread of it. Like to be blunt,

401
00:17:35,744 --> 00:17:37,135
if you use Firefox,

402
00:17:37,265 --> 00:17:39,295
you're using Firefox.

403
00:17:39,464 --> 00:17:40,974
If you use Python.

404
00:17:41,829 --> 00:17:43,920
Yes, we're using the same version of Python,

405
00:17:43,930 --> 00:17:46,189
but I'm not using it the same way that you use it.

406
00:17:46,199 --> 00:17:48,390
Like I'm writing terrible code to mangle up

407
00:17:48,729 --> 00:17:50,109
Json files and you're writing

408
00:17:50,260 --> 00:17:54,069
a thing to, you know, strip files out of youtube or something. Right.

409
00:17:54,280 --> 00:17:54,880
Right. And,

410
00:17:55,000 --> 00:17:57,300
and I think it's almost in a way worse because

411
00:17:58,489 --> 00:18:00,630
to put it bluntly, like, back in the old days, like,

412
00:18:00,640 --> 00:18:03,989
if you basically took a run at something you could almost always

413
00:18:04,000 --> 00:18:07,109
fiddle with certificates and connections and get in there that way.

414
00:18:07,939 --> 00:18:08,369
And

415
00:18:08,800 --> 00:18:11,189
because it was sort of a targeted attack against kind of

416
00:18:11,199 --> 00:18:13,949
one entity or one piece of software or maybe one library,

417
00:18:14,859 --> 00:18:18,349
you know. Yeah, like even if they fix it, it doesn't fix it for everybody.

418
00:18:18,359 --> 00:18:20,900
Whereas, yeah, like Firefox is, or you know,

419
00:18:20,910 --> 00:18:24,680
most like those are really common pieces of software used in the same way.

420
00:18:24,689 --> 00:18:27,119
So maybe that's part of it is that they're used in the same way.

421
00:18:27,589 --> 00:18:27,839
And

422
00:18:28,250 --> 00:18:29,530
yeah, I mean, this is the same,

423
00:18:29,540 --> 00:18:33,239
like why did Windows have all the malware because it was completely ubiquitous?

424
00:18:33,489 --> 00:18:35,599
-- Well,
-- it also had 80% of the market share.

425
00:18:36,430 --> 00:18:37,849
Right. Well, yeah. Right. Right.

426
00:18:38,550 --> 00:18:41,459
I'm gonna, you know, why do you rob banks? Because that's where they keep the money.

427
00:18:42,020 --> 00:18:42,430
Like

428
00:18:42,630 --> 00:18:44,660
it's, yeah, back to this. Like

429
00:18:44,770 --> 00:18:49,680
just what blows my mind is, I'm going to say this, if you make tools

430
00:18:49,930 --> 00:18:53,290
especially widely used popular tools and you

431
00:18:53,300 --> 00:18:55,729
claim to care about engineering quality,

432
00:18:55,739 --> 00:18:56,369
then

433
00:18:56,550 --> 00:19:02,010
-- ideally your tools have to have some degree of inherent safety.
-- I agree. I agree.

434
00:19:02,290 --> 00:19:07,560
-- This is like having a, a table saw with no guard on it, for example. Right.
-- Like,

435
00:19:07,709 --> 00:19:11,910
-- and no locking nut. Right.
-- And back in the day that was fine.

436
00:19:11,920 --> 00:19:16,189
-- But now that would be unthinkable.
-- Fingers are expensive. Uh,

437
00:19:16,439 --> 00:19:17,800
they still are.

438
00:19:18,369 --> 00:19:21,109
No, like, fingers are actually really expensive as it turns out,

439
00:19:21,390 --> 00:19:22,989
like sewing them back on is tricky.

440
00:19:23,459 --> 00:19:25,280
Just, I, I like having that.

441
00:19:25,650 --> 00:19:29,119
My ability to work would be slightly diminished.

442
00:19:29,130 --> 00:19:31,410
-- So
-- one time I was putting a screw and I wasn't wearing work gloves and

443
00:19:31,420 --> 00:19:33,880
I was putting a screw and the drill slipped and I like punched my thumb.

444
00:19:33,900 --> 00:19:36,560
Remember I showed you that picture of it. I do remember this.

445
00:19:36,760 --> 00:19:40,680
I punched my thumb with a number two Robertson's bit and like, basically,

446
00:19:40,689 --> 00:19:42,739
I pushed a bit of the nail and I kind of got stuck under.

447
00:19:42,750 --> 00:19:45,030
So I had to go to emerge and it's funny or not emerge.

448
00:19:45,040 --> 00:19:48,640
I went to urgent care and I of course, I have a Ziploc bag full of ice

449
00:19:48,883 --> 00:19:53,093
on my hand because it's, it's pretty hurty. And I'm like, you know, I hurt my thumb.

450
00:19:53,133 --> 00:19:56,503
I like bashed it with a drill bit basically or a

451
00:19:56,662 --> 00:19:59,343
Yeah, screw it basically. It really hurts. And I'm like, oh they're like,

452
00:19:59,603 --> 00:20:01,453
is your finger in the bag? I'm like, no.

453
00:20:01,463 --> 00:20:03,453
And they're like, oh, ok, because we're gonna send you away

454
00:20:03,672 --> 00:20:06,213
like I'm like, I'm like, no offense.

455
00:20:06,223 --> 00:20:07,753
Like I'm sure you people are confident,

456
00:20:07,762 --> 00:20:11,272
but like if I'm carrying a body part in a Ziploc bag, I am not going to urgent care.

457
00:20:11,282 --> 00:20:12,703
I'm going to the real. It's

458
00:20:12,822 --> 00:20:13,922
no, I bet that

459
00:20:14,046 --> 00:20:16,336
-- happened before though.
-- Maybe. But

460
00:20:16,515 --> 00:20:19,875
-- I feel like I might have also called an ambulance. I guarantee
-- that's happened

461
00:20:20,375 --> 00:20:25,206
actually. Now that I bet you, I'm pretty sure this story is on an old podcast episode.

462
00:20:25,215 --> 00:20:26,326
I'm not going to go look at it.

463
00:20:26,336 --> 00:20:29,985
But if someone sends it to me, I'll give you a shout out in the next episode.

464
00:20:30,036 --> 00:20:31,426
Wear your work gloves, folks,

465
00:20:31,515 --> 00:20:35,156
especially when you're drilling at strange angles in a confined space anyway.

466
00:20:35,196 --> 00:20:39,225
But so that's the thing, right? Like I'm holding my Swiss Army knife up here,

467
00:20:39,630 --> 00:20:41,420
the blades do not lock open.

468
00:20:41,439 --> 00:20:46,390
However, the use case for this knife is such that that is a reasonable thing to have.

469
00:20:46,400 --> 00:20:49,130
Whereas this knife I'm holding up the blade locks and

470
00:20:49,140 --> 00:20:50,739
it damn well better lock or you're going to slice

471
00:20:50,750 --> 00:20:54,780
a finger off because of the way this knife is meant to be used and what it's used for.

472
00:20:54,790 --> 00:20:57,645
Like it's not a Swiss army knife, it's like a big utility knife.

473
00:20:58,724 --> 00:21:03,755
And so occasionally, like, like it's OK to not have everything be super, super safe,

474
00:21:03,765 --> 00:21:07,795
but based on how the tool is expected and reasonably used,

475
00:21:07,805 --> 00:21:09,435
it should be reasonably safe.

476
00:21:09,635 --> 00:21:12,435
And I think unpacking a tar file

477
00:21:12,790 --> 00:21:17,260
and for example, not running, you know, Tar space, hyphen TV, space

478
00:21:17,589 --> 00:21:20,160
tar file name to like list what's in the file

479
00:21:20,260 --> 00:21:22,619
and list the path and then examining it and going,

480
00:21:22,630 --> 00:21:23,170
oh, there's a dot

481
00:21:23,300 --> 00:21:25,130
slash here. I should probably not have

482
00:21:25,349 --> 00:21:25,459
this,

483
00:21:26,410 --> 00:21:30,729
-- you shove that thing through Tar XVF and like give her
-- Yeah, I agree.

484
00:21:30,739 --> 00:21:33,729
I think that in the current environment we exist in

485
00:21:33,739 --> 00:21:38,199
-- and the way developers work
-- uh since like 2000 easily,

486
00:21:38,239 --> 00:21:40,390
I maybe, I

487
00:21:40,599 --> 00:21:43,189
-- think since 2012 or 13,
-- I

488
00:21:43,359 --> 00:21:43,520
feed

489
00:21:43,750 --> 00:21:46,010
a file into a file parser.

490
00:21:46,160 --> 00:21:47,750
It should be inherently safe.

491
00:21:47,760 --> 00:21:51,880
-- It should not result in code execution or random weird file over right.
-- Tar

492
00:21:52,010 --> 00:21:52,709
file isn't

493
00:21:52,829 --> 00:21:52,839
a,

494
00:21:53,140 --> 00:21:56,680
it's not a parser. It's, it's a library in a par

495
00:21:56,819 --> 00:21:56,829
a

496
00:21:57,020 --> 00:21:58,280
file and unpacks it

497
00:21:58,829 --> 00:21:59,630
-- whatever. I'm
-- not

498
00:21:59,640 --> 00:22:00,270
-- arguing
-- this with you.

499
00:22:00,689 --> 00:22:02,150
I know it's a fine line but

500
00:22:02,459 --> 00:22:06,089
let's ignore the past where we exist today.

501
00:22:06,300 --> 00:22:06,969
This

502
00:22:07,300 --> 00:22:09,739
lot, this, this module should not work this way.

503
00:22:09,750 --> 00:22:15,400
Now, I'm sure in the Python land there are, are no less than 25 tar

504
00:22:15,979 --> 00:22:19,439
handling modules you can install with pip.

505
00:22:19,739 --> 00:22:22,050
I don't think it is acceptable for a,

506
00:22:22,390 --> 00:22:25,689
a library in the core language

507
00:22:25,869 --> 00:22:30,500
to suffer from a problem like this. I think that we are not there in 2007.

508
00:22:31,079 --> 00:22:32,699
I think you could make that argument

509
00:22:33,040 --> 00:22:34,319
in 2022.

510
00:22:34,329 --> 00:22:38,500
You cannot make that argument any longer because developers writing things,

511
00:22:38,510 --> 00:22:40,319
you can look in the documentation for this

512
00:22:40,469 --> 00:22:43,239
and it has a section that's like, oh you be like don't unt

513
00:22:43,430 --> 00:22:44,780
untrusted stuff like it.

514
00:22:44,790 --> 00:22:48,619
You gotta check for your dot Dots and stuff that is no one is reading that

515
00:22:48,729 --> 00:22:52,150
documentation anymore. Like that's not how people develop these days.

516
00:22:52,479 --> 00:22:53,920
Well, I expect Tar Torn.

517
00:22:54,239 --> 00:22:56,109
Here's a simple, very simple argument.

518
00:22:56,119 --> 00:22:58,989
How much effort would it even today to be

519
00:22:59,000 --> 00:23:01,729
to fix Tar file properly in the Python language?

520
00:23:01,949 --> 00:23:03,489
The patch exists.

521
00:23:03,650 --> 00:23:06,630
What I'm saying is the effort of fixing

522
00:23:06,880 --> 00:23:11,979
the Python Tar file properly in the language is vastly smaller

523
00:23:12,459 --> 00:23:17,000
than patching 350,000 applications like that's bonkers like because each of them,

524
00:23:17,390 --> 00:23:20,239
let's just ballpark. Let's magically say it takes an hour.

525
00:23:20,270 --> 00:23:24,079
I guarantee you, it's gonna take less than 350,000 hours to patch

526
00:23:24,520 --> 00:23:26,650
all the major Python distributions.

527
00:23:26,810 --> 00:23:27,900
-- Like.
-- Right.

528
00:23:28,920 --> 00:23:31,939
-- That's a good way to look at it.
-- That's how I look at these things now, right?

529
00:23:31,949 --> 00:23:35,109
Like that, that my tweet about the GDPR cookie warnings and stuff like,

530
00:23:35,579 --> 00:23:38,589
like I'm sorry, but patching 350,000 programs

531
00:23:38,949 --> 00:23:41,849
and it's not going to be an hour. It's gonna be like 5 to 10 hours, maybe more.

532
00:23:42,310 --> 00:23:46,060
That is, wait, we're, we might actually kill somebody,

533
00:23:46,319 --> 00:23:47,819
ok? At one hour.

534
00:23:48,000 --> 00:23:54,550
That's 39.95 people years. So for every hour it takes to fix all of those programs,

535
00:23:54,709 --> 00:23:56,540
you're killing a 40 year old person.

536
00:23:56,689 --> 00:23:58,089
I'm a 40 year old person

537
00:23:58,630 --> 00:24:00,229
now. I'm scared, I'm scared. It's

538
00:24:00,750 --> 00:24:04,689
-- so
-- like that's, that's insane. That is a huge amount of time.

539
00:24:04,790 --> 00:24:05,410
Like I said,

540
00:24:05,420 --> 00:24:09,900
ignoring the security aspect of this from like just a pure economic efficiency.

541
00:24:10,069 --> 00:24:13,140
What is the rational economic actor type thing to do?

542
00:24:13,160 --> 00:24:16,910
Fix it once here well, and multiple places because obviously, you know,

543
00:24:16,920 --> 00:24:20,750
like multiple Python distributions in operating systems.

544
00:24:20,979 --> 00:24:23,530
But fundamentally, you fix maybe 100 of those

545
00:24:24,000 --> 00:24:30,420
-- and you get like 80 90% of it versus trying to fix 350,000 applications.
-- I agree.

546
00:24:30,430 --> 00:24:32,479
I agree. I think that is,

547
00:24:32,670 --> 00:24:37,780
I mean, look, this is why if you look at Linux distributions like Red Hat,

548
00:24:37,979 --> 00:24:40,880
they're very particular about making sure everything's

549
00:24:40,890 --> 00:24:42,780
a library because there was a time

550
00:24:43,069 --> 00:24:43,729
when Z li

551
00:24:44,449 --> 00:24:49,079
was not a library included like a as a shared library.

552
00:24:49,089 --> 00:24:52,920
It was just in all of the packages and there was some security vulnerability and

553
00:24:52,930 --> 00:24:57,150
it took them like literally hundreds and hundreds of hours to find all of the Z

554
00:24:57,319 --> 00:24:57,800
Libs

555
00:24:57,949 --> 00:25:01,619
-- patch, all of the Z Libs and rebuild those packages.
-- And then the best part is

556
00:25:02,790 --> 00:25:04,369
there's probably going to be another security flaw.

557
00:25:05,040 --> 00:25:06,260
See, and that's the thing people forget.

558
00:25:06,270 --> 00:25:09,349
Like it's not, it's like it's like log for J oh, we fixed log for J.

559
00:25:09,359 --> 00:25:12,719
Well, yeah, except then there were those other CV S and log for J after the fact.

560
00:25:12,800 --> 00:25:14,250
But let's ignore those.

561
00:25:14,660 --> 00:25:17,780
Are you willing to bet a significant sum of money like a mortgage payment or

562
00:25:17,790 --> 00:25:20,260
a car payment or whatever on the fact

563
00:25:20,270 --> 00:25:22,550
that there will be no more vulnerabilities entire

564
00:25:22,920 --> 00:25:26,810
in Python or no more vulnerabilities than log for J? Right. And no, of course not.

565
00:25:26,819 --> 00:25:29,130
Here's the bet I am willing to make though.

566
00:25:29,390 --> 00:25:33,699
I think this is esoteric enough and probably not

567
00:25:33,709 --> 00:25:37,530
used widely enough that we're going to see a

568
00:25:37,939 --> 00:25:40,790
like legitimate attack leveraging this.

569
00:25:40,810 --> 00:25:43,010
And that's part of the challenge here and

570
00:25:43,020 --> 00:25:45,569
in a way that's almost worse because it's just

571
00:25:45,750 --> 00:25:48,329
now if somebody needs to pest something or is

572
00:25:48,339 --> 00:25:50,400
a bad person who wants to break into stuff,

573
00:25:50,760 --> 00:25:54,040
there's one more thing you have where like, you know, it's like that.

574
00:25:54,050 --> 00:25:56,680
Uh oh, there's like this, I forget where it was there. It was this great

575
00:25:56,920 --> 00:25:58,520
gist or whatever thing on github.

576
00:25:58,849 --> 00:26:01,209
It was like a list of headers that you could fire off at all.

577
00:26:01,260 --> 00:26:05,199
Web server and see kind of what bounces back and see where it's like puking on stuff

578
00:26:05,329 --> 00:26:08,050
and it wouldn't actually exploit anything. But it was like, oh,

579
00:26:08,209 --> 00:26:10,819
it's not handling this use case correctly. And that's the thing.

580
00:26:10,839 --> 00:26:15,119
Like I, I used to have a tar file that was like all sorts of mangled or like the zip bomb,

581
00:26:15,410 --> 00:26:16,099
right? That the

582
00:26:16,459 --> 00:26:19,060
zip bomb. I had a copy of that zip bomb like all my

583
00:26:19,209 --> 00:26:22,959
thing and I would point stuff at it like I still do this and, and this is horrible.

584
00:26:23,050 --> 00:26:24,400
I will uh DD

585
00:26:24,819 --> 00:26:26,060
uh debut random

586
00:26:26,160 --> 00:26:28,599
into a file and then feed it into something.

587
00:26:28,619 --> 00:26:31,430
So a great example, one password, one password is like, hey,

588
00:26:31,439 --> 00:26:33,359
we can import your passwords from a file.

589
00:26:33,369 --> 00:26:35,880
I'm like, oh, can you, let's see what happens and

590
00:26:36,099 --> 00:26:36,859
because it,

591
00:26:37,130 --> 00:26:39,550
like, basically because it parses it browser side and then

592
00:26:40,280 --> 00:26:42,930
bundles it up and like, encrypts it and sends it to the server.

593
00:26:43,189 --> 00:26:45,380
Um, yeah, we had to delete my account

594
00:26:46,510 --> 00:26:48,219
because like, I totally

595
00:26:49,260 --> 00:26:51,400
hosed it and I get it in that case.

596
00:26:51,410 --> 00:26:54,170
Like, it's a, it's a client side issue, blah, blah, blah. But

597
00:26:54,319 --> 00:26:55,329
like I do this all the time.

598
00:26:55,339 --> 00:26:57,729
Like, that's how I used to detect when, oh, remember back in the day,

599
00:26:57,739 --> 00:26:58,780
all those places using

600
00:26:58,920 --> 00:26:59,010
nus

601
00:26:59,140 --> 00:27:00,920
to scan your security

602
00:27:01,349 --> 00:27:04,170
and there was a really easy tell which is you set your DNS

603
00:27:04,430 --> 00:27:07,170
in chaos uh version

604
00:27:07,469 --> 00:27:10,530
to binary data, like random binary data.

605
00:27:10,810 --> 00:27:11,410
And they would,

606
00:27:11,540 --> 00:27:12,239
and if it was N A,

607
00:27:12,250 --> 00:27:16,010
it would puke in a certain way that would propagate up through their PDF reports.

608
00:27:16,020 --> 00:27:16,369
And

609
00:27:16,500 --> 00:27:18,770
I would be like, oh, you're using N A? Cool,

610
00:27:19,099 --> 00:27:22,099
you know, and that's the thing like this is, it shouldn't be this easy.

611
00:27:22,219 --> 00:27:26,969
Well, I, I, and I think generally speaking, we're getting a lot of this right? And

612
00:27:27,439 --> 00:27:28,260
except for Tar

613
00:27:28,540 --> 00:27:28,859
file.

614
00:27:29,209 --> 00:27:34,699
Well, I, I look, I'm excited to see what Python does about this. If they ignore it,

615
00:27:34,939 --> 00:27:38,380
I guarantee you 100% nothing because they'll use your argument of, well,

616
00:27:38,390 --> 00:27:39,689
it's been 15 years.

617
00:27:40,280 --> 00:27:41,689
No, that doesn't make it right.

618
00:27:42,079 --> 00:27:42,400
But

619
00:27:42,510 --> 00:27:43,609
that's not what I'm no.

620
00:27:43,619 --> 00:27:47,290
If that's what anyone who has taken away from this conversation, please,

621
00:27:47,300 --> 00:27:48,339
please please.

622
00:27:48,349 --> 00:27:50,550
That is not the intent. What's the statue

623
00:27:50,660 --> 00:27:50,680
of,

624
00:27:51,359 --> 00:27:54,219
is there a statute of limitations on security vulnerabilities?

625
00:27:54,479 --> 00:27:55,369
Of course not.

626
00:27:55,729 --> 00:27:57,250
I'm look, no,

627
00:27:57,459 --> 00:28:00,150
I'm, I'm just pointing out in 2007.

628
00:28:00,400 --> 00:28:05,550
I think this argument was not completely bananas in 2022.

629
00:28:05,560 --> 00:28:07,709
This argument is completely bananas.

630
00:28:08,030 --> 00:28:12,510
There probably also wasn't 350,000 applications vulnerable in 2007.

631
00:28:13,449 --> 00:28:17,209
And, and my suspicion also is there aren't really 350,000.

632
00:28:17,219 --> 00:28:18,310
My guess is they search github.

633
00:28:18,510 --> 00:28:20,479
They found 350,000 uses of this

634
00:28:20,760 --> 00:28:21,270
and

635
00:28:21,530 --> 00:28:25,839
90% of them is crap. Like what you and I build and throw in github

636
00:28:26,069 --> 00:28:28,910
that like we use twice and never use again.

637
00:28:28,920 --> 00:28:31,109
But my guess is it's probably hundreds to

638
00:28:31,119 --> 00:28:34,349
thousands of legitimate things are affected by this.

639
00:28:34,359 --> 00:28:35,510
So that's not a lot,

640
00:28:35,520 --> 00:28:37,949
but it's still not something we should have to go

641
00:28:37,959 --> 00:28:41,329
and fix in those say hundreds or thousands of projects

642
00:28:41,733 --> 00:28:47,703
to the point. So you're saying that I am using a tar library to unpack a tar file.

643
00:28:47,713 --> 00:28:51,473
And now I'm responsible for learning enough about Tar to do it

644
00:28:52,312 --> 00:28:52,343
that

645
00:28:52,802 --> 00:28:53,863
you're not going to do that.

646
00:28:54,003 --> 00:28:56,422
In 2007, you might have done that

647
00:28:56,703 --> 00:29:01,603
in 2022. That is not how people develop software you expect to take a library,

648
00:29:01,723 --> 00:29:02,672
use a library,

649
00:29:03,086 --> 00:29:05,365
do whatever thing you need it to do

650
00:29:05,635 --> 00:29:09,135
and all you're going to do is copy and paste how to use it off stack overflow,

651
00:29:09,145 --> 00:29:11,416
you aren't going to read a single line of documentation

652
00:29:11,426 --> 00:29:14,336
-- and
-- especially when it's like a popular file format like JPEG

653
00:29:14,475 --> 00:29:17,245
tar, these are common, common

654
00:29:17,375 --> 00:29:20,095
file formats that have been around for literally decades.

655
00:29:20,345 --> 00:29:20,836
But

656
00:29:21,196 --> 00:29:23,615
yeah, I'm sorry. But if I like if

657
00:29:24,306 --> 00:29:26,855
see it's, and, and again, a really good argument here is,

658
00:29:26,865 --> 00:29:29,816
it's not like I'm choosing to use this library.

659
00:29:29,956 --> 00:29:30,296
It's

660
00:29:30,719 --> 00:29:33,420
I chose Python, this is what I'm stuck with by default.

661
00:29:34,880 --> 00:29:37,530
And I would say like if it was a third party library,

662
00:29:37,660 --> 00:29:37,670
uh

663
00:29:37,780 --> 00:29:40,329
OK, maybe sort of kind of,

664
00:29:40,530 --> 00:29:46,030
but I think once it gets into the core of a language and becomes like a default,

665
00:29:46,609 --> 00:29:49,189
especially something like like this, like there's J

666
00:29:49,390 --> 00:29:50,540
pig, there's tar, there's,

667
00:29:50,989 --> 00:29:53,339
-- there's, we should,
-- I don't, I don't know if we've clarified this.

668
00:29:53,489 --> 00:29:56,380
If you have Python, you have Tar

669
00:29:56,500 --> 00:29:59,770
file like it is in the Python standard library,

670
00:29:59,880 --> 00:30:03,170
-- you have this vulnerable version of Tar file. You
-- know. That's true.

671
00:30:03,180 --> 00:30:04,859
Everyone has it. Literally everyone.

672
00:30:04,869 --> 00:30:07,229
If you have Python, you have a vulnerable version

673
00:30:07,589 --> 00:30:10,180
at the time of this recording. Hopefully that's not true

674
00:30:10,579 --> 00:30:10,869
when this

675
00:30:11,040 --> 00:30:11,130
episode

676
00:30:11,479 --> 00:30:11,550
comes up.

677
00:30:11,709 --> 00:30:12,890
-- No, it'll still be broken.
-- I

678
00:30:13,680 --> 00:30:13,989
-- think
-- it'll

679
00:30:14,000 --> 00:30:14,489
-- still
-- be

680
00:30:14,680 --> 00:30:15,959
-- broken
-- anyway

681
00:30:16,250 --> 00:30:20,300
-- anyway.
-- But again, like this is, I think again, it boils down to

682
00:30:20,510 --> 00:30:22,619
if I'm going to use a tool in a reasonable

683
00:30:22,630 --> 00:30:24,500
expected way that I'm supposed to use that tool,

684
00:30:24,510 --> 00:30:28,719
which you know, un tarring a tar file is that's how you generally use tar libraries.

685
00:30:29,170 --> 00:30:31,140
We know it just should work. And

686
00:30:31,390 --> 00:30:32,079
again,

687
00:30:32,849 --> 00:30:36,739
also, back to that rational economic argument, again, also back to the security of

688
00:30:36,844 --> 00:30:36,925
V

689
00:30:37,145 --> 00:30:37,275
AR

690
00:30:37,594 --> 00:30:38,344
but again,

691
00:30:38,854 --> 00:30:42,925
isn't the whole point of it to automate stuff and to take the knowledge

692
00:30:43,135 --> 00:30:43,165
and

693
00:30:44,714 --> 00:30:46,305
I'm kicking you off your soapbox right now.

694
00:30:46,314 --> 00:30:49,744
This is the way it was done in 2007 and then we forgot,

695
00:30:49,755 --> 00:30:53,145
someone found it again if Python doesn't fix this shame on them.

696
00:30:53,314 --> 00:30:59,234
But the reality is the world changed. What used to be ok? Isn't ok. Now, what's ok?

697
00:30:59,244 --> 00:31:03,224
Now isn't going to be ok in five years and 10 years in 20 years.

698
00:31:03,680 --> 00:31:09,199
So, the reality is like, that's just the way it was whatever, fix it. Move on.

699
00:31:09,209 --> 00:31:09,939
You know what?

700
00:31:10,189 --> 00:31:13,150
Let's make a gentleman's bet in five years. Are we going to be talking about?

701
00:31:13,160 --> 00:31:16,619
What was that, um, the library that you just mentioned today

702
00:31:16,859 --> 00:31:17,829
on Slack?

703
00:31:18,339 --> 00:31:19,130
Remember the one that in

704
00:31:19,290 --> 00:31:19,540
Github

705
00:31:19,839 --> 00:31:22,119
was like, we're getting too many security reports. We don't want to support this.

706
00:31:22,130 --> 00:31:23,319
-- We give up.
-- Oh, that's

707
00:31:23,439 --> 00:31:23,540
cerf

708
00:31:23,709 --> 00:31:24,979
-- for M PM.
-- Yeah.

709
00:31:25,280 --> 00:31:25,939
So

710
00:31:26,130 --> 00:31:28,229
let's make a gentleman's bet in five years.

711
00:31:28,239 --> 00:31:30,689
Or set a timer on my phone or something in five years.

712
00:31:32,020 --> 00:31:34,030
You think people are still using sea surf?

713
00:31:34,170 --> 00:31:35,640
Absolutely. 100%.

714
00:31:35,650 --> 00:31:38,770
If you're willing to let me take the 100% people using the five year stand,

715
00:31:38,930 --> 00:31:42,410
I will totally take this bet and I will bet you anything you want and I will.

716
00:31:42,670 --> 00:31:43,140
-- That's
-- the

717
00:31:43,150 --> 00:31:43,459
-- end
-- I

718
00:31:43,469 --> 00:31:44,040
want.

719
00:31:44,310 --> 00:31:46,170
So, we both want the same thing

720
00:31:46,689 --> 00:31:48,099
because we both know

721
00:31:48,339 --> 00:31:49,239
-- that we're
-- right.

722
00:31:49,449 --> 00:31:50,709
But that's the thing. Right? Like,

723
00:31:51,175 --> 00:31:51,535
yeah,

724
00:31:51,675 --> 00:31:52,314
here we are.

725
00:31:52,324 --> 00:31:54,224
-- It is
-- what it is and, and look,

726
00:31:54,234 --> 00:31:57,285
here's how I want to end this and this is like the whole point of it.

727
00:31:57,295 --> 00:31:58,685
All things change

728
00:31:58,964 --> 00:32:02,464
-- and that's
-- ok. Expectations as well. Like what is

729
00:32:02,885 --> 00:32:03,155
sort

730
00:32:03,305 --> 00:32:03,415
of

731
00:32:03,974 --> 00:32:04,765
ethical

732
00:32:05,005 --> 00:32:06,464
even legal? Like

733
00:32:06,714 --> 00:32:07,775
we do criminalize partner.

734
00:32:07,895 --> 00:32:09,505
Huh? Canada? And it turned out ok,

735
00:32:10,020 --> 00:32:11,569
and, and look, it, it is, it

736
00:32:11,699 --> 00:32:13,920
is always shameful to me when

737
00:32:14,130 --> 00:32:19,069
someone sticks by a decision they made 20 years ago, just, just to do it.

738
00:32:19,130 --> 00:32:24,109
I also find it shameful when people criticize someone for changing their mind.

739
00:32:24,500 --> 00:32:27,119
And I think both of those are equally dangerous.

740
00:32:27,130 --> 00:32:29,000
I think this is one of those instances, like

741
00:32:29,449 --> 00:32:33,630
I don't agree with what happened in 2007, but I get it times have changed,

742
00:32:33,640 --> 00:32:36,680
fix the library and let's go back to doing whatever it

743
00:32:36,689 --> 00:32:38,949
is we should be doing instead of talking about this,

744
00:32:39,150 --> 00:32:39,640
I think.

745
00:32:39,650 --> 00:32:43,339
Well, and that's one thing like is especially once you have new evidence or,

746
00:32:43,349 --> 00:32:45,680
you know, just enough time has gone by that clearly,

747
00:32:45,689 --> 00:32:47,069
the world has changed significantly.

748
00:32:47,079 --> 00:32:49,760
Yeah, it's time to change your mind and yeah. Come

749
00:32:49,890 --> 00:32:50,329
on something new.

750
00:32:50,819 --> 00:32:52,109
I am really curious.

751
00:32:52,119 --> 00:32:54,109
What do you think would happen if somebody tried to

752
00:32:54,119 --> 00:32:56,760
reopen this bug in Red Hat or on Python we

753
00:32:56,880 --> 00:32:57,969
find out.

754
00:32:58,219 --> 00:33:01,599
Well, no, no, but I'm looking at the, I'm looking at the, uh, the red hat

755
00:33:01,839 --> 00:33:03,530
and nobody's tried to reopen it there.

756
00:33:03,729 --> 00:33:07,310
I'm looking at the, uh, the Python one. Well, that got moved to Github,

757
00:33:07,420 --> 00:33:08,420
so I'll have to hunt that down. But,

758
00:33:08,689 --> 00:33:10,770
but, I mean, based on the fact like

759
00:33:10,880 --> 00:33:13,880
that Python hasn't made a statement that, yeah, we're going to fix this.

760
00:33:14,250 --> 00:33:16,390
Well, we haven't gone looking for a statement either.

761
00:33:16,400 --> 00:33:19,689
We've, we've only been looking at old things in 2007.

762
00:33:19,810 --> 00:33:22,670
Like we haven't looked at new stuff and we conclude that we're not,

763
00:33:22,680 --> 00:33:23,920
we're already out of time.

764
00:33:23,930 --> 00:33:26,189
So I'm not, we're not going to dig into it at this moment.

765
00:33:26,199 --> 00:33:28,719
-- I took a quick look earlier and didn't find anything
-- though.

766
00:33:28,729 --> 00:33:30,829
Now, I will say that I'll end on this.

767
00:33:30,979 --> 00:33:35,530
The way this should be handled is we should give this a 2022 CBE ID

768
00:33:35,780 --> 00:33:38,930
and declare it a security issue and just fix it everywhere.

769
00:33:39,180 --> 00:33:43,089
I don't know if that's going to happen. It wouldn't surprise me if CV E like insists.

770
00:33:43,099 --> 00:33:46,439
-- No, because it already has one or something. But, well,
-- or they'll just argue.

771
00:33:46,449 --> 00:33:46,949
It's not

772
00:33:47,089 --> 00:33:48,479
a, it's not a gloom or

773
00:33:48,670 --> 00:33:50,689
-- whatever.
-- All right, I'm, I'm ending this.

774
00:33:51,180 --> 00:33:53,729
Thank you, Kurt. Thank you everyone for listening. Go to open

775
00:33:54,310 --> 00:33:54,650
to open

776
00:33:54,790 --> 00:33:56,689
source Security podcast.com. Hit up the show notes.

777
00:33:56,699 --> 00:34:00,439
I'll put links to all the fun stuff. I've, I've got a lot of them today right now.

778
00:34:00,689 --> 00:34:01,079
But

779
00:34:01,260 --> 00:34:04,359
-- yeah, uh, Kurt have a marvelous rest of your day,
-- man.

780
00:34:04,369 --> 00:34:08,040
One quick note, the tar file in C Python is actually

781
00:34:08,219 --> 00:34:11,438
actively being modified, like as late as June

782
00:34:11,550 --> 00:34:12,820
this year. Like they

783
00:34:13,000 --> 00:34:15,438
did, they fix this. No, no, no, but they're like adding

784
00:34:15,629 --> 00:34:18,688
stuff to it and removing stuff and adding capabilities.

785
00:34:18,889 --> 00:34:19,370
So

786
00:34:19,770 --> 00:34:22,090
in a way that's almost worse because this thing is actually like,

787
00:34:22,100 --> 00:34:24,199
it's not done and we just left it.

788
00:34:24,208 --> 00:34:27,330
-- Of course,
-- it's never done. That's good. We want people touching it.

789
00:34:27,340 --> 00:34:31,810
-- But
-- I mean, this thing is under active development with good commits,

790
00:34:32,290 --> 00:34:34,679
then actively develop this patch.

791
00:34:36,830 --> 00:34:40,010
All right, I'm ending it. Thank you, everybody. Thanks everybody.

792
00:34:40,110 --> 00:34:41,600
Thanks everyone. Bye bye.

793
00:34:46,110 --> 00:34:46,250
That.