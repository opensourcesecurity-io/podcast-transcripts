0
00:00:05,449 --> 00:00:08,439
Hello and welcome to the open source security podcast with myself,

1
00:00:08,449 --> 00:00:10,590
Kurt Siefried and my partner in bedding crime.

2
00:00:10,600 --> 00:00:11,340
Josh Bresser.

3
00:00:11,579 --> 00:00:13,590
-- I don't even
-- want to. It's Groundhog Day

4
00:00:13,840 --> 00:00:14,930
-- as we
-- record this for

5
00:00:15,210 --> 00:00:15,640
-- us.
-- I

6
00:00:15,789 --> 00:00:16,989
mean, and here's the best thing.

7
00:00:17,260 --> 00:00:20,659
It turns out the groundhogs are wrong more than half the time.

8
00:00:20,670 --> 00:00:21,010
No,

9
00:00:21,020 --> 00:00:23,600
humans are wrong more than half the time because

10
00:00:23,610 --> 00:00:25,520
this is all just made up human nonsense.

11
00:00:25,530 --> 00:00:28,120
But what the point is, they're betting on a simple binary.

12
00:00:28,129 --> 00:00:31,510
-- Spring is coming or spring is not coming. They're not,
-- they're not at all.

13
00:00:31,739 --> 00:00:36,439
The groundhog doesn't get to like come out or hide. They predetermine all of this.

14
00:00:36,450 --> 00:00:39,299
They talk to the Groundhog in made up Groundhog language and then the

15
00:00:39,310 --> 00:00:42,479
groundhog tells them what it decides which of course is all ridiculous.

16
00:00:42,490 --> 00:00:42,650
No,

17
00:00:42,659 --> 00:00:44,470
but my point is you're betting on a yes or no

18
00:00:44,479 --> 00:00:46,099
item and if you're wrong more than half the time,

19
00:00:46,369 --> 00:00:47,759
then the best solution is to just

20
00:00:47,770 --> 00:00:50,650
bet against it because they're consistently wrong,

21
00:00:50,680 --> 00:00:54,689
-- I guess whatever Groundhog,
-- it's like fund managers versus monkeys,

22
00:00:54,700 --> 00:00:55,889
throwing darts at the paper.

23
00:00:56,119 --> 00:00:57,430
The only redeeming

24
00:00:57,619 --> 00:00:59,229
aspect of Groundhog Day

25
00:00:59,360 --> 00:01:00,020
is the movie, the

26
00:01:00,310 --> 00:01:00,470
movie

27
00:01:00,950 --> 00:01:00,970
the

28
00:01:01,090 --> 00:01:01,119
same,

29
00:01:02,520 --> 00:01:03,130
like

30
00:01:03,290 --> 00:01:05,669
everything else is ridiculous.

31
00:01:05,800 --> 00:01:07,309
That was one of his best works.

32
00:01:07,422 --> 00:01:09,843
I would agree completely. Now, I will say this.

33
00:01:09,852 --> 00:01:13,703
So I think the concept of Groundhog Day as a,

34
00:01:13,833 --> 00:01:17,002
we'll say way to divine the future is clearly nonsense.

35
00:01:17,013 --> 00:01:20,803
And I think the people who have created this spectacle around it, whatever.

36
00:01:20,813 --> 00:01:23,922
I love the aspect of just like humans coming together in the middle

37
00:01:23,932 --> 00:01:27,093
of winter to have some fun because we need more of that.

38
00:01:27,102 --> 00:01:28,362
Well, and there's some truth in it. You,

39
00:01:28,475 --> 00:01:30,505
when the birds fly south for the winter,

40
00:01:30,515 --> 00:01:33,036
there are animals that can sense the weather coming.

41
00:01:33,045 --> 00:01:35,405
You know, the horse has always got real nervous before a storm

42
00:01:35,615 --> 00:01:39,615
except we don't use those animals. They have a marmot and they talk to it.

43
00:01:39,625 --> 00:01:43,216
Well, and also the horses are predicting something like an hour or two out

44
00:01:43,905 --> 00:01:46,765
and you can just sort of look at the sky and be like, yep, thunder clouds.

45
00:01:46,776 --> 00:01:49,416
This is, I, you know what I just realized

46
00:01:49,870 --> 00:01:53,889
the way we ascertain the potential future from a

47
00:01:53,900 --> 00:01:57,199
groundhog is not unlike most of the security industry.

48
00:01:57,209 --> 00:01:58,440
Well, except it's more accurate.

49
00:01:58,449 --> 00:02:00,720
-- Let's
-- take these chicken bones and throw them on the

50
00:02:00,730 --> 00:02:03,379
-- ground and then decide what to do
-- pretty much.

51
00:02:03,489 --> 00:02:05,760
Yeah, I, there was that Twitter thread about, you know, what's,

52
00:02:05,769 --> 00:02:08,460
what's your biggest unanswered question in it?

53
00:02:08,470 --> 00:02:09,399
Security? And

54
00:02:09,639 --> 00:02:12,490
there's a bunch of technical ones that, you know, somebody had an answer for,

55
00:02:12,550 --> 00:02:13,779
but there's a couple of us that were like,

56
00:02:13,789 --> 00:02:16,910
we just want data on what works and what doesn't work and of course nobody has that.

57
00:02:17,100 --> 00:02:17,580
Right.

58
00:02:17,710 --> 00:02:19,889
It's, it's hard, it's a hard problem.

59
00:02:19,899 --> 00:02:23,220
I mean, I'm not, I'm not going to knock people for not having it.

60
00:02:23,229 --> 00:02:25,539
I'm going to knock people for pretending they do

61
00:02:25,669 --> 00:02:28,020
well or pretending it doesn't really matter or that I can

62
00:02:28,029 --> 00:02:31,550
make decisions based on my lack of knowledge and that's fine.

63
00:02:31,559 --> 00:02:35,490
You can make decisions based on lack of knowledge. They're just not good decisions

64
00:02:36,130 --> 00:02:38,119
and, but more even better,

65
00:02:38,130 --> 00:02:41,270
they're not willing to change those decisions when data does come up.

66
00:02:41,279 --> 00:02:42,050
I know.

67
00:02:42,080 --> 00:02:43,940
So, I mean, well, this is, I mean,

68
00:02:43,949 --> 00:02:46,119
what we're going to talk about today with Pseudo and Lib G

69
00:02:46,240 --> 00:02:49,050
-- Crypt.
-- That's right. 2021 keeps delivering.

70
00:02:49,160 --> 00:02:51,139
-- I mean,
-- I'm sorry, but it's,

71
00:02:51,809 --> 00:02:55,509
how many decades has it been that we've proven developers can't write?

72
00:02:55,520 --> 00:02:59,369
And I'm not going to say secure code because that's that we're not even close to that,

73
00:02:59,509 --> 00:03:04,339
but code that can manage its memory properly or do something as simple as ch

74
00:03:04,449 --> 00:03:05,990
own a file safely.

75
00:03:07,199 --> 00:03:08,100
No, I'm serious.

76
00:03:08,460 --> 00:03:09,169
I know.

77
00:03:09,279 --> 00:03:11,970
So here's what all of this comes down to. I think.

78
00:03:11,979 --> 00:03:15,800
Number one, these are two things written in C

79
00:03:15,979 --> 00:03:18,800
and C is impossible for humans to get right.

80
00:03:18,899 --> 00:03:22,729
But then number two, all of the things you just said sound easy

81
00:03:23,039 --> 00:03:25,589
and it's like that Dunning Kruger thing where

82
00:03:25,690 --> 00:03:29,929
you think it's an easy problem but it's actually a really hard problem.

83
00:03:30,050 --> 00:03:33,522
And not only is it a really hard problem because it's secure related,

84
00:03:33,531 --> 00:03:35,442
it doesn't come up until somebody attacks it.

85
00:03:35,451 --> 00:03:36,701
Right. Memory management

86
00:03:36,962 --> 00:03:37,992
problems.

87
00:03:38,001 --> 00:03:39,352
Generally,

88
00:03:39,361 --> 00:03:41,061
sometimes they come up and you get a program that

89
00:03:41,072 --> 00:03:43,531
just has weird crashes as a part of life and

90
00:03:43,542 --> 00:03:46,082
then somebody investigates it and finds out there's a buffer

91
00:03:46,091 --> 00:03:48,472
overflow that just once in a while gets triggered randomly.

92
00:03:48,481 --> 00:03:48,751
But

93
00:03:48,871 --> 00:03:51,751
the majority of security flaws don't get triggered until

94
00:03:51,761 --> 00:03:55,231
an attacker very consciously attacks and triggers it.

95
00:03:55,391 --> 00:03:58,792
I mean, I agree with that. Well, you know, the infamous examples,

96
00:03:58,893 --> 00:04:01,833
things like that one Microsoft engineer that wanted to, you know,

97
00:04:01,843 --> 00:04:05,634
track down like some random handful of random crashes in an internet

98
00:04:05,643 --> 00:04:08,694
explorer thing that were reported automatically to Microsoft and found out,

99
00:04:08,703 --> 00:04:10,354
you know, there's a zero day in the wild.

100
00:04:10,363 --> 00:04:11,393
I love that story.

101
00:04:11,404 --> 00:04:16,483
I just at this point again, people pretend like, oh, well, we plugged this one hole.

102
00:04:16,493 --> 00:04:18,113
We're back to being ok.

103
00:04:18,303 --> 00:04:22,674
Well, we are ok for the moment until someone finds another problem. Ok.

104
00:04:22,683 --> 00:04:24,753
So why don't we explain what

105
00:04:24,855 --> 00:04:29,186
heck is going on because this is actually some really complicated stuff.

106
00:04:29,415 --> 00:04:30,915
Which one? Because they're both,

107
00:04:31,226 --> 00:04:34,865
there's OK. So there's three problems that we're going to talk about.

108
00:04:34,876 --> 00:04:37,175
Two are in pseudo, one is in Lib

109
00:04:37,626 --> 00:04:41,855
GPT. Let's start with pseudo I guess because PSEUDO is a set

110
00:04:42,075 --> 00:04:44,735
UID application on a UNIX system.

111
00:04:44,746 --> 00:04:50,716
So the idea is this is a way for a normal user to do something as root.

112
00:04:51,089 --> 00:04:52,309
Well, no, no.

113
00:04:53,519 --> 00:04:54,750
If you corner case me,

114
00:04:54,760 --> 00:04:57,609
I'm seriously going to drive to Canada and beat you with a stick.

115
00:04:57,619 --> 00:04:59,910
No, no, it's just you can specify a user other than root.

116
00:04:59,920 --> 00:05:02,630
You can give somebody print privileges or

117
00:05:02,959 --> 00:05:03,589
that's true.

118
00:05:03,600 --> 00:05:04,510
You can do as,

119
00:05:04,519 --> 00:05:08,309
-- as let's just pretend root because that's what we care about
-- elevated privileges.

120
00:05:08,320 --> 00:05:08,989
Sure.

121
00:05:09,079 --> 00:05:12,964
And so the beauty there is, for example, I can give a user access to reboot system.

122
00:05:13,204 --> 00:05:13,704
Yes,

123
00:05:13,714 --> 00:05:16,015
I can give them access to change the network config or

124
00:05:16,024 --> 00:05:18,605
I can give them access to interact with the mail system.

125
00:05:18,614 --> 00:05:18,804
OK.

126
00:05:18,815 --> 00:05:19,165
Look,

127
00:05:19,174 --> 00:05:22,125
let's just say the only real reason this is ever used on a shared

128
00:05:22,135 --> 00:05:25,605
system is so the support people can change the passwords of the other people.

129
00:05:25,614 --> 00:05:28,785
-- That's usually what it is. Right. Yeah.
-- And again, that sounds like a simple thing.

130
00:05:28,795 --> 00:05:31,804
-- Oh, just, you know, let Bob run reboot us root.
-- No,

131
00:05:31,815 --> 00:05:32,154
that's,

132
00:05:32,255 --> 00:05:33,915
it's horrendously.

133
00:05:34,190 --> 00:05:36,489
-- I don't even know how many lines of code pseudo is
-- anymore.

134
00:05:36,720 --> 00:05:40,600
It's probably a lot I should have done this before we hit record. But it's a lot.

135
00:05:40,609 --> 00:05:41,450
We'll just say that

136
00:05:41,600 --> 00:05:45,010
anyway, probably tens of thousands to hundreds of thousands. For sure.

137
00:05:45,019 --> 00:05:47,010
-- Well,
-- and it relies on external libraries.

138
00:05:47,119 --> 00:05:49,700
-- I
-- don't know how many actually. Anyway, that's a good question too.

139
00:05:49,709 --> 00:05:52,049
It's, I feel I thought I was prepared.

140
00:05:52,059 --> 00:05:54,290
The thing I like about the pseudo attack is

141
00:05:54,299 --> 00:05:56,820
a lot of these pseudo attacks are exploitable,

142
00:05:56,829 --> 00:05:59,630
not just by the users listed in the Pseudo earth file

143
00:05:59,730 --> 00:06:02,109
-- by anybody on the system. Right.
-- Right.

144
00:06:02,119 --> 00:06:07,309
-- So let's explain there's two pseudo problems. Well,
-- there's the Baron same edit.

145
00:06:07,320 --> 00:06:08,049
What's the other one?

146
00:06:08,059 --> 00:06:09,109
There's the,

147
00:06:09,119 --> 00:06:12,850
there's a buffer overflow and then there's also one that affects

148
00:06:12,859 --> 00:06:15,809
pseudo only when Se Linux is enabled in permissive mode,

149
00:06:15,820 --> 00:06:17,290
which is absolutely hilarious

150
00:06:18,540 --> 00:06:18,769
because

151
00:06:18,890 --> 00:06:19,100
el

152
00:06:19,329 --> 00:06:25,149
so, OK, so the first one is a buffer overflow and this is kind of your classic case of

153
00:06:25,570 --> 00:06:26,959
uh this is qis

154
00:06:27,350 --> 00:06:29,790
I'm anytime I use the word Attackers in this instance,

155
00:06:29,799 --> 00:06:31,869
it's actually security researchers but whatever.

156
00:06:32,010 --> 00:06:32,380
So

157
00:06:32,730 --> 00:06:33,989
Kace figured out

158
00:06:34,109 --> 00:06:35,589
that there is a,

159
00:06:35,910 --> 00:06:40,010
-- we'll say one of the checks for
-- the argument parsing.

160
00:06:40,290 --> 00:06:44,459
-- It
-- is, yeah, it's coming from, it's coming from the human typing kind of.

161
00:06:44,470 --> 00:06:49,839
And they found a corner case where if a, if a, if a command line ends with a slash,

162
00:06:49,850 --> 00:06:54,179
-- which is technically impossible in shell, it ends with a slash, apparently
-- not.

163
00:06:54,829 --> 00:06:58,679
Well, anyway, there's, it ends with a slash.

164
00:06:58,690 --> 00:07:01,399
Then basically one of the checks kind of fails.

165
00:07:01,410 --> 00:07:05,980
You don't get your string terminator, which is a null character in the Seaworld.

166
00:07:05,989 --> 00:07:08,799
And then you can end up writing nonsense onto the

167
00:07:08,809 --> 00:07:12,209
heap and then eventually you can make pseudo do things that

168
00:07:12,440 --> 00:07:13,940
pseudo shouldn't be doing.

169
00:07:13,950 --> 00:07:19,089
And it's basically how it executes the command that it's been given to run.

170
00:07:19,100 --> 00:07:22,765
And the reason. And this is like this is just a huge pile of holy crap

171
00:07:22,865 --> 00:07:24,776
because you can't just use it with pseudo,

172
00:07:24,786 --> 00:07:28,175
you have to use it with a command called pseudo edit.

173
00:07:28,246 --> 00:07:31,716
And ironically pseudo edit is meant to only edit files.

174
00:07:31,726 --> 00:07:33,566
And it's just like go,

175
00:07:33,575 --> 00:07:35,895
I will put a link to the advisory in the show notes

176
00:07:35,906 --> 00:07:38,726
because the advisory will do a far better job than I am.

177
00:07:38,735 --> 00:07:40,536
And the details are unimportant.

178
00:07:40,545 --> 00:07:44,626
-- There are exploits out there to go after this
-- and there's a,

179
00:07:44,635 --> 00:07:48,216
there's a more reliable exploit that came out a few days after the original stuff.

180
00:07:48,226 --> 00:07:49,045
Right. Right.

181
00:07:49,055 --> 00:07:53,351
And so basically what this comes down to is just kind of classic buffer overflow.

182
00:07:53,361 --> 00:07:54,671
It affects the heap

183
00:07:54,802 --> 00:07:59,022
and just given the way it works, the technologies like address space layout,

184
00:07:59,032 --> 00:08:02,652
randomization and position independent executable and all that stuff.

185
00:08:03,421 --> 00:08:05,071
None of that matters here because of how

186
00:08:05,082 --> 00:08:08,712
this exploit works because basically you're just overwriting the

187
00:08:08,721 --> 00:08:11,261
buffer into the buffer of the command you're

188
00:08:11,272 --> 00:08:14,592
going to execute and then you control that so

189
00:08:14,821 --> 00:08:15,631
too bad.

190
00:08:15,761 --> 00:08:18,108
It doesn't matter where is on the on the heap.

191
00:08:18,118 --> 00:08:18,648
But anyway,

192
00:08:18,657 --> 00:08:23,097
the point is this is an absolutely fascinating bug because these are

193
00:08:23,108 --> 00:08:26,368
literally some of the best security developers in the world they made.

194
00:08:26,377 --> 00:08:29,528
What would seem to be a very trivial mistake like if

195
00:08:29,537 --> 00:08:31,238
you would have showed this to me and been like,

196
00:08:31,247 --> 00:08:35,927
oh look, if you, if you do this, you can overwrite 11 character basically.

197
00:08:35,937 --> 00:08:38,828
I'd be like, eh, that's probably not that bad, you know what I mean?

198
00:08:38,837 --> 00:08:40,337
But like Wallace did the work.

199
00:08:40,347 --> 00:08:43,607
I actually remember the first time that sort of, you can overwrite. What was it?

200
00:08:43,616 --> 00:08:45,653
Like, four bites of data in some.

201
00:08:47,604 --> 00:08:50,583
It was either it was either windows or internet explorer flaw

202
00:08:50,924 --> 00:08:54,533
and of course, everybody's like, you know, medium, it's bad. It could be bad,

203
00:08:54,633 --> 00:08:56,703
but like, 24 hours later, it's like,

204
00:08:56,883 --> 00:08:59,314
yeah, we've upgraded this to like super critical.

205
00:08:59,323 --> 00:09:01,463
Oh my God, you need to patch it right now. Important.

206
00:09:01,643 --> 00:09:03,823
Actually with the lib G crypt flaw,

207
00:09:04,044 --> 00:09:09,763
I can explain why, why that matters because that one is fascinating in what it does

208
00:09:09,934 --> 00:09:10,984
and we'll, we'll get to that.

209
00:09:10,994 --> 00:09:11,504
But anyway,

210
00:09:11,513 --> 00:09:15,479
then the second problem that was found in pseudo is basically

211
00:09:15,489 --> 00:09:19,049
pseudo has special code that says if I am running an E

212
00:09:19,080 --> 00:09:22,859
Linux do something different when you run pseudo edit and it turned

213
00:09:22,869 --> 00:09:24,739
out what it basically does I think is that what it,

214
00:09:24,750 --> 00:09:27,659
it moves the file, it changes some permissions,

215
00:09:27,669 --> 00:09:30,700
it edits the file and then it moves it back, I think is what happens.

216
00:09:30,710 --> 00:09:33,799
And basically it's just your typical race condition where

217
00:09:34,119 --> 00:09:37,640
they say, oh we're going to put the file here except

218
00:09:37,760 --> 00:09:39,590
they don't make sure the file doesn't

219
00:09:39,755 --> 00:09:42,435
this before they start changing some permissions on the file.

220
00:09:42,445 --> 00:09:47,695
And so an attacker can basically create the file first and then do scary things.

221
00:09:47,705 --> 00:09:50,015
Well, between the time of check and time of use, there's that

222
00:09:50,245 --> 00:09:55,526
-- micro gap.
-- It's, yeah, but on computers now it's like seven years of execution time.

223
00:09:55,536 --> 00:09:59,455
-- Right. Because they're so fast
-- and the thing is there are, we're going to say safer.

224
00:09:59,585 --> 00:10:02,466
I'm not going to use the word safe definitively.

225
00:10:02,495 --> 00:10:05,255
But there are safer ways to avoid these time of check

226
00:10:05,265 --> 00:10:07,205
time of use things because I don't want to say it's a

227
00:10:07,401 --> 00:10:10,072
problem, but it's a problem that we are well aware of,

228
00:10:10,202 --> 00:10:12,711
but you have to know it's a problem.

229
00:10:12,721 --> 00:10:16,471
I bet a lot of developers don't know that this is even a thing.

230
00:10:16,742 --> 00:10:20,591
Yeah. Well, I, I think a lot of it probably boils down to the classic.

231
00:10:20,601 --> 00:10:24,392
Why would they do that or they don't think it's possible to exploit or something?

232
00:10:24,521 --> 00:10:26,122
It's forbidden knowledge,

233
00:10:26,132 --> 00:10:28,671
I think for developers like it's just not something you would know.

234
00:10:28,682 --> 00:10:32,072
I mean, so explain the bug because it, when you,

235
00:10:32,081 --> 00:10:34,742
you can explain it in a way that makes it,

236
00:10:34,960 --> 00:10:36,340
I guess more obvious.

237
00:10:36,349 --> 00:10:39,340
Well, in simplistic terms, all these times of checks,

238
00:10:39,349 --> 00:10:42,780
-- times of use bugs boil down
-- to make up a crappy example.

239
00:10:42,789 --> 00:10:45,409
So I want to write a temp file. Does

240
00:10:45,760 --> 00:10:46,289
temp slash

241
00:10:46,450 --> 00:10:46,739
Kurtz

242
00:10:46,900 --> 00:10:47,039
temp

243
00:10:47,179 --> 00:10:49,450
file dot txt exist? No.

244
00:10:49,619 --> 00:10:54,619
OK. Good. I'm going to go create that file and then write data to it

245
00:10:54,979 --> 00:10:57,690
except between the time I checked that it exists.

246
00:10:57,700 --> 00:10:59,919
And by between the time I actually started writing to it,

247
00:11:00,010 --> 00:11:04,559
-- an attacker created a symbolic link there that points to etc password,
-- right?

248
00:11:04,570 --> 00:11:06,739
-- You're catting garbage of password.
-- Exactly. Exactly.

249
00:11:06,750 --> 00:11:09,570
Or the favorite, actually this is, I don't know if they fix this yet,

250
00:11:09,580 --> 00:11:12,400
but the favorite used to be to cat garbage into the Cron tab.

251
00:11:12,419 --> 00:11:15,690
And Kron was super happy to be like, oh, there's all this Gobby

252
00:11:15,869 --> 00:11:16,750
*** in this file.

253
00:11:16,760 --> 00:11:18,429
I'm just going to throw that away till I hit

254
00:11:18,440 --> 00:11:20,760
something that looks like a command I should run.

255
00:11:20,869 --> 00:11:22,070
And it's like what?

256
00:11:22,099 --> 00:11:26,049
Yeah, but in fairness how many people messed up those first few star, space star,

257
00:11:26,059 --> 00:11:28,630
space five, space star, right?

258
00:11:28,640 --> 00:11:29,489
Like it just works.

259
00:11:29,500 --> 00:11:34,210
-- We made it work
-- except it's like a super reliable exploit vector now like

260
00:11:34,479 --> 00:11:39,330
-- no, just like when something is wrong give up, do not try to
-- recover.

261
00:11:39,340 --> 00:11:41,919
You know what it boils down to if you see something, say something.

262
00:11:41,929 --> 00:11:46,090
So if something doesn't look right, like stop and say something, report an error,

263
00:11:46,099 --> 00:11:46,710
don't just keep

264
00:11:46,919 --> 00:11:47,390
along.

265
00:11:47,520 --> 00:11:50,440
It was a different time because I remember back in the

266
00:11:50,450 --> 00:11:53,190
day when I was but a wee lad doing development,

267
00:11:53,200 --> 00:11:58,059
there was this concept everyone would talk about which is be very stingy on what

268
00:11:58,070 --> 00:12:01,979
you send and be very accepting on what you receive with the intention being.

269
00:12:02,020 --> 00:12:04,700
-- Yeah. No, those days are over. Right.
-- Right. And

270
00:12:04,739 --> 00:12:06,010
-- those days are so
-- over.

271
00:12:06,020 --> 00:12:06,119
No,

272
00:12:06,130 --> 00:12:08,400
if you don't receive exactly what you expect

273
00:12:08,409 --> 00:12:10,979
like you give up because something horrible.

274
00:12:11,030 --> 00:12:12,539
Well, and you tell the other end

275
00:12:12,890 --> 00:12:13,880
-- that.
-- Right. Right.

276
00:12:13,900 --> 00:12:15,849
So, I think, you know what? That's a good point.

277
00:12:15,859 --> 00:12:17,719
That is something that can no longer

278
00:12:17,969 --> 00:12:19,080
essentially be.

279
00:12:19,239 --> 00:12:20,000
Yeah. Right.

280
00:12:20,119 --> 00:12:24,059
Yep. If you get garbage just quit, don't, don't even try to parse the garbage.

281
00:12:24,070 --> 00:12:26,559
It's not, it's not unless, although I say that

282
00:12:26,729 --> 00:12:31,520
and html, like web browsers, those people are champions. I don't know how they do it

283
00:12:32,000 --> 00:12:34,780
because they like, they will parse any garbage,

284
00:12:34,929 --> 00:12:40,000
-- you know what they do it, they do it one patch at a time. Yeah,
-- that one patch at a time.

285
00:12:40,520 --> 00:12:41,520
That is so true.

286
00:12:41,809 --> 00:12:42,630
That is so true.

287
00:12:42,640 --> 00:12:46,630
That's why web browsers are just like a constant onslaught of security updates.

288
00:12:46,640 --> 00:12:48,510
I love those

289
00:12:48,679 --> 00:12:50,609
CS S HTML.

290
00:12:50,619 --> 00:12:52,909
Five compatibility tests where it's like you're supposed

291
00:12:52,919 --> 00:12:54,669
to see like a rubber duck or whatever and

292
00:12:54,900 --> 00:12:55,520
you know, they,

293
00:12:55,530 --> 00:13:00,559
they run it in some brows and it's just this mangled piece of looking like gray to art.

294
00:13:00,570 --> 00:13:03,010
I know. I know. Ok. Ok. Anyway, anyway,

295
00:13:03,640 --> 00:13:09,500
so here's the lesson I would say we can take from everything pseudo related.

296
00:13:09,609 --> 00:13:11,530
You cannot write memory safe code.

297
00:13:11,539 --> 00:13:15,320
-- I don't care who you are just, you can't,
-- it's worse than that

298
00:13:15,520 --> 00:13:17,630
because you cannot write memory safe code and

299
00:13:17,640 --> 00:13:21,840
see and systems like Python or Rust that essentially

300
00:13:22,059 --> 00:13:26,166
coalesce all the memory required safe code into a small core that, you know,

301
00:13:26,176 --> 00:13:28,926
hopefully only a few very competent developers work on.

302
00:13:28,935 --> 00:13:31,676
Certainly reduces the risk but doesn't eliminate it,

303
00:13:31,926 --> 00:13:34,185
-- but even they can't get this. Right. Oh. Right.
-- Right.

304
00:13:34,195 --> 00:13:37,846
And there are obviously still security vulnerabilities in

305
00:13:37,976 --> 00:13:40,435
rust applications in Python applications.

306
00:13:40,445 --> 00:13:43,125
It's just, it's not going to be a one bit buffer overflow.

307
00:13:43,135 --> 00:13:43,356
Well,

308
00:13:43,366 --> 00:13:44,966
what I'm saying is just by using Python or

309
00:13:44,976 --> 00:13:47,176
Rust doesn't make you immune to buffer overflows.

310
00:13:47,185 --> 00:13:50,486
Right. There's still potentially those in the run time, not your code.

311
00:13:50,591 --> 00:13:52,281
It is possible.

312
00:13:52,421 --> 00:13:53,812
It is unlikely.

313
00:13:53,822 --> 00:13:56,192
But you can also execute Rust code in an

314
00:13:56,202 --> 00:13:58,771
unsafe way where there's a decorator you can use.

315
00:13:58,781 --> 00:14:00,072
That basically says like,

316
00:14:00,192 --> 00:14:03,562
don't worry about memory management here. I got this and it's

317
00:14:03,702 --> 00:14:03,981
like,

318
00:14:04,981 --> 00:14:05,731
don't do that.

319
00:14:05,762 --> 00:14:09,512
I feel like if you know that should be in your C I CD pipeline for like, no,

320
00:14:09,521 --> 00:14:10,752
you're not allowed to do that,

321
00:14:10,872 --> 00:14:11,252
right?

322
00:14:11,262 --> 00:14:13,372
And I think we talked about this a while back where there

323
00:14:13,382 --> 00:14:16,771
was some like web baring library in Russ that basically was like,

324
00:14:16,781 --> 00:14:17,812
yep, I got this,

325
00:14:17,822 --> 00:14:21,788
don't worry about and it was just like a train wreck of memory management problems.

326
00:14:21,797 --> 00:14:22,978
You know what? It's actually not.

327
00:14:22,987 --> 00:14:27,268
I just plugged in Python buffer overflow into CV database. 29 records.

328
00:14:27,278 --> 00:14:29,857
There's only literally about a dozen in the last decade.

329
00:14:29,867 --> 00:14:33,468
And is that because of Python or is that because of some weird binding? Yeah.

330
00:14:33,478 --> 00:14:35,877
Yeah, that's like that's like a buffer overflow in PC

331
00:14:36,307 --> 00:14:36,918
underscore

332
00:14:37,057 --> 00:14:37,127
Rer

333
00:14:37,278 --> 00:14:39,778
in C types call proc dot C blah, blah, blah, blah blah.

334
00:14:39,828 --> 00:14:41,518
So that's like in the language core.

335
00:14:41,528 --> 00:14:45,458
-- Interesting,
-- but there's literally a handful in the last decade.

336
00:14:45,468 --> 00:14:45,927
And my

337
00:14:46,283 --> 00:14:51,624
is to actually exploit those. You have to write Python code.

338
00:14:51,653 --> 00:14:54,943
You don't just run code and interpret data.

339
00:14:55,054 --> 00:14:56,703
That's usually how that works.

340
00:14:56,883 --> 00:14:59,463
Yeah. So, but basically that's a lot safer.

341
00:14:59,473 --> 00:15:03,184
-- I mean, that's, that's orders of magnitude better,
-- unquestionably.

342
00:15:03,193 --> 00:15:03,783
Now, art,

343
00:15:03,794 --> 00:15:07,573
do you think the pseudo people are ever going to rewrite pseudo in a safer language?

344
00:15:07,583 --> 00:15:09,424
-- I don't think they can because I
-- don't

345
00:15:09,434 --> 00:15:09,984
-- think
-- they are.

346
00:15:09,994 --> 00:15:14,023
Well, you're in that classic trap of pseudo has so many learned lessons,

347
00:15:14,130 --> 00:15:16,789
applied lessons that are embedded in that code.

348
00:15:16,799 --> 00:15:21,429
But to extract all those lessons and ideas and implement them safely in a new

349
00:15:21,440 --> 00:15:25,429
language is essentially it's not just your chances of doing so securely or zero.

350
00:15:25,440 --> 00:15:27,830
Your chances of doing so successfully and getting it out

351
00:15:27,840 --> 00:15:30,070
the door in a reasonable amount of time are zero.

352
00:15:30,400 --> 00:15:34,669
Well, and here's the better question. Would it be a valuable use of resources?

353
00:15:34,869 --> 00:15:38,950
I think the answer is no, because the correct answer is just stop using pseudo.

354
00:15:38,960 --> 00:15:40,330
And now there's probably a bunch of people that

355
00:15:40,340 --> 00:15:41,909
just leaped to their feet and said what?

356
00:15:42,119 --> 00:15:45,059
But here's the reality, we don't live in multi user

357
00:15:45,590 --> 00:15:48,500
systems anymore. It's just, it's not how it works.

358
00:15:48,510 --> 00:15:50,960
And so like, for example, at, at, at elastic,

359
00:15:50,969 --> 00:15:54,219
we have a bunch of containers we ship and none of them have pseudo in them

360
00:15:54,530 --> 00:15:57,309
because why would you? Right. That'd be madness.

361
00:15:57,320 --> 00:16:00,539
I've come to the, I came to the conclusion, actually, I think I want to say about,

362
00:16:00,789 --> 00:16:02,530
well, about almost 10 years ago now. But yeah,

363
00:16:02,770 --> 00:16:06,880
the only really truly safe sort of interface from one

364
00:16:06,890 --> 00:16:10,030
privileged level to another is probably a network socket.

365
00:16:10,039 --> 00:16:12,760
I mean, maybe I'm not, I'm not even concerned about that.

366
00:16:12,770 --> 00:16:13,429
Well, but if you have,

367
00:16:13,440 --> 00:16:17,059
if you have privileged code and unprivileged code running

368
00:16:17,070 --> 00:16:19,789
in the same container or VM or whatever,

369
00:16:19,799 --> 00:16:23,770
as soon as the attacker, it gives attacker a very clear way.

370
00:16:23,780 --> 00:16:23,900
V

371
00:16:24,090 --> 00:16:28,070
the LINX kernel or via pseudo or via whatever to get to that privilege goes.

372
00:16:28,080 --> 00:16:30,580
Whereas over a network socket, because it's a network socket,

373
00:16:30,590 --> 00:16:33,559
we're already making assumptions about the bad guys being able to try and talk to it.

374
00:16:33,570 --> 00:16:34,450
And so it tends to be,

375
00:16:34,460 --> 00:16:35,890
I think the mentality tends to be is it's a

376
00:16:35,900 --> 00:16:39,059
lot more hardened and a lot more secure by default,

377
00:16:39,179 --> 00:16:41,690
you have no data to back that up. I'm calling BS.

378
00:16:41,989 --> 00:16:43,130
But, well,

379
00:16:43,140 --> 00:16:45,640
but this whole multi user system clearly hasn't

380
00:16:45,650 --> 00:16:47,169
worked from a security point of view.

381
00:16:47,179 --> 00:16:50,229
I agree. And I think the only way to win not to play, right?

382
00:16:50,239 --> 00:16:54,159
Just like microservice is microservice, the crap out of everything you can

383
00:16:54,320 --> 00:16:59,200
and don't try to transition from low privilege to high privilege in the same,

384
00:16:59,210 --> 00:17:01,500
I guess, like name space, we'll call it, right?

385
00:17:01,510 --> 00:17:04,219
-- Just don't do that bad idea.
-- Basically. Name space process.

386
00:17:04,229 --> 00:17:05,239
Well, not even process, space,

387
00:17:05,500 --> 00:17:06,750
execution, space.

388
00:17:07,209 --> 00:17:07,630
Just

389
00:17:07,800 --> 00:17:09,339
you get the idea. I want to talk about LG

390
00:17:09,439 --> 00:17:13,680
Crip because I think this one's way more fun actually. So this one is from Tavis

391
00:17:13,910 --> 00:17:14,540
Tavis Ori,

392
00:17:14,800 --> 00:17:16,410
who if you, if you listen to this pods

393
00:17:16,550 --> 00:17:16,589
at

394
00:17:16,739 --> 00:17:17,489
all, we talk about it.

395
00:17:17,500 --> 00:17:21,089
Like, I guess frightening Tavis fan boys would be my description.

396
00:17:21,098 --> 00:17:24,640
Well, I would say he's a top 10 researcher on the planet. That's true.

397
00:17:24,650 --> 00:17:27,368
-- I mean, it's hard not to
-- like him like that infamous, you know,

398
00:17:27,380 --> 00:17:28,869
does anybody at Claude Flair?

399
00:17:28,880 --> 00:17:31,030
Can they reach out to me? It's Friday.

400
00:17:32,290 --> 00:17:32,619
-- That's right.
-- I

401
00:17:32,729 --> 00:17:32,839
think

402
00:17:32,949 --> 00:17:33,839
I found something bad.

403
00:17:34,130 --> 00:17:34,890
But anyway,

404
00:17:35,099 --> 00:17:36,329
so Lib

405
00:17:36,650 --> 00:17:41,969
Gryp is the cryptography library that GP G uses, which is the,

406
00:17:41,979 --> 00:17:43,810
I guess we've complained about

407
00:17:43,949 --> 00:17:45,800
at length. I won't rehash any of it here.

408
00:17:45,920 --> 00:17:49,579
-- It was a beautiful piece of software from a different time
-- from,

409
00:17:49,599 --> 00:17:51,140
from the early nineties.

410
00:17:51,260 --> 00:17:52,500
But anyway, basically,

411
00:17:52,510 --> 00:17:57,930
what it comes down to is Tavis found a one byte buffer overflow in Lib G

412
00:17:58,040 --> 00:17:58,430
crypt.

413
00:17:58,439 --> 00:18:01,310
And this can be exercised prior to checking

414
00:18:01,319 --> 00:18:03,520
any check sums or signatures or anything,

415
00:18:03,530 --> 00:18:07,329
which is like the worst possible problem you can have

416
00:18:07,339 --> 00:18:09,310
in a crypto library because think of it this way,

417
00:18:09,319 --> 00:18:11,130
let's say I send Kurt

418
00:18:11,380 --> 00:18:14,880
some malicious encrypted content and his,

419
00:18:15,089 --> 00:18:20,489
his web app decides, oh, I'm going to decrypt this and it loads it up and now if it's,

420
00:18:20,660 --> 00:18:22,839
if it's pre checking anything,

421
00:18:23,199 --> 00:18:25,709
it means just sending it, say an email.

422
00:18:25,719 --> 00:18:30,079
And if the web app tries to decrypt it, you're going to trigger it immediately.

423
00:18:30,089 --> 00:18:34,300
Whereas what happens in, let's say it's going to verify the signature,

424
00:18:34,310 --> 00:18:36,640
meaning like I would have to sign

425
00:18:36,979 --> 00:18:40,199
that content with my key and then send it to Kurt.

426
00:18:40,209 --> 00:18:43,040
So it would be absolutely definitive. It came from me.

427
00:18:43,050 --> 00:18:45,920
Whereas an attacker who doesn't have my key could not exploit that,

428
00:18:45,930 --> 00:18:47,839
which is obviously far less dangerous.

429
00:18:48,209 --> 00:18:52,640
Now, here's what makes this one so fun. It overwrites one

430
00:18:53,000 --> 00:18:53,800
bite

431
00:18:53,979 --> 00:18:56,589
in AAA heap structure

432
00:18:56,689 --> 00:18:58,140
and that doesn't sound that bad, right?

433
00:18:58,150 --> 00:18:59,920
A lot of people will be like, yeah, whatever, who cares?

434
00:19:01,040 --> 00:19:02,890
I love that as a security person, I'm just like,

435
00:19:03,839 --> 00:19:08,770
but here's what, here's what makes it so fun is in the intel world,

436
00:19:08,780 --> 00:19:12,609
there's a concept called little Indian en Dia N.

437
00:19:12,750 --> 00:19:16,290
So what ends up happening is part of that pointer,

438
00:19:16,300 --> 00:19:19,525
the part that is we'll say less dangerous because obviously,

439
00:19:19,535 --> 00:19:23,555
if you imagine when you're, when you're parsing data, the higher bits,

440
00:19:23,724 --> 00:19:25,344
if you change those now,

441
00:19:25,354 --> 00:19:28,185
you're moving from say memory in the we'll say one

442
00:19:28,194 --> 00:19:30,864
megabyte page into memory in the 16 megabyte page,

443
00:19:30,875 --> 00:19:31,015
right?

444
00:19:31,025 --> 00:19:33,194
Where you could make these great leaps

445
00:19:33,545 --> 00:19:34,555
in the process space.

446
00:19:34,849 --> 00:19:37,420
Whereas if you affect the lower bits,

447
00:19:37,550 --> 00:19:39,979
now you might only be moving, say, you know,

448
00:19:39,989 --> 00:19:43,469
tens or hundreds of bytes forwards or backwards

449
00:19:43,479 --> 00:19:46,310
depending upon what is happening in the application,

450
00:19:46,319 --> 00:19:46,630
right?

451
00:19:46,640 --> 00:19:50,359
-- Stuff
-- can still go bad, but it's a lot harder to make it go really bad. A

452
00:19:50,719 --> 00:19:53,270
well, it's, it's what you want though in this case.

453
00:19:53,280 --> 00:19:56,229
So what ends up happening is you overwrite one bite, right?

454
00:19:56,630 --> 00:20:02,329
And that one bite is happens to be used as part of a function pointer

455
00:20:02,479 --> 00:20:03,680
in a structure

456
00:20:03,849 --> 00:20:09,770
that is then immediately called by the library, which is if I was going to create

457
00:20:09,969 --> 00:20:12,300
the worst possible exploit

458
00:20:12,719 --> 00:20:18,035
to show up a heap over of vulnerability in 2021. This is literally what I would do.

459
00:20:18,305 --> 00:20:22,395
It's like the perfect storm of how not to do this stuff.

460
00:20:22,405 --> 00:20:25,454
And it's, it's absolutely brilliant and it's absolutely hilarious.

461
00:20:25,724 --> 00:20:27,114
It just gets me.

462
00:20:27,234 --> 00:20:29,645
So how many more of these are lurking in this code?

463
00:20:29,655 --> 00:20:32,635
See, that's what always gets me if somebody finds a CV in the code

464
00:20:33,089 --> 00:20:34,290
and it's code that has

465
00:20:34,439 --> 00:20:36,430
definitely had more than one CV found than it.

466
00:20:36,439 --> 00:20:39,560
Like this isn't the first time they've ever found a flaw in Lib GIC Crypt.

467
00:20:39,569 --> 00:20:42,150
Well, how many more are lurking? 1000 a million?

468
00:20:42,479 --> 00:20:45,390
Well, probably not that many, but I'm sure it's not zero.

469
00:20:45,410 --> 00:20:47,400
Well, there's so there's 15 cvs in Lib GIC

470
00:20:47,510 --> 00:20:49,459
-- Crypt going back the last 12 years.
-- Yeah.

471
00:20:49,750 --> 00:20:51,060
Probably be a lot more than that.

472
00:20:51,209 --> 00:20:54,829
I feel like there's more than one security flaw roughly every year in Lib G

473
00:20:54,939 --> 00:20:56,060
crypt. Interesting.

474
00:20:56,069 --> 00:21:01,250
See, and that's what I see is the sense of scale is it, should it be 10 a year, 101.5.

475
00:21:01,260 --> 00:21:06,290
I bet it should be more than one. I mean, it's C code parsing

476
00:21:06,660 --> 00:21:10,839
encrypted content which is already pretty dicey work to begin with.

477
00:21:10,849 --> 00:21:16,050
And I mean, again, like the developers who write this stuff, they're not slouches.

478
00:21:16,060 --> 00:21:18,229
These people aren't bad at what they do.

479
00:21:18,369 --> 00:21:18,839
Well,

480
00:21:18,849 --> 00:21:20,760
and to be fair about a third of

481
00:21:20,770 --> 00:21:23,839
these flaws are really complicated side channel things,

482
00:21:23,849 --> 00:21:27,510
you know, where you can kind of cut Lib G some slack on that because it's like,

483
00:21:27,520 --> 00:21:29,800
oh because the CPU does Xy and Z

484
00:21:30,150 --> 00:21:30,689
that lib G

485
00:21:30,920 --> 00:21:33,569
didn't anticipate until some security researcher spent

486
00:21:33,579 --> 00:21:34,890
six months poking away at it.

487
00:21:34,900 --> 00:21:39,650
-- Here's
-- part of the problem. So if a normal person found this bug

488
00:21:39,760 --> 00:21:41,060
and they reported it,

489
00:21:41,319 --> 00:21:45,250
there is a high probability the developer would be like, yeah, whatever.

490
00:21:45,260 --> 00:21:50,689
Because a one bite buffer overflow on the heap, you would naturally assume oh,

491
00:21:50,699 --> 00:21:53,489
address based layout randomization is going to save us.

492
00:21:53,500 --> 00:21:55,714
It will be fine. Nothing to worry about here.

493
00:21:55,724 --> 00:21:57,635
But then when someone like Tavis looks at it,

494
00:21:57,645 --> 00:22:00,295
he obviously has a deeper understanding of

495
00:22:00,305 --> 00:22:01,944
what's happening literally in the hardware.

496
00:22:01,954 --> 00:22:02,114
I mean,

497
00:22:02,125 --> 00:22:03,765
this kind of goes back to the last episode where we're

498
00:22:03,775 --> 00:22:06,314
talking about using eight bits to really understand what's happening.

499
00:22:06,324 --> 00:22:10,395
Like Tavis gets that in 64 bits, which is amazing.

500
00:22:10,405 --> 00:22:13,425
Well, it's like anything where you have domain specific knowledge, you know,

501
00:22:13,435 --> 00:22:15,555
I've done enough home renovations now that I look at

502
00:22:15,564 --> 00:22:17,255
certain things around a house and I'm just like,

503
00:22:17,265 --> 00:22:18,425
oh boy, that's bad.

504
00:22:19,069 --> 00:22:21,420
Right. And, and it might not look that bad.

505
00:22:21,430 --> 00:22:24,650
But, you know, in my brain, I'm just like, uh, oh my breaker panel,

506
00:22:24,660 --> 00:22:26,050
all the breakers were different.

507
00:22:26,209 --> 00:22:28,680
That's a good sign. Like they were the same brand,

508
00:22:28,859 --> 00:22:32,359
but they were clearly spanning about two decades. And I'm just like, oh boy.

509
00:22:32,410 --> 00:22:34,829
So I had them all replaced. That's a good idea.

510
00:22:34,900 --> 00:22:35,209
And,

511
00:22:35,219 --> 00:22:36,829
and the other thing I discovered when I was changing out

512
00:22:36,839 --> 00:22:38,859
the light switches in the garage with motion sensor ones,

513
00:22:38,869 --> 00:22:39,650
which is lovely.

514
00:22:39,660 --> 00:22:41,569
I walk into the garage boof, the lights go on

515
00:22:42,160 --> 00:22:47,500
and I accidentally touched the term uh the terminal to the, to the junction box,

516
00:22:47,510 --> 00:22:48,349
metal junction wash with

517
00:22:48,479 --> 00:22:49,089
screwdriver.

518
00:22:49,099 --> 00:22:51,760
And luckily I have like quite nice screwdrivers, so I didn't get zapped,

519
00:22:51,920 --> 00:22:54,819
but I got a nice big bang spark and uh

520
00:22:54,829 --> 00:22:57,219
the light stayed on like the breaker didn't break.

521
00:22:57,349 --> 00:23:00,619
So, and that's when I went and looked at my fuse box and actually paid attention to it.

522
00:23:00,630 --> 00:23:01,180
And I'm like,

523
00:23:01,319 --> 00:23:03,400
and I'm looking at it and I'm like, oh, ok.

524
00:23:03,410 --> 00:23:07,239
These, these breakers are, some of them are probably original from 1981.

525
00:23:07,540 --> 00:23:11,140
And so like I said, I had them all replaced and now if you do something like that,

526
00:23:11,150 --> 00:23:13,819
the lights will go out and, you know, the host won't try and kill you.

527
00:23:13,829 --> 00:23:16,589
But that's the thing like it's, that is a, not like if I,

528
00:23:16,599 --> 00:23:18,030
if you tell that to a normal person,

529
00:23:18,130 --> 00:23:21,619
oh, you know, you, you spark it and the lights stay on. They'll be like, ok.

530
00:23:21,750 --> 00:23:21,949
Right.

531
00:23:21,959 --> 00:23:24,589
Whereas every electrician is going, oh my God, go,

532
00:23:24,599 --> 00:23:27,670
proceed immediately to the breaker box and turn everything off,

533
00:23:27,800 --> 00:23:29,150
you know, and call an electrician.

534
00:23:29,479 --> 00:23:30,719
So, and that's the thing. Right.

535
00:23:30,729 --> 00:23:34,270
-- And this, this stuff is way more complicated than that.
-- I mean, I would agree.

536
00:23:34,280 --> 00:23:37,739
I think it's, it's very difficult and there isn't, I mean,

537
00:23:37,750 --> 00:23:40,060
I feel bad because I know I've explained it terribly, but

538
00:23:40,229 --> 00:23:40,910
it's just

539
00:23:41,099 --> 00:23:47,050
what is, what is happening here at a low level is so mind bogglingly weird.

540
00:23:47,060 --> 00:23:47,670
And I feel like this,

541
00:23:47,780 --> 00:23:49,359
it is one of those things you could probably make

542
00:23:49,369 --> 00:23:53,310
a 25 minute youtube video explaining why this is happening

543
00:23:53,479 --> 00:23:54,189
and

544
00:23:54,369 --> 00:23:57,780
it would, it would be long because this is super complicated.

545
00:23:57,930 --> 00:23:59,719
Here's a thought. What if we just,

546
00:23:59,829 --> 00:24:02,819
and I don't, I get that this isn't for every piece of software on the planet,

547
00:24:02,829 --> 00:24:03,349
like say Greer

548
00:24:03,560 --> 00:24:05,800
said, but for security

549
00:24:06,229 --> 00:24:10,000
sensitive code and I think we could all agree that pseudo and like

550
00:24:10,390 --> 00:24:14,849
lib G crypt are, would, would be classified as security sensitive code.

551
00:24:14,859 --> 00:24:17,260
But shouldn't they also strive not just for

552
00:24:17,790 --> 00:24:19,949
quote unquote security but for code

553
00:24:19,959 --> 00:24:22,369
correctness in general because code correctness

554
00:24:22,380 --> 00:24:27,020
in general will also a help the code be more understandable and readable

555
00:24:27,219 --> 00:24:32,239
-- and B prevent other problems.
-- I mean, it probably is though.

556
00:24:32,430 --> 00:24:33,959
And that essentially what I'm saying is we,

557
00:24:33,969 --> 00:24:36,030
we triage our software and hold certain pieces to a

558
00:24:36,040 --> 00:24:38,979
higher standard which some organizations have tried to do.

559
00:24:39,170 --> 00:24:40,989
I think this already is though.

560
00:24:41,000 --> 00:24:41,719
Kurt, I mean,

561
00:24:41,729 --> 00:24:44,035
this is the kind of code that is going to get

562
00:24:44,045 --> 00:24:46,795
an enormous amount of scrutiny from a lot of people.

563
00:24:46,814 --> 00:24:50,155
-- And yet here we are with legit crypt.
-- No, I agree.

564
00:24:50,265 --> 00:24:55,385
But there are also, these are extremely esoteric bugs that only

565
00:24:55,545 --> 00:24:55,864
the,

566
00:24:55,875 --> 00:25:00,505
I guess I would say some of the top end researchers are going to be

567
00:25:00,515 --> 00:25:05,665
able to understand or even create exploits for it just because it's so complicated.

568
00:25:05,675 --> 00:25:08,925
So question then is that does that maybe not inherently

569
00:25:09,260 --> 00:25:11,670
imply some sort of failure in the language that

570
00:25:11,680 --> 00:25:14,099
was used if to truly understand the failures.

571
00:25:14,109 --> 00:25:15,680
Here's the thing, if you have a

572
00:25:15,810 --> 00:25:16,640
system

573
00:25:17,040 --> 00:25:21,150
right built out of components that is so inherently complicated and difficult to

574
00:25:21,160 --> 00:25:23,609
understand that understanding the failure scenarios

575
00:25:23,619 --> 00:25:25,949
and properly addressing them is basically impossible

576
00:25:26,810 --> 00:25:27,229
then.

577
00:25:27,239 --> 00:25:27,589
Well, you know,

578
00:25:27,599 --> 00:25:30,239
this reminds me of is all the old nuclear reactors from the 19 seventies

579
00:25:30,250 --> 00:25:33,310
and eighties had about 3 million moving parts that turns out they don't need,

580
00:25:33,319 --> 00:25:33,589
right?

581
00:25:33,599 --> 00:25:35,160
I remember reading this reactor design from

582
00:25:35,170 --> 00:25:36,640
Westinghouse where Westinghouse straight up said,

583
00:25:36,650 --> 00:25:38,540
like we looked at our existing design and then

584
00:25:38,550 --> 00:25:40,709
told the engineers to remove everything that wasn't needed.

585
00:25:40,900 --> 00:25:42,790
And they basically ended up with a simplified nuclear

586
00:25:42,800 --> 00:25:45,000
reactor with a giant pool of water above it.

587
00:25:45,010 --> 00:25:45,420
And like,

588
00:25:45,849 --> 00:25:47,910
-- you know, three valves in parallel.
-- Right.

589
00:25:47,920 --> 00:25:50,030
I mean, yes, that, that's exactly correct

590
00:25:50,329 --> 00:25:52,270
because gravity almost never fails.

591
00:25:52,959 --> 00:25:56,390
No. Seriously. That was the reasoning. It's like pumps, pumps fail all the time.

592
00:25:56,410 --> 00:25:58,849
So let's put the water tank above the nuclear reactor.

593
00:25:59,040 --> 00:26:00,750
And the, and the managers are like,

594
00:26:01,160 --> 00:26:03,949
oh, that makes it a lot cheaper too. They're like, yeah, no more pumps.

595
00:26:04,199 --> 00:26:05,969
And, and I mean, I agree with this.

596
00:26:05,979 --> 00:26:06,869
I think this is,

597
00:26:06,880 --> 00:26:09,660
these are fine examples of the old saying what

598
00:26:09,670 --> 00:26:12,119
I think it was as Brian Kernigan who said,

599
00:26:12,130 --> 00:26:14,349
you know, it's twice as hard to debug code.

600
00:26:14,359 --> 00:26:16,569
So if you write code as cleverly as possible,

601
00:26:16,579 --> 00:26:18,869
you by definition are unable to debug it.

602
00:26:18,880 --> 00:26:21,270
And this is the same thing like when you are

603
00:26:21,280 --> 00:26:24,439
dealing with some of these issues in C code now,

604
00:26:24,449 --> 00:26:28,025
it is probably 10 times harder to understand these

605
00:26:28,035 --> 00:26:29,954
security bugs than it is to write them,

606
00:26:29,964 --> 00:26:31,765
maybe even 100 times.

607
00:26:31,775 --> 00:26:33,035
-- Oh, easily.
-- No, no, no.

608
00:26:33,045 --> 00:26:34,844
It's provably hundreds,

609
00:26:34,854 --> 00:26:38,265
if not thousands of times easier to write the bugs than it is to understand them.

610
00:26:38,535 --> 00:26:39,185
That's fair.

611
00:26:39,194 --> 00:26:43,145
How many security researchers on the planet can properly explain this, not us.

612
00:26:43,155 --> 00:26:47,064
No, I and I, you know, I would put us in the top percent and I,

613
00:26:47,295 --> 00:26:50,425
but I know I'm not smart enough to explain this properly.

614
00:26:50,435 --> 00:26:53,334
It's super difficult just because it's,

615
00:26:53,650 --> 00:26:56,829
you have to, I mean, it comes back to like that whole Feynman thing.

616
00:26:56,839 --> 00:26:58,430
Can you explain how magnets work?

617
00:26:58,439 --> 00:27:01,390
You know, and I'm going to tell a story about slipping on ice and then, no, I can't.

618
00:27:01,400 --> 00:27:02,689
It's like what just happened

619
00:27:03,459 --> 00:27:05,560
pretty much. That's, that's what my response is.

620
00:27:05,680 --> 00:27:06,219
I,

621
00:27:06,560 --> 00:27:07,910
I use Python.

622
00:27:07,920 --> 00:27:11,550
-- That's my solution to this is I'm just not smart enough to write anything and
-- see,

623
00:27:11,560 --> 00:27:12,750
I would disagree with that.

624
00:27:12,760 --> 00:27:13,319
Like,

625
00:27:13,479 --> 00:27:15,550
it, it's just, it's so, it's,

626
00:27:15,959 --> 00:27:17,050
I feel like

627
00:27:17,150 --> 00:27:18,750
someone says, how does this bug work?

628
00:27:18,760 --> 00:27:22,790
And it's like, do you understand the Von Neumann architecture of computing?

629
00:27:22,800 --> 00:27:23,574
And they're probably like, I

630
00:27:23,675 --> 00:27:25,494
don't know what any of the words you just said are.

631
00:27:25,704 --> 00:27:26,005
Well,

632
00:27:26,135 --> 00:27:28,864
yeah, even that is a great point. You know, we have this

633
00:27:29,165 --> 00:27:33,915
the infamous schism of, well, maybe we should separate data and control.

634
00:27:34,244 --> 00:27:37,364
-- It seems complicated. It's
-- expensive. This is much easier.

635
00:27:37,885 --> 00:27:37,895
I

636
00:27:38,064 --> 00:27:38,305
know,

637
00:27:38,574 --> 00:27:38,675
I

638
00:27:38,775 --> 00:27:39,604
know, I know

639
00:27:40,864 --> 00:27:42,125
it's just this is

640
00:27:42,734 --> 00:27:47,005
and this is not even, I'll be blunt, these aren't even the truly complicated bugs.

641
00:27:47,015 --> 00:27:48,525
Like when you start looking at side channel

642
00:27:48,535 --> 00:27:51,185
stuff where you have hardware branch prediction,

643
00:27:51,194 --> 00:27:52,385
interacting with crypto

644
00:27:52,515 --> 00:27:53,324
code, it's like

645
00:27:53,829 --> 00:27:57,199
just I'm going to believe whatever the security researcher wrote because I can't,

646
00:27:57,500 --> 00:27:59,959
it's not that I can't even validate it. It's I'm

647
00:28:00,060 --> 00:28:03,130
smart enough to know that I probably don't fully understand it.

648
00:28:03,400 --> 00:28:05,290
-- And
-- this is already crazy complicated.

649
00:28:05,300 --> 00:28:09,300
And these, you're right, like the bug Tavis found just because of how it works.

650
00:28:09,310 --> 00:28:13,599
It is an infinitely more simple heap overflow than some other stuff.

651
00:28:13,609 --> 00:28:16,589
But it's still crazy complicated which now, now I have,

652
00:28:16,599 --> 00:28:19,250
I guess two things to add to that is number one,

653
00:28:19,420 --> 00:28:22,045
they goodness we have progressed

654
00:28:22,275 --> 00:28:25,305
the technologies we use to the point that

655
00:28:25,444 --> 00:28:30,234
you are basically, we're in the realm of like ridiculous, crazy bugs, right? Where

656
00:28:30,334 --> 00:28:34,755
-- the simple ones are gone because we fixed,
-- most of them are gone. Well,

657
00:28:34,765 --> 00:28:35,175
most of them.

658
00:28:35,185 --> 00:28:35,875
But you know what I mean?

659
00:28:36,250 --> 00:28:39,219
Like we fixed a lot of these problems through

660
00:28:39,229 --> 00:28:41,670
libraries and compiler options and all this stuff.

661
00:28:41,680 --> 00:28:43,689
And that is amazing and fantastic.

662
00:28:43,729 --> 00:28:45,869
But now I think on the second side of it is like,

663
00:28:45,920 --> 00:28:48,339
we also have better languages for this stuff.

664
00:28:48,349 --> 00:28:51,349
Like honestly, some of this stuff needs to go.

665
00:28:51,670 --> 00:28:53,229
It just, it does.

666
00:28:53,260 --> 00:28:57,125
What's really fascinating to me is you look at the writing on the wall where,

667
00:28:57,135 --> 00:28:58,854
well you read the tea leaves with Microsoft and

668
00:28:58,864 --> 00:29:01,305
Rust and it's pretty clear that they're tired.

669
00:29:01,505 --> 00:29:02,685
They're just as tired of Mac

670
00:29:02,895 --> 00:29:05,765
-- of patch Tuesday as we are.
-- Yeah, seriously.

671
00:29:05,775 --> 00:29:08,354
And not only that, I mean, I honestly,

672
00:29:08,364 --> 00:29:11,285
I bet there just aren't a lot of c programmers around anymore.

673
00:29:11,295 --> 00:29:15,055
-- Well, at
-- that level of expertise needed because that's the thing, right? I mean,

674
00:29:15,234 --> 00:29:17,435
to, to have somebody come in and start

675
00:29:17,834 --> 00:29:20,314
interacting with the window, like a source space,

676
00:29:20,324 --> 00:29:22,005
like the Linux kernel or the Windows

677
00:29:22,459 --> 00:29:24,810
kernel or the Windows user space.

678
00:29:24,819 --> 00:29:29,369
That's, I can't even imagine how many years of education and training,

679
00:29:29,380 --> 00:29:31,729
you need to properly understand that code,

680
00:29:31,739 --> 00:29:34,609
let alone make changes to it safely and correctly.

681
00:29:34,619 --> 00:29:38,819
-- It's hard for sure, for sure.
-- And they're all getting old and dying and retiring.

682
00:29:38,829 --> 00:29:41,569
Thank goodness, finally get something nice.

683
00:29:42,719 --> 00:29:44,250
All right. Anyway, I'm, I'm going to call this.

684
00:29:44,260 --> 00:29:46,280
We've been, we've been rambling on, I guess

685
00:29:46,599 --> 00:29:48,390
I will end this just with the,

686
00:29:48,859 --> 00:29:49,920
don't you? See,

687
00:29:50,170 --> 00:29:51,180
that's all

688
00:29:51,319 --> 00:29:51,760
like,

689
00:29:51,939 --> 00:29:55,040
-- just don't
-- and consider maybe using something like

690
00:29:55,420 --> 00:29:57,880
rust to start to replace your c co

691
00:29:58,130 --> 00:30:02,280
-- literally
-- anything else. Cart, the answer is literally anything but c

692
00:30:02,540 --> 00:30:04,800
because, and I'm not talking about from a security point of view,

693
00:30:04,810 --> 00:30:07,640
but from an actual sort of project management,

694
00:30:08,239 --> 00:30:11,020
if you can do a renovation of your house

695
00:30:11,189 --> 00:30:14,939
by slowly replacing things rather than having to rip half your house apart,

696
00:30:15,219 --> 00:30:18,599
-- that's probably going to be more successful, especially in software
-- terms.

697
00:30:18,609 --> 00:30:19,979
The house of

698
00:30:20,530 --> 00:30:20,709
Theseus.

699
00:30:21,000 --> 00:30:24,760
Yeah, exactly. The House of Theseus with respect to say something like rust and see

700
00:30:24,930 --> 00:30:25,439
where

701
00:30:25,569 --> 00:30:26,599
it's actually,

702
00:30:26,810 --> 00:30:30,040
it's achievable to do this kind of rewrite.

703
00:30:30,229 --> 00:30:32,239
Whereas you pick a different language

704
00:30:32,599 --> 00:30:34,800
and start a complete whole new rewrite something

705
00:30:34,920 --> 00:30:34,949
else.

706
00:30:35,449 --> 00:30:36,319
That's your,

707
00:30:36,489 --> 00:30:40,199
I mean, remember when Mozilla Firefox, you know, they almost died.

708
00:30:40,479 --> 00:30:42,780
Every major rewrite I've ever seen has,

709
00:30:42,790 --> 00:30:45,599
has either killed the company or organization or been

710
00:30:46,449 --> 00:30:47,579
life altering,

711
00:30:47,699 --> 00:30:49,920
-- terrible
-- for them. Yeah, I mean, you are correct.

712
00:30:49,930 --> 00:30:51,709
II, I do agree with that,

713
00:30:51,780 --> 00:30:53,140
-- but maybe
-- that's part of the answer is to

714
00:30:53,150 --> 00:30:56,760
have these languages like rust that are not only safer

715
00:30:57,010 --> 00:30:58,640
but give you the ship of Theseus

716
00:30:58,900 --> 00:30:59,719
because here's the thing,

717
00:30:59,880 --> 00:31:03,800
we're asking you to fix the ship while you're underway in a storm.

718
00:31:05,109 --> 00:31:07,609
And I'd like you to swap the engine out for something better, please.

719
00:31:07,819 --> 00:31:09,869
And the engineer is kind of like he's not Scotty.

720
00:31:10,239 --> 00:31:10,660
Right.

721
00:31:11,630 --> 00:31:14,930
-- You know, if it was Scotty, we'd be fine.
-- It's true. It's true. We would.

722
00:31:15,010 --> 00:31:17,729
That's right. Take two hours. All right. Anyway, I'm calling it.

723
00:31:17,739 --> 00:31:21,930
That's, this is a good one. Thank you everyone for listening to you, Kurt.

724
00:31:21,939 --> 00:31:22,709
You can go to open

725
00:31:22,819 --> 00:31:23,979
social security podcast.com head.

726
00:31:24,380 --> 00:31:27,739
It's Suzy Pound. Oh, it says podcast hashtag do hit us up on social media.

727
00:31:27,750 --> 00:31:30,290
Kurt have a fantastic rest of your day.

728
00:31:30,439 --> 00:31:33,359
You too. Thanks everybody. Thanks everybody. Bye bye

729
00:31:37,869 --> 00:31:37,930
the