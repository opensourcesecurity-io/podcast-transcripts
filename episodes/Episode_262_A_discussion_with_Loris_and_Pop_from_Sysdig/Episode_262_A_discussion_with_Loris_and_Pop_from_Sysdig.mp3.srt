0
00:00:05,739 --> 00:00:08,810
Hello and welcome to the open source security podcast with myself,

1
00:00:08,819 --> 00:00:10,720
Kurt Siefried and my partner in Thought Crime.

2
00:00:10,729 --> 00:00:11,470
Josh Bresser.

3
00:00:12,189 --> 00:00:14,930
I am so excited. We have two guests today, both from Sisig.

4
00:00:15,579 --> 00:00:16,840
We are joined with

5
00:00:17,040 --> 00:00:17,520
Loris de

6
00:00:17,879 --> 00:00:19,069
Joani, founder of Sisig

7
00:00:19,920 --> 00:00:24,299
and Dan Papandrea, the director of open source community and ecosystem.

8
00:00:24,500 --> 00:00:25,280
Gentlemen,

9
00:00:25,430 --> 00:00:28,639
I, I love Sisig. I'm so excited. You're here. Welcome.

10
00:00:29,590 --> 00:00:31,239
Thank you. Thanks for having us

11
00:00:31,569 --> 00:00:33,029
all. We should clarify. That is Lori

12
00:00:33,849 --> 00:00:36,720
who just spoke and Dan, why don't you say hi. So everyone knows who we are.

13
00:00:36,860 --> 00:00:38,389
Hello, everyone. This is Dan Pop,

14
00:00:38,549 --> 00:00:38,729
Andrea.

15
00:00:38,840 --> 00:00:39,970
People call me pop.

16
00:00:40,080 --> 00:00:44,180
I just realized we've never had two guests before. So this is like this is a new thing.

17
00:00:44,189 --> 00:00:46,990
I have to make sure we understand who's saying what? Anyway. Anyway, welcome,

18
00:00:47,259 --> 00:00:49,599
Loris. Why don't you tell us what is, what is Sig

19
00:00:50,060 --> 00:00:50,319
sig

20
00:00:50,479 --> 00:00:52,270
is the security ops company.

21
00:00:52,279 --> 00:00:56,909
We are in a leader in visibility and security for modern infrastructures,

22
00:00:56,919 --> 00:00:59,619
especially the ones based on containers, Coor

23
00:00:59,729 --> 00:01:03,290
natives and cloud. We offer a product

24
00:01:03,423 --> 00:01:06,962
that covers the life cycle of modern

25
00:01:07,133 --> 00:01:09,642
software applications starting from the bill phase,

26
00:01:09,873 --> 00:01:13,892
run and run time security and then respond in terms of forensics

27
00:01:14,002 --> 00:01:14,703
and

28
00:01:15,373 --> 00:01:21,462
-- we've been around for quite a bit and we are still having fun.
-- That's, that's so cool.

29
00:01:21,472 --> 00:01:24,233
And so, Dan, why don't you tell us what, what do you do at sig

30
00:01:24,462 --> 00:01:26,962
What is, what is the director of open source and community?

31
00:01:26,972 --> 00:01:30,523
I just write loss coattails for the majority of the time is what I do.

32
00:01:30,532 --> 00:01:32,883
No, but seriously. So I

33
00:01:32,996 --> 00:01:36,886
work with the community ecosystem with some of our open source projects.

34
00:01:36,896 --> 00:01:39,045
Some of them you might know of one's called Falco,

35
00:01:39,055 --> 00:01:43,255
which is AC NCF based project for runtime Behavioral analysis,

36
00:01:43,265 --> 00:01:45,625
outputs rules engine, that type of thing.

37
00:01:45,636 --> 00:01:48,926
And it's the basis for, for a lot of our,

38
00:01:48,935 --> 00:01:52,685
a lot of our open sources is the basis for our larger commercial products.

39
00:01:52,695 --> 00:01:55,975
But also like we have a large vibrant community that's contributing, you know,

40
00:01:55,986 --> 00:01:57,615
integrations to various things.

41
00:01:57,625 --> 00:01:59,666
And there's something called Falco sidekick, for instance,

42
00:01:59,676 --> 00:02:02,486
allows you to output to many different sources like a slack

43
00:02:02,800 --> 00:02:05,019
page of duty, you know, those types of things.

44
00:02:05,029 --> 00:02:07,800
So really cool ecosystem, very vibrant

45
00:02:07,919 --> 00:02:09,149
for runtime security.

46
00:02:09,160 --> 00:02:11,589
And uh you know, it's, it's awesome being like, you know,

47
00:02:11,600 --> 00:02:14,960
something like a very much like a de facto runtime engine for K

48
00:02:15,320 --> 00:02:15,440
Benetti.

49
00:02:15,490 --> 00:02:20,330
I wanna, I wanna clarify first because I don't, if anyone hasn't heard of Falco, it is

50
00:02:20,509 --> 00:02:21,800
like magic.

51
00:02:21,979 --> 00:02:25,520
The thing is freaking amazing and, and I will, let's see if I get this right.

52
00:02:25,529 --> 00:02:27,199
Just because I, I enjoy

53
00:02:27,509 --> 00:02:31,520
making sure I, I maybe still have the skills we'll say in the industry.

54
00:02:31,789 --> 00:02:32,750
So Falco

55
00:02:33,039 --> 00:02:36,210
is essentially a tool that uses EB PF the,

56
00:02:36,220 --> 00:02:39,020
what is E is it enhanced Berkeley packet filter?

57
00:02:39,029 --> 00:02:42,130
Is that what the E stands for? OK. I don't, I don't remember anymore.

58
00:02:42,149 --> 00:02:47,220
But anyway, it's basically EB PF to watch containers running on a host and then Falco

59
00:02:47,339 --> 00:02:50,970
has the ability to watch for behavior and then, I mean,

60
00:02:50,979 --> 00:02:53,979
functionally just like shut the container down and

61
00:02:54,199 --> 00:02:57,070
the state and then you can obviously do inspection on

62
00:02:57,080 --> 00:02:59,289
that later and make sure like nothing bad is happening.

63
00:02:59,460 --> 00:03:03,649
Yes. When describing Falco, typically, I

64
00:03:03,830 --> 00:03:05,889
compare it to

65
00:03:06,080 --> 00:03:07,889
something like a security camera

66
00:03:08,190 --> 00:03:10,279
for your containerized infrastructures.

67
00:03:10,500 --> 00:03:15,470
So Falco, you deploy Falco on a host, the host can run

68
00:03:15,600 --> 00:03:16,410
one

69
00:03:16,869 --> 00:03:19,550
or 1000 containers, it doesn't matter. Falco

70
00:03:19,690 --> 00:03:21,919
thanks to the EVPF that you are describing

71
00:03:22,250 --> 00:03:25,089
is deployed in a safe way

72
00:03:25,589 --> 00:03:30,229
in in the kernel of the operating system because Eebpf allows you to essentially

73
00:03:30,240 --> 00:03:34,860
add functionality in terms of safe scripts to the kernel of the operating system.

74
00:03:34,869 --> 00:03:36,309
At the point, Falco is able to see

75
00:03:36,589 --> 00:03:41,309
what happens inside any of the containers as a set of rules and policies

76
00:03:42,039 --> 00:03:48,619
that are essentially created by the community to let you know when something

77
00:03:49,130 --> 00:03:50,220
is not right?

78
00:03:50,449 --> 00:03:54,580
To give you an example, somebody is spawning a share in your red container

79
00:03:54,800 --> 00:03:57,699
or somebody is trying to

80
00:03:57,949 --> 00:04:02,630
exfiltrate a file or somebody is trying to modify a system binary.

81
00:04:02,639 --> 00:04:06,210
These are examples of things that Falco is able

82
00:04:06,220 --> 00:04:10,039
to automatically detect and then Falco can either inform you

83
00:04:10,169 --> 00:04:14,509
or take action and help you essentially rectify the problem.

84
00:04:14,639 --> 00:04:15,619
-- It's
-- so cool.

85
00:04:15,630 --> 00:04:18,010
It's, I got to say this one thing coming from the history of, you know,

86
00:04:18,019 --> 00:04:19,540
25 years of Linux security

87
00:04:20,040 --> 00:04:24,119
trying to watch a system for bad behavior was always

88
00:04:24,350 --> 00:04:25,739
to put it bluntly a nightmare.

89
00:04:26,089 --> 00:04:30,290
And what always kind of annoyed me is the one thing all attacks have in common since,

90
00:04:30,299 --> 00:04:31,829
well, the last 30 years is

91
00:04:31,980 --> 00:04:32,899
the network,

92
00:04:33,369 --> 00:04:33,660
right?

93
00:04:33,670 --> 00:04:35,029
Because like if you pop a system,

94
00:04:35,040 --> 00:04:37,359
then you have to do something on the network

95
00:04:37,369 --> 00:04:39,739
either for command and control that filtrate data.

96
00:04:39,750 --> 00:04:42,420
And I was always so frustrated that yeah, there,

97
00:04:42,429 --> 00:04:45,730
there were generally not great tools to handle this.

98
00:04:46,160 --> 00:04:50,079
Think about that at scale with multiple nodes, right? Think about taking that,

99
00:04:50,260 --> 00:04:52,630
you know, single cluster, then you do multi cluster, right?

100
00:04:52,640 --> 00:04:57,290
And so like again that finite thing that's there is that is the kernel, right?

101
00:04:57,299 --> 00:05:00,290
Being able to reverse those things. And you're looking at this person,

102
00:05:00,570 --> 00:05:05,869
Loris who's been doing this for X amount of years, he's the he is the god of,

103
00:05:05,880 --> 00:05:07,760
I'm going to call it right now of,

104
00:05:08,355 --> 00:05:08,934
you know,

105
00:05:09,084 --> 00:05:11,644
kernel level introspection. I told you I was a side

106
00:05:11,774 --> 00:05:13,065
player. That's what I do on these things.

107
00:05:13,325 --> 00:05:13,894
That's all

108
00:05:14,505 --> 00:05:15,274
actually K

109
00:05:15,524 --> 00:05:19,225
since we are talking about the network, let's do it 30 seconds of Easter

110
00:05:19,684 --> 00:05:25,945
Falco, as we just mentioned, is based on collecting system calls, uh actually Falco

111
00:05:26,114 --> 00:05:27,635
uh and also open

112
00:05:27,765 --> 00:05:27,845
source,

113
00:05:28,125 --> 00:05:30,105
the tool that gave the name to our company

114
00:05:30,339 --> 00:05:32,420
are inspired by the fact that

115
00:05:32,609 --> 00:05:36,950
I spent the 1st 15 years of my career, just dealing with network packets,

116
00:05:36,959 --> 00:05:40,600
including my phd thesis was about high speed packet capture.

117
00:05:40,609 --> 00:05:44,920
And what we do with Falco and with CD is we apply

118
00:05:44,929 --> 00:05:48,734
essentially the same techniques that you use to use with network packets.

119
00:05:49,024 --> 00:05:50,315
But to system calls, why?

120
00:05:50,325 --> 00:05:53,524
Because system calls are closer to the application are richer.

121
00:05:53,535 --> 00:05:57,154
They of course, when you capture a system call, you see all of the socket activity.

122
00:05:57,165 --> 00:05:59,945
So you see the network traffic exactly like you were describing

123
00:06:00,135 --> 00:06:03,575
but much more follow your user activity, inter process communication,

124
00:06:03,584 --> 00:06:04,454
all this kind of stuff.

125
00:06:04,880 --> 00:06:05,720
At the same time,

126
00:06:05,730 --> 00:06:11,070
Falco has been inspired by network intrusion detection tools like snort

127
00:06:11,220 --> 00:06:11,529
or

128
00:06:11,630 --> 00:06:11,779
surat

129
00:06:12,010 --> 00:06:16,679
who remembers nor you know, where you could create policies on the network traffic,

130
00:06:16,690 --> 00:06:21,279
you know, and essentially with snort, what what you are doing is you are capturing,

131
00:06:21,500 --> 00:06:23,720
you still are you are capturing packets.

132
00:06:23,890 --> 00:06:25,079
And there are rules that are saying,

133
00:06:25,089 --> 00:06:30,480
I don't know if the packet is an IP address is coming from, I have no idea Afghanistan

134
00:06:30,760 --> 00:06:35,329
and and the payload contains a PDF but then matches a PERL

135
00:06:35,440 --> 00:06:37,660
script, then send me an alert, you know,

136
00:06:37,670 --> 00:06:41,220
Falco can do the same but on a much broader data set because it uses

137
00:06:41,230 --> 00:06:44,559
system calls and it's able to tap inside the kernel of the operating system.

138
00:06:44,570 --> 00:06:46,579
But the philosophy is the same.

139
00:06:46,589 --> 00:06:48,899
So this comes from my days, you know, working,

140
00:06:48,910 --> 00:06:51,570
working with network packets and trying to apply, you know,

141
00:06:51,579 --> 00:06:56,279
the same techniques to more modern cloud based container based infrastructure.

142
00:06:56,290 --> 00:06:57,500
But the philosophy is the same.

143
00:06:57,950 --> 00:07:00,089
Well, it's funny you mention that because I remember, you know,

144
00:07:00,100 --> 00:07:03,859
when networks were 10 megabit 100 megabit gigabit, 10 gigabit

145
00:07:04,100 --> 00:07:07,220
and just the ridiculous amount of engineering effort.

146
00:07:07,230 --> 00:07:09,179
And I I actually knew the snort team back in the day

147
00:07:09,299 --> 00:07:12,690
and like the amount of effort they put into supporting gigabit was insane.

148
00:07:12,829 --> 00:07:14,000
But you know, it's funny,

149
00:07:14,010 --> 00:07:16,730
I've never really given it much thought about system calls and system

150
00:07:16,739 --> 00:07:21,200
calls are easily firing off at higher rates than that potentially.

151
00:07:21,209 --> 00:07:24,149
Yes, because you are not, again,

152
00:07:24,160 --> 00:07:26,859
you are seeing potentially all of the network traffic

153
00:07:27,179 --> 00:07:32,130
because each network transfer generates some activity on a, on a,

154
00:07:32,140 --> 00:07:35,559
on a socket related system called but imagine

155
00:07:35,709 --> 00:07:36,070
file

156
00:07:36,500 --> 00:07:36,510
a

157
00:07:36,649 --> 00:07:40,959
yo you know, on a on a busy database. You know, you can really have a ton of

158
00:07:41,230 --> 00:07:44,179
IOPS and each of these operations on this.

159
00:07:44,739 --> 00:07:50,040
The beauty is that with the like the B PE BPF kind of system that we have,

160
00:07:50,049 --> 00:07:51,040
you can see all of them.

161
00:07:51,049 --> 00:07:54,920
So you can really see and reconstruct, for example, what somebody saved

162
00:07:55,200 --> 00:07:56,440
to this

163
00:07:56,549 --> 00:08:01,450
maybe after a container is gone, which is beautiful, you know, and very powerful.

164
00:08:01,459 --> 00:08:03,890
At the same time, it's a ton of traffic.

165
00:08:03,899 --> 00:08:05,500
So I'm sure we cannot,

166
00:08:05,510 --> 00:08:07,529
we don't have a chance to go into the technical

167
00:08:07,540 --> 00:08:10,000
details of what we do essentially to make this,

168
00:08:10,179 --> 00:08:12,579
you know, digestible and bearable for a tool like Falco.

169
00:08:12,589 --> 00:08:14,209
But there's a lot of engineering

170
00:08:14,399 --> 00:08:16,619
that is going on to make sure that

171
00:08:16,630 --> 00:08:19,890
you can capture this information at these rates without

172
00:08:20,190 --> 00:08:23,250
impacting the system to watch because they are supposed to

173
00:08:23,369 --> 00:08:24,880
operate at one time, right?

174
00:08:24,980 --> 00:08:30,160
A lot of these is actually inspired by the work that myself and the team

175
00:08:30,170 --> 00:08:35,619
have done in the past in terms of capturing on gigabit 10 gigabit 40 gigabit

176
00:08:36,058 --> 00:08:36,929
gigabit. So

177
00:08:37,400 --> 00:08:38,330
E software

178
00:08:38,510 --> 00:08:41,770
in a way that is optimized and it still works,

179
00:08:41,780 --> 00:08:45,520
think about the trajectory of like containers and

180
00:08:45,530 --> 00:08:46,869
pods and all those things that have,

181
00:08:47,260 --> 00:08:49,789
these are black boxes, they're literally,

182
00:08:49,895 --> 00:08:52,835
there's no way to really get that introspection. Then you confound that by

183
00:08:53,075 --> 00:08:55,575
like we talked about earlier, multiple clusters,

184
00:08:56,114 --> 00:08:58,715
you know, clusters that have, you know, different like, you know,

185
00:08:58,724 --> 00:09:00,835
deployment mechanisms, all of those things.

186
00:09:00,844 --> 00:09:03,114
What you one thing that's always been the standard

187
00:09:03,385 --> 00:09:05,505
underneath all of that is it always has to be a

188
00:09:05,515 --> 00:09:08,434
kernel or some type of OS that's running those system calls,

189
00:09:08,445 --> 00:09:09,364
that's allowing you

190
00:09:09,505 --> 00:09:12,445
to create rules to be able to do those things. And so

191
00:09:12,554 --> 00:09:15,255
with the, you know, the technology that, you know, that lori

192
00:09:15,395 --> 00:09:19,494
you know, that Lori had obviously a huge hand in kind of, you know, putting together,

193
00:09:19,780 --> 00:09:20,960
helps to, you know,

194
00:09:20,969 --> 00:09:24,700
mitigate some of those runtime security risks and all those types of things.

195
00:09:24,710 --> 00:09:27,330
So again, we've seen it from the, you know, the community,

196
00:09:27,340 --> 00:09:28,880
folks kind of adhering to it.

197
00:09:28,890 --> 00:09:34,880
We've just did a major, major contribution to the C NCF of these driving Libs.

198
00:09:34,890 --> 00:09:35,880
So folks can, you know,

199
00:09:35,890 --> 00:09:38,880
utilize this because we totally believe that the future security

200
00:09:38,984 --> 00:09:41,465
open, we want to make sure that we can, you know,

201
00:09:41,474 --> 00:09:43,984
attack those things and people to address them.

202
00:09:43,994 --> 00:09:47,164
Let's talk about what you guys just donated to the C

203
00:09:47,195 --> 00:09:51,664
NCF because this feels enormous when I read your press release,

204
00:09:51,674 --> 00:09:54,844
essentially this technology that we just described

205
00:09:54,854 --> 00:09:58,114
to capture system calls at high speed.

206
00:09:58,450 --> 00:10:04,059
This this is more or less if we summarize what we donated. So initially

207
00:10:04,219 --> 00:10:05,950
Falco was contributed

208
00:10:06,150 --> 00:10:11,630
to the CNCF as the engine, which is a really powerful and substantial piece of work.

209
00:10:11,640 --> 00:10:15,549
It's essentially what notification part and the engine part of the,

210
00:10:15,559 --> 00:10:16,869
of the flight recording.

211
00:10:16,880 --> 00:10:17,200
But

212
00:10:17,309 --> 00:10:20,030
the actual data capture, we weren't

213
00:10:20,210 --> 00:10:22,669
able yet to contribute to the

214
00:10:22,775 --> 00:10:26,614
NCF because there were there were other open source tools, for example,

215
00:10:26,625 --> 00:10:27,674
like open sources,

216
00:10:27,765 --> 00:10:29,474
which is more like the T CPD for system

217
00:10:29,484 --> 00:10:31,794
calls that were also depending on this library.

218
00:10:31,804 --> 00:10:35,364
So we managed to essentially separate properly these components

219
00:10:35,375 --> 00:10:39,534
so that now the libraries can be independently located.

220
00:10:39,655 --> 00:10:44,554
And then since these libraries are a super powerful and high performance tool

221
00:10:44,804 --> 00:10:46,275
to build

222
00:10:46,974 --> 00:10:46,984
a

223
00:10:47,340 --> 00:10:54,460
any kind of, you know, security and invisibility software that, that needs to, to,

224
00:10:54,549 --> 00:10:56,969
to support containers and microservices.

225
00:10:57,130 --> 00:11:02,239
We decided why not making the real step and contributing them to the community,

226
00:11:02,250 --> 00:11:07,419
to the CCNCF community where they can really, first of all, have a neutral

227
00:11:07,750 --> 00:11:08,770
governance,

228
00:11:09,130 --> 00:11:10,979
uh they can be owned by everybody

229
00:11:11,179 --> 00:11:15,130
and then can and they can be really the base

230
00:11:15,140 --> 00:11:18,869
of many future tools because as them was saying,

231
00:11:19,119 --> 00:11:23,950
the future of security in our opinion is, is open and this is

232
00:11:24,090 --> 00:11:26,710
the way for us to put our money where our mouth is.

233
00:11:26,739 --> 00:11:28,130
And then yeah, you were talking about this.

234
00:11:28,234 --> 00:11:31,974
Sure, you have something to add on the future of security is open.

235
00:11:31,984 --> 00:11:36,265
-- So
-- in general, the way that we look at it, if you think of internal or external actors,

236
00:11:36,275 --> 00:11:37,854
right, like, you know, there's been, you know,

237
00:11:37,864 --> 00:11:40,705
vulnerabilities or CVE based on like pseudo for instance,

238
00:11:40,895 --> 00:11:45,875
having a community in the world contributing right back to be able to, you know,

239
00:11:46,044 --> 00:11:48,614
address those things, be able to detect those things.

240
00:11:48,940 --> 00:11:50,659
It's been huge, think about things like Miter

241
00:11:50,760 --> 00:11:51,599
attack framework.

242
00:11:51,609 --> 00:11:54,190
I'll give you a good example, a very large investment bank for instance,

243
00:11:54,200 --> 00:11:56,659
wanted to create these rule sets based on the Miter Attack framework.

244
00:11:56,669 --> 00:11:58,659
There was nothing out there to be able to do that

245
00:11:59,000 --> 00:11:59,690
at the time.

246
00:11:59,700 --> 00:12:04,580
And so using like, you know, a very simple rule syntax that we have within, within,

247
00:12:04,799 --> 00:12:07,979
within Falco to be able to detect those things.

248
00:12:07,989 --> 00:12:09,840
They were able to create like 26 sets,

249
00:12:09,849 --> 00:12:13,200
26 specific rules in a matter of like a week and a half's time.

250
00:12:13,489 --> 00:12:16,630
So that tells you, you know, again, where and then those things were contributed to,

251
00:12:16,640 --> 00:12:21,030
you know, other folks in the, in the industry or in our community, then would,

252
00:12:21,039 --> 00:12:22,390
you know, add more to that.

253
00:12:22,400 --> 00:12:25,820
So think about this instead of having something where you have a bunch of, you know,

254
00:12:25,830 --> 00:12:27,400
a single set of researchers looking for

255
00:12:27,409 --> 00:12:30,679
something you have multiple companies versus researchers

256
00:12:30,849 --> 00:12:33,469
being able to, to detect things.

257
00:12:33,780 --> 00:12:33,789
Uh

258
00:12:33,929 --> 00:12:36,500
and, and in the past, like you said, if he's a vulnerability,

259
00:12:36,510 --> 00:12:37,669
you'd have to send it to the,

260
00:12:37,809 --> 00:12:38,039
to

261
00:12:38,140 --> 00:12:38,729
Linux's

262
00:12:38,890 --> 00:12:40,429
mailing glass to be able to dress this with

263
00:12:40,440 --> 00:12:42,570
things like EBPF and those types of things.

264
00:12:42,580 --> 00:12:43,359
It's like, wow,

265
00:12:43,460 --> 00:12:43,960
it's

266
00:12:44,479 --> 00:12:47,679
that, is that the spirit of that is beautiful and that's what I think, you know,

267
00:12:47,690 --> 00:12:48,570
community is based.

268
00:12:48,580 --> 00:12:49,559
And if you look at like, you

269
00:12:49,770 --> 00:12:51,719
know, Kernes or some of the other CNCF projects,

270
00:12:51,969 --> 00:12:57,179
I think security has to play a very large part in, in, in, in community based things.

271
00:12:57,190 --> 00:12:58,309
And if we open that

272
00:12:58,539 --> 00:13:00,809
open the kimono, so to speak, if that's even said,

273
00:13:00,919 --> 00:13:05,380
it's the only way to really have true security. So I'm, I'm curious, do you know

274
00:13:05,520 --> 00:13:07,549
what your percentage of like

275
00:13:07,809 --> 00:13:08,489
cystic

276
00:13:08,650 --> 00:13:12,260
generated rules versus community generated rules is,

277
00:13:12,440 --> 00:13:14,500
it's hard to measure because

278
00:13:14,679 --> 00:13:16,369
cystic behaves

279
00:13:16,489 --> 00:13:17,830
from this point of view, like,

280
00:13:17,840 --> 00:13:20,770
like any other member of the community that's very important Falco,

281
00:13:20,940 --> 00:13:25,289
you know, even the, I don't know, the security researchers inside CD

282
00:13:25,419 --> 00:13:26,229
that maybe then

283
00:13:26,349 --> 00:13:30,010
as part of what they do sometimes create Falco

284
00:13:30,179 --> 00:13:33,659
rules, these are still trying to do it in a way that is,

285
00:13:33,669 --> 00:13:36,080
that involves participating to the community.

286
00:13:36,640 --> 00:13:39,419
And that means that pretty much all of the Falco

287
00:13:39,590 --> 00:13:42,020
rules that are around

288
00:13:42,150 --> 00:13:42,690
you,

289
00:13:42,799 --> 00:13:45,450
you get them, you know, as a community.

290
00:13:45,460 --> 00:13:48,869
But I would say that nowadays is like the majority

291
00:13:49,049 --> 00:13:50,909
of, of the activity in

292
00:13:51,059 --> 00:13:53,030
Falco including including rules.

293
00:13:53,039 --> 00:13:55,510
It's coming from community members and not and

294
00:13:55,520 --> 00:13:57,309
not and not from the company specifically.

295
00:13:57,349 --> 00:13:57,679
-- That
-- is so

296
00:13:57,719 --> 00:13:58,140
cool.

297
00:13:58,150 --> 00:14:02,270
Well, and it's just because for myself, you know, being cloud native,

298
00:14:02,280 --> 00:14:04,059
one of the things I find really interesting is, you know,

299
00:14:04,070 --> 00:14:05,419
we're making that shift from

300
00:14:05,669 --> 00:14:09,900
hardware to V MS to containers now to serverless.

301
00:14:09,909 --> 00:14:13,789
And what I'm seeing the majority of security solutions fail

302
00:14:13,799 --> 00:14:17,409
miserably in a serverless environment because they make assumptions like

303
00:14:17,780 --> 00:14:20,469
I have a system to live on and well, now they don't.

304
00:14:20,700 --> 00:14:23,059
And what's interesting my understanding is because

305
00:14:23,070 --> 00:14:24,239
I was reading through the press release.

306
00:14:24,250 --> 00:14:25,169
Can you tell us about pet?

307
00:14:25,900 --> 00:14:31,440
Yeah. So this is an effort that we undertook during 2020.

308
00:14:31,450 --> 00:14:37,090
The another beautiful side of security being open source is that

309
00:14:37,250 --> 00:14:41,349
you can work together with the cloud providers, right?

310
00:14:41,359 --> 00:14:44,320
Because the cloud providers are incentivized to

311
00:14:44,330 --> 00:14:47,880
have this powerful open source solutions,

312
00:14:47,890 --> 00:14:49,309
especially in security, you know,

313
00:14:49,320 --> 00:14:51,489
when security is so important and covering the basis

314
00:14:51,500 --> 00:14:54,710
even in this new place and a completely open

315
00:14:55,080 --> 00:14:58,010
community driven engine like Falco

316
00:14:58,479 --> 00:15:04,380
is suitable essentially for them to include in their solution. So what happened is

317
00:15:04,500 --> 00:15:07,900
an environment like for example, Fargate where there's,

318
00:15:07,909 --> 00:15:10,570
I mean there still is an operating system underneath

319
00:15:10,799 --> 00:15:13,940
but the instrument, the instrumentation is not exposed to that,

320
00:15:13,950 --> 00:15:16,909
you need to find essentially alternative ways to collect this.

321
00:15:17,700 --> 00:15:22,960
And what happened is Amazon worked on enabling a technology called

322
00:15:23,190 --> 00:15:23,479
prays,

323
00:15:23,840 --> 00:15:26,320
which is essentially the same technology that is used.

324
00:15:26,330 --> 00:15:29,159
It is in the Linux kernel and it is used to implement both

325
00:15:29,789 --> 00:15:34,250
rays and G DB and they enabled it on far gate so that it's

326
00:15:34,260 --> 00:15:38,919
possible essentially to go and introspect applications in a way that is still safe.

327
00:15:39,109 --> 00:15:39,219
Pray

328
00:15:39,359 --> 00:15:43,830
is much less a performance than EB PF.

329
00:15:43,859 --> 00:15:47,909
In fact, you know, tools like strays are famously extremely slow.

330
00:15:47,960 --> 00:15:51,619
So these require to do quite a bit of creative work essentially to

331
00:15:51,630 --> 00:15:57,380
bring it to a performance level that is acceptable to have deep instrumentation

332
00:15:57,650 --> 00:15:59,820
and still have the performance being

333
00:15:59,929 --> 00:16:01,390
in the overhead being

334
00:16:01,690 --> 00:16:02,500
contained.

335
00:16:03,130 --> 00:16:07,900
And this is what we did essentially together with the community during 2020.

336
00:16:07,960 --> 00:16:11,609
And now you can essentially run

337
00:16:12,179 --> 00:16:12,270
Falco

338
00:16:12,400 --> 00:16:19,640
on, on Fargate and magically it works and the performance is acceptable.

339
00:16:19,719 --> 00:16:22,109
And we are also working

340
00:16:22,289 --> 00:16:24,409
at the same time on further optimizations to make the

341
00:16:24,419 --> 00:16:27,409
performance pretty much almost indistinguishable

342
00:16:27,419 --> 00:16:29,369
from the original Falco performance.

343
00:16:29,380 --> 00:16:33,450
I think we took our time because we want to ensure the end users and customers, right,

344
00:16:33,460 --> 00:16:37,070
don't have performance issues because there's, you know, look serverless as a,

345
00:16:37,080 --> 00:16:41,169
as a paradigm, right is basically like I run my program and I get out

346
00:16:41,460 --> 00:16:43,909
now if you run your program and there's no, you know,

347
00:16:43,919 --> 00:16:46,260
the security is adding a ton of overhead to that,

348
00:16:46,690 --> 00:16:48,760
then what's the benefit of it? Right.

349
00:16:48,770 --> 00:16:50,669
Then go back to V and container where it's where it looks,

350
00:16:50,679 --> 00:16:52,309
we again took our time with the,

351
00:16:52,320 --> 00:16:54,940
with the functionality of P trades to make this optimal.

352
00:16:54,950 --> 00:16:58,229
And we'll continue to do that hearing feedback from the community.

353
00:16:58,239 --> 00:16:59,859
That's really cool because

354
00:17:00,460 --> 00:17:03,979
I think history shows, if the security tool

355
00:17:04,108 --> 00:17:05,348
hurts, performance,

356
00:17:05,608 --> 00:17:07,589
performance went right. Like, just turn it off.

357
00:17:07,598 --> 00:17:09,400
Look how fast it is now, this is way better.

358
00:17:09,979 --> 00:17:10,598
Like

359
00:17:10,780 --> 00:17:11,199
just take an

360
00:17:11,530 --> 00:17:12,060
antivirus.

361
00:17:12,630 --> 00:17:12,868
Yeah.

362
00:17:12,959 --> 00:17:15,540
You know, like in the past on your, on your machine, it's like, oh, well,

363
00:17:15,550 --> 00:17:18,000
if this is impacting the fact that I can't play, you know,

364
00:17:18,010 --> 00:17:20,329
World of Warcraft for God's sakes, why do I disable it?

365
00:17:20,339 --> 00:17:20,640
Right.

366
00:17:21,348 --> 00:17:26,648
I had a coworker call me and, uh, his, uh, brother-in-law or whatever has a computer

367
00:17:26,858 --> 00:17:28,918
but, and I quote, his son

368
00:17:29,098 --> 00:17:31,759
turned off the antivirus and installed a bunch of cheat programs and

369
00:17:31,769 --> 00:17:34,119
now it runs really slow and has problems and I'm like,

370
00:17:34,129 --> 00:17:34,409
yep.

371
00:17:34,418 --> 00:17:35,889
It probably does.

372
00:17:36,418 --> 00:17:38,038
It's like, what should we do? And I'm like,

373
00:17:38,399 --> 00:17:42,249
-- it has internet syphilis. I don't know what you can do.
-- Buy a new computer.

374
00:17:42,328 --> 00:17:43,168
That's how you saw

375
00:17:45,119 --> 00:17:45,989
Run and Hide

376
00:17:47,660 --> 00:17:49,229
because, I mean, well, and that's, and the

377
00:17:49,400 --> 00:17:52,180
well ignoring performance, like, if

378
00:17:52,300 --> 00:17:54,500
you try and tell, like,

379
00:17:54,510 --> 00:17:57,510
a bunch of devs to spend a month adding this security

380
00:17:57,520 --> 00:17:59,630
thing and make it work and it doesn't want to work.

381
00:17:59,640 --> 00:18:01,540
You know, that's what I ran into with Ac Linux, right?

382
00:18:01,550 --> 00:18:03,719
Trying to sell Se Linux to vendors and they're like,

383
00:18:03,729 --> 00:18:07,790
so you want me to like break it and then we'll spend like a month trying to make it work.

384
00:18:08,660 --> 00:18:12,729
-- That is not a winning strategy in
-- terms of the Se Linux part. That's a great point.

385
00:18:12,739 --> 00:18:14,290
It's like, look, you can have, you know,

386
00:18:14,300 --> 00:18:18,189
set of Se Linux set in force to zero which the majority of us do, right?

387
00:18:18,199 --> 00:18:19,319
But I'm just saying in general,

388
00:18:19,329 --> 00:18:23,130
if you're adhering to good Se Linux kind of etiquette where you have a, you know,

389
00:18:23,140 --> 00:18:27,180
default set of profile that you've set up, that's exactly what we've done with,

390
00:18:27,189 --> 00:18:28,609
with, with Falcon rule sets.

391
00:18:28,619 --> 00:18:30,569
We have this default set that's going to, you know,

392
00:18:30,579 --> 00:18:32,869
give you kind of the best of the best and then

393
00:18:32,880 --> 00:18:35,810
you can extend that and say for my own use cases,

394
00:18:36,239 --> 00:18:39,209
my own use. This is what needs to be addressed.

395
00:18:39,219 --> 00:18:41,949
If you think about any tool that's out there is going to have,

396
00:18:41,959 --> 00:18:44,479
you have a lot of false positives,

397
00:18:44,660 --> 00:18:44,689
right?

398
00:18:44,699 --> 00:18:46,459
You're going to get a bunch of rule violations because you

399
00:18:46,469 --> 00:18:50,489
have to tweak said rules for your environment or your,

400
00:18:50,500 --> 00:18:52,079
you know, capabilities, your applications,

401
00:18:52,089 --> 00:18:54,449
your serverless technology and all of those types of things,

402
00:18:54,719 --> 00:18:56,540
you have the capability in your falco and

403
00:18:56,550 --> 00:18:59,119
even our commercial tool extends it even further.

404
00:18:59,130 --> 00:19:02,140
So there's a ui behind it, there's capabilities for, you know,

405
00:19:02,150 --> 00:19:04,439
extent abilities for vulnerability management,

406
00:19:04,449 --> 00:19:06,750
incident response and all of those types of things.

407
00:19:06,979 --> 00:19:07,949
But you know, again,

408
00:19:07,959 --> 00:19:11,229
it's all based on that kind of rules engine that's very similar

409
00:19:11,239 --> 00:19:13,939
to Lake and Se Linux where you can basically say here's my

410
00:19:14,219 --> 00:19:14,819
line

411
00:19:14,979 --> 00:19:18,739
and if I need to customize it, I can do it by creating profiles or rules.

412
00:19:18,750 --> 00:19:20,719
So this is really interesting, you say that.

413
00:19:20,959 --> 00:19:24,449
So in the past when I would turn Falco on you, you,

414
00:19:25,089 --> 00:19:27,589
you turn it on and it works, right?

415
00:19:27,880 --> 00:19:30,699
And I feel like in the past when I turned E Linux on,

416
00:19:30,709 --> 00:19:32,630
things would just explode and I'd give up.

417
00:19:32,780 --> 00:19:34,390
And I think that's a huge difference, right?

418
00:19:34,400 --> 00:19:38,430
Because if I'm a new user and I turn it on and it explodes well, screw that I'm done.

419
00:19:38,439 --> 00:19:42,670
-- You know, that's huge.
-- That was actually by design.

420
00:19:42,890 --> 00:19:45,270
There are things that you can do even just in the,

421
00:19:45,280 --> 00:19:49,180
in the design of the tool or just how you

422
00:19:49,189 --> 00:19:54,189
approach essentially the problem that can reduce essentially these issues

423
00:19:54,430 --> 00:19:56,930
when I when I was, for example,

424
00:19:56,939 --> 00:20:00,420
describing Falco before I was comparing it more to a flight recorder.

425
00:20:00,609 --> 00:20:03,160
Of course, Falco is the option, you know,

426
00:20:03,170 --> 00:20:07,569
to then enforce and block stuff and integrate, you know,

427
00:20:07,579 --> 00:20:09,530
with admission controllers and that kind of stuff.

428
00:20:09,579 --> 00:20:11,180
But it's important that

429
00:20:11,569 --> 00:20:13,569
that is left as a feature

430
00:20:14,010 --> 00:20:15,599
for advanced users.

431
00:20:15,609 --> 00:20:18,650
It's not the default behavior because you don't know which system

432
00:20:18,910 --> 00:20:26,010
you, you, you, you go into, you know, as a tool. And if the trade of insecurity is,

433
00:20:26,439 --> 00:20:27,969
of course, it's important to,

434
00:20:28,300 --> 00:20:31,630
to insecurity to, you know, shoot before,

435
00:20:31,640 --> 00:20:35,020
before you let somebody talk because because that's the essence of security.

436
00:20:35,030 --> 00:20:37,170
But if you do it too much and if you are too aggressive,

437
00:20:37,459 --> 00:20:41,170
then you run the risk of shooting a random person on the street, you know,

438
00:20:41,719 --> 00:20:46,209
and so philosophically starting with a simple rule set that is extremely curated,

439
00:20:46,219 --> 00:20:48,280
starting with detection and only going with

440
00:20:48,290 --> 00:20:50,160
prevention with people that really understand it and

441
00:20:50,170 --> 00:20:54,969
want to do it having a mechanism by which the user can start with a,

442
00:20:54,979 --> 00:20:59,839
with a rule set that is a little bit safer even if maybe a little bit less complete,

443
00:20:59,849 --> 00:21:03,099
but it's good to go and then gradually and turn stuff

444
00:21:03,109 --> 00:21:06,319
on and see what happens if they desire to do that.

445
00:21:06,329 --> 00:21:10,500
They were all choices that we, that we designed that way to, yeah, reduce

446
00:21:10,709 --> 00:21:12,380
if possible a little bit.

447
00:21:12,390 --> 00:21:17,579
The Sc Linux kind of fatigue, you know, that people clearly were showing.

448
00:21:17,619 --> 00:21:21,500
I love that. I think that makes perfect sense. We got all types of love for Sc Linux.

449
00:21:21,579 --> 00:21:22,410
Don't think we're, you know, v

450
00:21:22,670 --> 00:21:27,130
it's great. Oh, it's all right. We make fun of Sc Linux all the time. You're fine.

451
00:21:27,209 --> 00:21:29,010
We love it. But,

452
00:21:29,319 --> 00:21:32,540
yeah, I, I think, yeah. And just to be clear, me and Josh don't hate,

453
00:21:32,739 --> 00:21:34,439
uh, se Linux. Uh, it's just,

454
00:21:34,589 --> 00:21:37,380
I think we're both frustrated by it because it shows

455
00:21:37,390 --> 00:21:40,339
so much potential and it has so much potential,

456
00:21:40,349 --> 00:21:43,079
not just for security related issues, but for,

457
00:21:43,280 --> 00:21:44,739
you know, reporting and whatnot and,

458
00:21:44,750 --> 00:21:47,819
and it just the interface and the tools for it are just

459
00:21:47,949 --> 00:21:49,540
non existent for sure.

460
00:21:49,949 --> 00:21:50,579
C

461
00:21:51,369 --> 00:21:51,880
was

462
00:21:52,130 --> 00:21:56,405
indeed a big inspiration for us, uh you know, the Falco community

463
00:21:56,545 --> 00:21:58,214
and, and Falco developers.

464
00:21:58,224 --> 00:22:01,714
So we need to also give credit, you know, not only, not only complain about it, but

465
00:22:01,895 --> 00:22:02,305
uh

466
00:22:02,604 --> 00:22:07,525
uh definitely one thing I've been in the industry now for, for quite a bit.

467
00:22:07,535 --> 00:22:10,395
And one thing that I learned is that you never invent stuff.

468
00:22:10,405 --> 00:22:15,094
If you, if you think you are inventing stuff, it's because you are uh you know, not,

469
00:22:15,719 --> 00:22:17,459
not good enough at remembering

470
00:22:18,540 --> 00:22:21,260
and, and, and, and taking inspiration and just trying to

471
00:22:21,650 --> 00:22:26,020
improve the previous generation is really the best way innovation

472
00:22:26,140 --> 00:22:26,170
in

473
00:22:26,369 --> 00:22:28,560
software. And as I was mentioning, you know, Falco,

474
00:22:28,849 --> 00:22:31,050
you can really see it as Sc Linux

475
00:22:31,339 --> 00:22:34,689
plus snort open source is big.

476
00:22:35,010 --> 00:22:36,189
It is more like A

477
00:22:36,380 --> 00:22:36,400
T

478
00:22:36,510 --> 00:22:36,780
CPD

479
00:22:37,439 --> 00:22:37,630
and the

480
00:22:37,790 --> 00:22:39,699
clin looks together, you know. So it's like T CPD

481
00:22:39,810 --> 00:22:42,410
for system calls and for system events, frustrating tools.

482
00:22:42,420 --> 00:22:44,849
But we, we would not be here without them,

483
00:22:45,030 --> 00:22:47,579
you know, 100%. That's, that's a very good way to put it.

484
00:22:47,890 --> 00:22:48,619
OK. OK.

485
00:22:48,630 --> 00:22:52,229
We are, we, we, we're running ourselves out of time, which always seems to happen.

486
00:22:52,239 --> 00:22:53,520
I have so much more I want to ask, but

487
00:22:53,640 --> 00:22:57,050
I actually have one thing I'm really curious about is is on your website,

488
00:22:57,060 --> 00:22:59,839
you have an infographic and let me, let me look at the title a bit quick.

489
00:22:59,849 --> 00:23:01,099
I could pull it up in a tab,

490
00:23:01,380 --> 00:23:05,199
a container security and usage snapshot. This blew my mind.

491
00:23:05,209 --> 00:23:10,040
You guys said like half of containers live for, what is it? Five minutes or less?

492
00:23:10,050 --> 00:23:11,030
That's bananas.

493
00:23:11,170 --> 00:23:15,640
-- Yeah,
-- that, that's a high percentage that lasts for less than 10 seconds, you know.

494
00:23:15,650 --> 00:23:17,819
So, yeah, a lot of churn

495
00:23:18,180 --> 00:23:20,000
because from what I've seen, basically, there's,

496
00:23:20,010 --> 00:23:22,290
there's really two types of people using containers.

497
00:23:22,300 --> 00:23:23,599
There's the people who use it

498
00:23:23,890 --> 00:23:25,439
as a virtual machine replacement.

499
00:23:25,449 --> 00:23:28,569
And then there's the people who use it properly and the people who use it properly,

500
00:23:28,579 --> 00:23:30,410
of course, are going to skew the numbers because they're going to

501
00:23:30,900 --> 00:23:32,959
like they're gonna like Netflix, they're gonna be,

502
00:23:33,119 --> 00:23:35,589
they're using it at scale properly, right. Whereas

503
00:23:35,689 --> 00:23:39,640
little people like us, like I have containers that were running for way too long.

504
00:23:39,880 --> 00:23:40,790
I'm just going to say

505
00:23:43,310 --> 00:23:44,939
world record

506
00:23:45,569 --> 00:23:48,040
and I ran Foodora once in production for four years,

507
00:23:48,750 --> 00:23:49,030
the same

508
00:23:49,699 --> 00:23:50,979
-- everything
-- is fine, you know,

509
00:23:51,589 --> 00:23:52,800
it was behind the firewall

510
00:23:53,010 --> 00:23:56,699
when when describing containers especially, you know, to,

511
00:23:56,709 --> 00:24:02,219
to people that maybe are not part of this industry, I typically extend the

512
00:24:02,489 --> 00:24:05,959
metaphor of a pet versus cattle,

513
00:24:06,420 --> 00:24:08,390
right? You remember that one to

514
00:24:08,609 --> 00:24:14,689
describe cloud cloud computing in modern cloud instances, people compare them

515
00:24:14,900 --> 00:24:19,790
to cattle while the traditional monolithic servers were pets

516
00:24:19,930 --> 00:24:24,280
that you were really treating individually and really you cared about them.

517
00:24:24,290 --> 00:24:28,390
Now, the cloud instances are behind a lot of balancers and you treat them as a group.

518
00:24:28,400 --> 00:24:29,319
And if you lose one,

519
00:24:29,579 --> 00:24:33,964
it it it it's not a huge deal because they behave more like a group of entities, right?

520
00:24:34,244 --> 00:24:40,074
Well, containers to me are are like going from kettle to locust to a swarm of locust,

521
00:24:40,234 --> 00:24:41,734
you know, they are tiny,

522
00:24:41,944 --> 00:24:44,574
they are very fast, they are everywhere.

523
00:24:44,584 --> 00:24:49,135
It's very hard if impossible to keep track of them individually.

524
00:24:49,295 --> 00:24:51,954
And if you are not careful about what to do, they do a lot of them,

525
00:24:52,454 --> 00:24:52,994
you know.

526
00:24:53,989 --> 00:24:54,689
So,

527
00:24:54,699 --> 00:24:58,369
so we're in the locust era and this infographic essentially

528
00:24:58,380 --> 00:25:01,099
-- proves that
-- if you think about DEV ops functions get

529
00:25:01,270 --> 00:25:05,410
ops functions, right? I mean, the speed and resiliency that that's happening.

530
00:25:05,420 --> 00:25:07,180
I mean, looking at an infographic,

531
00:25:07,189 --> 00:25:09,890
it completely makes sense as you see people shifting their

532
00:25:09,900 --> 00:25:14,000
workloads to more of this very quick resilient deployment mechanism.

533
00:25:14,010 --> 00:25:15,900
So your CD processes and get

534
00:25:16,229 --> 00:25:19,449
s and all of those whatever buzz terms you're hearing and what have you,

535
00:25:19,810 --> 00:25:23,630
those are things they're going to, they're going to be much more like shorter term,

536
00:25:23,640 --> 00:25:26,020
you know, containers or pods or those types of things.

537
00:25:26,050 --> 00:25:29,060
You're always going to have, you know, state full applications that may, you know,

538
00:25:29,069 --> 00:25:32,589
that, that, you know, stays in from a data store perspective.

539
00:25:32,689 --> 00:25:36,310
But think about again is I'm doing releases constantly.

540
00:25:36,319 --> 00:25:39,479
And also you need protection from that perspective. You need as laws

541
00:25:39,599 --> 00:25:41,060
talked about in the beginning. You need

542
00:25:41,290 --> 00:25:43,949
the build, you need the the the run,

543
00:25:43,959 --> 00:25:48,260
you need the post mortem for those like things that are happening at a millisecond.

544
00:25:48,400 --> 00:25:51,430
And again, it is our belief, strong belief

545
00:25:51,650 --> 00:25:55,550
that the only place you are able to get to that like low, low level from like a cus

546
00:25:55,839 --> 00:25:56,510
perspective, from

547
00:25:56,699 --> 00:25:56,750
a

548
00:25:56,920 --> 00:25:58,750
perspective is in the kernel.

549
00:25:58,880 --> 00:26:04,750
And that's what we do with not only our open source tool but our commercial platform,

550
00:26:04,760 --> 00:26:05,729
which I mean,

551
00:26:06,209 --> 00:26:10,150
the thing that really blows my brain here more than anything is that

552
00:26:10,609 --> 00:26:15,319
a lot of your antivirus and various anti malware tools,

553
00:26:15,329 --> 00:26:17,949
they take more than 10 seconds to start like the

554
00:26:17,959 --> 00:26:21,420
container's gone before they even know what's going on.

555
00:26:21,430 --> 00:26:24,699
And you cannot replay those commands that were happening

556
00:26:24,709 --> 00:26:26,920
during those periods to say what that caused this.

557
00:26:27,140 --> 00:26:29,780
Laura said this once again, Godfather.

558
00:26:29,790 --> 00:26:33,619
So basically like the he said this, that the kernel doesn't lie.

559
00:26:33,630 --> 00:26:34,869
System calls do not lie.

560
00:26:35,390 --> 00:26:39,680
And it's, and I've said this in countless end user and customer meetings.

561
00:26:39,689 --> 00:26:44,239
I've said this. It is one of the greatest quotes ever because it's completely true.

562
00:26:44,359 --> 00:26:46,869
There's no other place that's going to give you those short term

563
00:26:46,880 --> 00:26:49,959
and long term detail that the system calls mcconnell will give you.

564
00:26:49,969 --> 00:26:51,890
That sounds like it could be famous last words if

565
00:26:51,900 --> 00:26:53,979
someone like Tavis Ormandy gets a hold of it.

566
00:26:53,989 --> 00:26:54,449
So,

567
00:26:55,959 --> 00:26:57,900
but, but anyway, anyway,

568
00:26:58,020 --> 00:27:02,479
OK. OK. So I guess we've not talked, what is your commercial offering?

569
00:27:02,489 --> 00:27:03,680
You know, let's end the show on that.

570
00:27:03,689 --> 00:27:06,010
Like I honestly don't even know cause I've only ever

571
00:27:06,020 --> 00:27:09,199
interacted with Falco from kind of the community perspective.

572
00:27:09,209 --> 00:27:10,229
So I'm curious like what is sig

573
00:27:10,430 --> 00:27:11,369
actually doing?

574
00:27:11,530 --> 00:27:12,150
Like how are you,

575
00:27:12,160 --> 00:27:15,599
-- how are you feeding your family
-- our commercial offering builds

576
00:27:15,609 --> 00:27:18,060
on top of the technology that we've just described.

577
00:27:18,069 --> 00:27:19,459
So collecting

578
00:27:19,630 --> 00:27:20,540
the best data

579
00:27:20,675 --> 00:27:22,145
kernel of the operating system,

580
00:27:22,155 --> 00:27:25,954
open source engines like the CD one and the Falco one and so on.

581
00:27:26,204 --> 00:27:28,655
But, but what we offer is a platform,

582
00:27:28,665 --> 00:27:31,364
we mentioned a couple of times build runner response.

583
00:27:31,375 --> 00:27:32,074
What does it mean

584
00:27:32,234 --> 00:27:36,055
in the build phase? You need to be able to essentially do shift left security

585
00:27:36,165 --> 00:27:39,905
scanning the images validating configurations, all of this kind of stuff.

586
00:27:39,915 --> 00:27:43,255
So our commercial tool does that by

587
00:27:43,425 --> 00:27:44,895
employing

588
00:27:45,760 --> 00:27:48,119
an open source engine, the anchor

589
00:27:48,219 --> 00:27:52,589
engine and being able to plug it in the different areas of the CIC

590
00:27:52,910 --> 00:27:55,579
pipeline of people building modern applications.

591
00:27:55,689 --> 00:28:00,819
Then on runtime, there's a, there's a big focus on Falco but we offer workflows,

592
00:28:00,829 --> 00:28:05,119
user interfaces, orchestration of the agent poly secure,

593
00:28:05,410 --> 00:28:07,969
all of this kind of stuff on top of the Falco engine.

594
00:28:07,979 --> 00:28:12,770
And then at the response phase, we are able like every time, for example, Falco,

595
00:28:13,060 --> 00:28:15,060
the flight recorder gives you

596
00:28:15,329 --> 00:28:20,599
uh a uh an an alert that something has happened.

597
00:28:20,770 --> 00:28:24,640
We are able to take action, we are able to collect the data.

598
00:28:25,030 --> 00:28:28,069
We are able to take captures similar to water

599
00:28:28,209 --> 00:28:30,780
shark captures to allow you to do

600
00:28:30,790 --> 00:28:33,300
the forensics and retrospective and threat hunting,

601
00:28:33,310 --> 00:28:33,569
right?

602
00:28:33,650 --> 00:28:38,119
So how do you understand an attack for a container that last five seconds,

603
00:28:38,189 --> 00:28:41,859
the way you do it is you are able to take a full capture of the full activity,

604
00:28:41,869 --> 00:28:44,650
every file iy every connection, all of this kind of stuff.

605
00:28:44,660 --> 00:28:47,989
The moment before and after the container is gone

606
00:28:48,000 --> 00:28:50,099
and everything in the middle and we store it

607
00:28:50,109 --> 00:28:52,500
somewhere and then we give you a essentially forensics

608
00:28:52,510 --> 00:28:54,645
tools that you can use to go and investigate.

609
00:28:54,666 --> 00:28:55,715
That's how you solve the problem.

610
00:28:55,735 --> 00:28:56,615
That's the only way, you know,

611
00:28:56,625 --> 00:28:59,355
because you cannot take a sage into the container anymore,

612
00:28:59,365 --> 00:29:00,576
you're guaranteed it's gone.

613
00:29:00,656 --> 00:29:04,776
So this old workflow that starts from the ship left and goes to the forensics.

614
00:29:04,826 --> 00:29:08,786
It's part of a unified workflows in our commercial

615
00:29:08,796 --> 00:29:11,885
tool that is the source of puts everything together

616
00:29:12,206 --> 00:29:12,926
and there's

617
00:29:13,026 --> 00:29:15,196
a bunch of enterprise features so that the biggest

618
00:29:15,615 --> 00:29:20,125
organizations in the world are able to take advantage of this functionality.

619
00:29:20,135 --> 00:29:22,115
I'll add a couple of points too, right?

620
00:29:22,156 --> 00:29:25,011
And look anybody off the shelf can do some of the capabilities.

621
00:29:25,021 --> 00:29:27,852
You know, again, you have this, this whole rules engine, you know,

622
00:29:27,862 --> 00:29:31,781
core engine and you have outputs that you can, you know, use Falco with

623
00:29:31,932 --> 00:29:33,432
you add vulnerability management as

624
00:29:33,582 --> 00:29:35,092
you add incident response,

625
00:29:35,102 --> 00:29:37,761
you add all of those capabilities but also an enter like an

626
00:29:37,771 --> 00:29:40,151
enterprise S A to be able to support that for you.

627
00:29:40,161 --> 00:29:43,501
So you don't, you can concentrate on building your applications, right?

628
00:29:43,511 --> 00:29:47,592
That to me is, is a benefit not having to support a just a security system,

629
00:29:47,602 --> 00:29:49,682
be able to just support your applications that are

630
00:29:49,692 --> 00:29:51,682
running inside clouds and all those types of things.

631
00:29:51,979 --> 00:29:56,410
So again, as the open source lead, I want to see people contribute because again,

632
00:29:56,849 --> 00:29:58,569
the commercial tool

633
00:29:58,739 --> 00:30:01,420
and Falco all use that underlying

634
00:30:01,599 --> 00:30:02,910
same beating heart,

635
00:30:03,380 --> 00:30:06,520
right? It's using that same kernel canal functionality that's there.

636
00:30:06,589 --> 00:30:10,699
And and so having the the capability for somebody just

637
00:30:10,709 --> 00:30:11,839
to be able to say look off the shelf,

638
00:30:11,849 --> 00:30:13,650
I just need to do you know runtime capability.

639
00:30:13,660 --> 00:30:15,449
That's great. Go ahead and use Falco.

640
00:30:15,459 --> 00:30:16,959
But if you need a full platform,

641
00:30:16,969 --> 00:30:19,310
the way you do a security platform from a

642
00:30:19,319 --> 00:30:21,880
runtime perspective from the build from the post mortem,

643
00:30:22,150 --> 00:30:24,650
then you go with a commercial tool that's on as SASS,

644
00:30:24,660 --> 00:30:26,739
you don't have to worry about managing a back end or

645
00:30:26,750 --> 00:30:30,770
any of that thing that is the compelling event for wanting,

646
00:30:30,780 --> 00:30:31,689
you know, a commercial tool.

647
00:30:31,699 --> 00:30:33,219
But again, you have a far,

648
00:30:33,229 --> 00:30:35,750
far high set of capabilities with Falco that

649
00:30:35,760 --> 00:30:38,689
you can utilize from a runtime security perspective.

650
00:30:39,290 --> 00:30:41,890
We have run ourselves out of time,

651
00:30:42,300 --> 00:30:43,599
but this was

652
00:30:43,819 --> 00:30:47,079
a lovely conversation. So I want to thank you both for joining us.

653
00:30:47,280 --> 00:30:47,829
Thank you.

654
00:30:48,770 --> 00:30:52,359
I will put links to everything we've talked about in

655
00:30:52,369 --> 00:30:54,719
the show notes for anyone who's looking for it.

656
00:30:54,729 --> 00:30:55,310
So I guess yes,

657
00:30:55,319 --> 00:30:58,229
you can go to open source security podcast.com and find those show notes.

658
00:30:58,239 --> 00:30:58,640
You can use the

659
00:30:58,979 --> 00:31:00,119
Podos podcast. Hashtag

660
00:31:00,339 --> 00:31:05,439
-- hit us up on social media. Dan and Loris have marvelous rest of your days. You
-- too.

661
00:31:05,449 --> 00:31:06,160
And thank you.

662
00:31:06,489 --> 00:31:08,219
-- Thanks for having us.
-- Thanks everybody.

663
00:31:08,229 --> 00:31:10,030
Wonderful. Thanks, everyone. Bye bye

664
00:31:14,729 --> 00:31:14,819
the