0
00:00:05,519 --> 00:00:07,949
Hello and welcome to an encrypted copy of

1
00:00:07,960 --> 00:00:10,149
the open source security podcast with myself,

2
00:00:10,159 --> 00:00:10,850
Kurt Siefried

3
00:00:11,029 --> 00:00:12,960
and my partner in Thought Crime, Josh Bresser.

4
00:00:13,239 --> 00:00:17,510
This is definitely not encryption. You could maybe call it stenography

5
00:00:17,829 --> 00:00:19,379
but not encryption.

6
00:00:19,440 --> 00:00:23,110
Well, no, I mean that it's served over http S usually, hopefully,

7
00:00:23,120 --> 00:00:25,270
-- mostly I think it
-- always is.

8
00:00:25,280 --> 00:00:30,790
-- I don't know if you can access the MP3 over HTTP I, I could check that.
-- But

9
00:00:30,930 --> 00:00:32,400
so we're going to talk about,

10
00:00:32,534 --> 00:00:35,435
there's a really interesting article and thread on hacker news about

11
00:00:35,724 --> 00:00:40,415
API S should not redirect http to HTTP S

12
00:00:41,244 --> 00:00:41,915
and

13
00:00:42,334 --> 00:00:46,314
it's, it's actually a really interesting statement because it's actually quite

14
00:00:46,625 --> 00:00:48,424
complicated and complex.

15
00:00:48,735 --> 00:00:49,294
Is it,

16
00:00:50,145 --> 00:00:51,294
don't do it?

17
00:00:51,525 --> 00:00:52,034
Well,

18
00:00:52,354 --> 00:00:54,834
let's start by defining things a bit. So first of all, we have

19
00:00:55,165 --> 00:00:59,634
http back in the olden days, which did not give a font to encryption

20
00:00:59,860 --> 00:01:04,900
because encryption was like for those weird GP G people who had keys signing parties

21
00:01:05,029 --> 00:01:07,239
that were kind of strange and a little bit

22
00:01:07,360 --> 00:01:07,650
saucy

23
00:01:08,650 --> 00:01:10,190
and encryption was on

24
00:01:10,690 --> 00:01:14,349
cod computationally expensive at the time because it's not like your CPU had

25
00:01:14,889 --> 00:01:16,199
des capability.

26
00:01:16,459 --> 00:01:18,519
-- It
-- was slower.

27
00:01:18,849 --> 00:01:20,739
Like if you wanted to encrypt

28
00:01:21,449 --> 00:01:23,819
network traffic. You needed a multi

29
00:01:24,309 --> 00:01:27,440
CPU system notice, I didn't say multicore. We weren't there yet,

30
00:01:27,980 --> 00:01:28,910
you know, I mean,

31
00:01:29,970 --> 00:01:31,889
and encryption accelerators existed,

32
00:01:31,900 --> 00:01:34,959
that was the thing you could buy a PC I card that had an encryption chip

33
00:01:35,739 --> 00:01:35,769
right

34
00:01:35,940 --> 00:01:37,440
-- now. It's just built into your CP
-- U.

35
00:01:37,650 --> 00:01:40,760
Well, and the other, the more important aspect of it is

36
00:01:41,169 --> 00:01:43,120
the original SSL

37
00:01:43,379 --> 00:01:46,239
was patent encumbered in the United States.

38
00:01:46,870 --> 00:01:47,910
And so that, I mean,

39
00:01:47,919 --> 00:01:50,779
this is really where like you had the RS A library and you had

40
00:01:50,790 --> 00:01:54,739
open SSL and like open SSL was technically not legal in the United States,

41
00:01:54,750 --> 00:01:56,419
which we all still used it.

42
00:01:57,019 --> 00:01:57,989
That was not

43
00:01:58,290 --> 00:01:59,599
technically Kosher.

44
00:02:00,129 --> 00:02:02,550
So then along came HTTP S

45
00:02:03,099 --> 00:02:04,919
with a little bit of security on the end.

46
00:02:05,720 --> 00:02:12,320
But the problem is even today 25 whatever, 20 a long time later, a lot of years,

47
00:02:12,339 --> 00:02:14,690
a lot of stuff still kind of defaults to

48
00:02:14,699 --> 00:02:18,740
-- trying HTTP first and then trying http
-- si mean,

49
00:02:18,750 --> 00:02:23,559
I generally type Http into my web browser and then the web browser

50
00:02:23,929 --> 00:02:25,919
magically does the right thing.

51
00:02:26,050 --> 00:02:28,639
And so originally there was,

52
00:02:28,869 --> 00:02:31,160
there was kind of no way to force people to use http.

53
00:02:31,210 --> 00:02:36,350
Yes, short of putting a redirect on the HTTP site saying, you know, I'm not,

54
00:02:36,399 --> 00:02:37,309
I'm not here anymore.

55
00:02:37,320 --> 00:02:39,289
Go to http SF

56
00:02:39,570 --> 00:02:41,210
slash slash C free.org

57
00:02:41,669 --> 00:02:43,110
and the web browser,

58
00:02:43,399 --> 00:02:46,880
people kind of quickly realize that doesn't work because by definition,

59
00:02:46,889 --> 00:02:49,550
if somebody is doing a man in the middle attack

60
00:02:49,559 --> 00:02:52,350
or has the ability to sniff or manipulate the traffic.

61
00:02:52,580 --> 00:02:53,110
They

62
00:02:53,240 --> 00:02:54,580
simply don't

63
00:02:54,729 --> 00:02:56,550
serve that header back to you.

64
00:02:57,580 --> 00:02:59,380
So you stay at HTTP

65
00:02:59,880 --> 00:03:00,880
and you know,

66
00:03:00,910 --> 00:03:03,789
and like literally like logging into my bank was like you went to

67
00:03:03,800 --> 00:03:07,240
HTTP and clicked a login link that went to the secure website.

68
00:03:07,250 --> 00:03:07,619
Well,

69
00:03:08,119 --> 00:03:09,630
if there was a man in the middle,

70
00:03:09,639 --> 00:03:12,740
they would just rewrite that button to not go to HTTP S just

71
00:03:13,190 --> 00:03:17,919
keep going. Http. So we had this thing added called HSTS,

72
00:03:18,029 --> 00:03:23,179
-- right, which stands for what
-- http strict transport security

73
00:03:23,619 --> 00:03:25,029
and all HS

74
00:03:25,173 --> 00:03:30,833
TS is, is a fancy way of saying literally only access this website

75
00:03:31,003 --> 00:03:34,404
over http S for the following amount of time and

76
00:03:34,414 --> 00:03:36,813
then you'd give a list like a number of seconds and

77
00:03:38,283 --> 00:03:39,664
yeah, like a year or whatever.

78
00:03:39,904 --> 00:03:44,393
But there's one sentence in the RFC that has caused so much grief. OK.

79
00:03:44,563 --> 00:03:50,473
5.1 HSTS host declaration, an http host declares itself an HSTS host

80
00:03:50,578 --> 00:03:53,358
by issuing to UAs user agents,

81
00:03:53,628 --> 00:03:56,707
an HSTS policy which is represented by

82
00:03:56,718 --> 00:03:58,578
and conveyed via the strict transport security.

83
00:03:58,587 --> 00:04:02,087
Http response header field over secure transport, egtls

84
00:04:02,587 --> 00:04:05,638
upon air free receipt and processing of this header by a Conformant U A,

85
00:04:05,647 --> 00:04:08,108
the U A regards this host as a known HSTS host.

86
00:04:08,117 --> 00:04:11,427
So it's basically saying that you serve the HSTS header

87
00:04:11,438 --> 00:04:14,317
to the user agent and then it assuming it's correct,

88
00:04:14,638 --> 00:04:15,878
the user agent is supposed to.

89
00:04:16,421 --> 00:04:18,902
Now the question. What can the HSTS

90
00:04:19,111 --> 00:04:23,131
-- header be served
-- over? Can it be served over? Http? I actually don't know

91
00:04:24,131 --> 00:04:27,002
because I didn't, you can't say wrong. I asked you a question.

92
00:04:27,011 --> 00:04:30,191
That's the thing is I just read it out to you. Did you not listen?

93
00:04:30,451 --> 00:04:32,712
Yes, Kurt, I obviously did not listen.

94
00:04:32,832 --> 00:04:34,861
That word salad. You read

95
00:04:35,152 --> 00:04:37,941
it says over secure transport, egtls?

96
00:04:38,212 --> 00:04:39,161
Oh, that part.

97
00:04:39,342 --> 00:04:41,201
-- Ok.
-- Well, you can serve HSTS

98
00:04:41,385 --> 00:04:42,105
http.

99
00:04:42,705 --> 00:04:44,786
-- Ok.
-- That's not supposed to happen

100
00:04:45,175 --> 00:04:46,626
for a variety of reasons.

101
00:04:46,635 --> 00:04:46,966
I mean,

102
00:04:46,976 --> 00:04:48,786
it makes sense because obviously a man in the

103
00:04:48,795 --> 00:04:52,216
middle attacker is just gonna remove the HSTS header.

104
00:04:52,226 --> 00:04:53,006
That's one of them.

105
00:04:53,015 --> 00:04:56,645
And the second reason that's actually think about the time that this came from,

106
00:04:56,735 --> 00:05:00,126
did people have their HTTP S reliably set up all the time?

107
00:05:00,135 --> 00:05:01,115
And the answer is no,

108
00:05:01,476 --> 00:05:06,545
definitely not. So part of this was you could only serve it over the secure channel,

109
00:05:06,989 --> 00:05:11,859
thus having a high degree of confidence that that secure channel actually worked.

110
00:05:11,869 --> 00:05:13,769
And also what you said with the man in the middle.

111
00:05:13,779 --> 00:05:14,649
First of all,

112
00:05:14,660 --> 00:05:19,049
a lot of people serve HSTS headers over HTTP and a lot of web

113
00:05:19,059 --> 00:05:23,230
browsers and stuff accept it because really there's not a huge downside to it,

114
00:05:23,450 --> 00:05:24,209
right?

115
00:05:24,510 --> 00:05:27,609
Like the the attack, there's, there's not a lot of attacks where the attacker,

116
00:05:27,923 --> 00:05:29,513
if they can man in the middle of your traffic,

117
00:05:29,523 --> 00:05:32,583
that they're gonna want to upgrade you to HS HTTP S

118
00:05:32,912 --> 00:05:35,903
-- right? They would they would just stay at http.
-- I want to

119
00:05:36,072 --> 00:05:40,912
interject here because this is what basically has put us in the mess we're

120
00:05:40,923 --> 00:05:44,822
in with web browsers in general today is the fact that the web browsers,

121
00:05:44,833 --> 00:05:45,683
what was this saying?

122
00:05:45,692 --> 00:05:48,243
Be generous on what you receive and strict on what you send

123
00:05:48,615 --> 00:05:48,915
like that.

124
00:05:48,925 --> 00:05:53,156
It was the old mantra of the internet way back in the day, web browsers have really,

125
00:05:53,455 --> 00:05:55,996
that is how they work. They have been

126
00:05:56,235 --> 00:06:00,765
incredibly generous in terms of like how they'll parse html.

127
00:06:00,776 --> 00:06:03,705
What kind of nonsense they accept from web servers,

128
00:06:03,976 --> 00:06:08,626
you know, in HSTS headers and http, even though the standard might say not to.

129
00:06:09,390 --> 00:06:14,089
And I think this, this whole http redirecting the HTTP S is,

130
00:06:14,100 --> 00:06:18,540
is a perfect example where there's this prevailing attitude of instead

131
00:06:18,549 --> 00:06:21,179
of doing the right thing and we put writing quotes,

132
00:06:21,239 --> 00:06:25,609
we're going to do the easy thing because it doesn't make people angry or annoyed.

133
00:06:25,619 --> 00:06:29,130
Well, and it doesn't, it's not as disruptive, right? If I

134
00:06:29,350 --> 00:06:34,700
serve in HTTP S redirect, then it just sort of keeps magically working. Whereas if I

135
00:06:34,829 --> 00:06:36,200
on an extreme example, I,

136
00:06:36,450 --> 00:06:40,619
I used to serve any http at all or I serve http with like a 403 or a 404,

137
00:06:40,630 --> 00:06:42,549
some version of like you can't do that

138
00:06:42,850 --> 00:06:44,399
and things just break

139
00:06:44,589 --> 00:06:45,109
well. Yeah,

140
00:06:45,320 --> 00:06:48,769
people now are forced into upgrading their software as opposed to, well,

141
00:06:48,779 --> 00:06:50,649
it just keeps working with a redirect

142
00:06:50,869 --> 00:06:51,540
Right. Exactly.

143
00:06:51,739 --> 00:06:58,140
And so what's also fascinating is curl added support for hsts like uh four

144
00:06:58,149 --> 00:07:02,470
years ago in 2020 but it doesn't in memory storage of it only.

145
00:07:02,880 --> 00:07:05,609
OK. So it only would be within that session,

146
00:07:05,959 --> 00:07:05,989
but

147
00:07:07,260 --> 00:07:11,369
it does not persist by default across like a web browser by default

148
00:07:11,380 --> 00:07:14,410
will see an HST SS header for like seared.org and be like cool.

149
00:07:14,420 --> 00:07:18,859
-- I'm logging that puts it in a little text file
-- that's expected with web browsers.

150
00:07:18,869 --> 00:07:22,329
They have cookie stores and secret stores and now they, I mean, cripes,

151
00:07:22,339 --> 00:07:26,160
they have magic, just stores for websites, right?

152
00:07:26,170 --> 00:07:30,420
-- Websites can store arbitrary crap. But
-- people forget that most API

153
00:07:30,570 --> 00:07:31,290
clients

154
00:07:31,459 --> 00:07:36,750
don't do that. And they, a lot of people when they think about using the web as an API,

155
00:07:36,980 --> 00:07:40,130
they apply their existing mental model of web browsers

156
00:07:40,489 --> 00:07:43,450
to their API client, which is wrong. All right.

157
00:07:43,459 --> 00:07:47,309
-- Th
-- this topic I think is divergent too divergent from the

158
00:07:47,450 --> 00:07:52,510
actual topic of redirecting http to http S and why it is bad.

159
00:07:52,519 --> 00:07:55,720
Well, and so that gets this is you are now faced with a choice of,

160
00:07:55,760 --> 00:07:56,630
you have a couple of options.

161
00:07:56,640 --> 00:07:57,529
You can not survive

162
00:07:57,630 --> 00:08:01,760
-- http at all, which is kind of the same as serving an error,
-- do that,

163
00:08:01,880 --> 00:08:02,929
just do that.

164
00:08:03,239 --> 00:08:05,339
Well, that's actually not a terrible thing.

165
00:08:05,350 --> 00:08:08,829
It's actually a good solution in some ways. The second one is you can serve http

166
00:08:08,989 --> 00:08:13,299
-- with an error like a 403 or 40
-- four. Don't do that. Don't do that.

167
00:08:13,309 --> 00:08:15,929
-- It's that, that's a bad idea.
-- Why is that a bad idea?

168
00:08:15,940 --> 00:08:16,809
Because

169
00:08:17,059 --> 00:08:19,239
the way the web works

170
00:08:19,429 --> 00:08:22,010
is we have http headers.

171
00:08:22,109 --> 00:08:25,410
So for example, let's say I'm submitting basic authentication.

172
00:08:25,420 --> 00:08:29,130
I'll just use this as my example. But many, many forms of authentication do this.

173
00:08:29,140 --> 00:08:30,640
Cookies are handled in this way.

174
00:08:30,649 --> 00:08:33,390
There's all this information that's sent with the web request, right?

175
00:08:33,400 --> 00:08:38,349
Let's say I'm going to an API and I'm using basic O which you also shouldn't use.

176
00:08:38,359 --> 00:08:40,789
But we're just gonna pretend for this example, spherical

177
00:08:41,380 --> 00:08:41,659
cow,

178
00:08:41,880 --> 00:08:42,989
right? So

179
00:08:43,229 --> 00:08:44,359
when you add basic

180
00:08:44,500 --> 00:08:44,510
a

181
00:08:44,700 --> 00:08:47,460
authentication is that that right? Whatever I pretend it's right.

182
00:08:47,580 --> 00:08:51,669
When you add that authentication method to your HTTP request,

183
00:08:52,150 --> 00:08:53,489
what you end up with

184
00:08:53,590 --> 00:08:55,979
is a header added to the request

185
00:08:56,130 --> 00:09:00,229
that has an encoded user name and password, not encrypted encoded, right?

186
00:09:00,239 --> 00:09:03,000
So now I go to the http site, right?

187
00:09:03,340 --> 00:09:06,890
I send that encoded user name and password.

188
00:09:06,900 --> 00:09:10,119
Then the web server responds with the redirect saying no, no, no,

189
00:09:10,130 --> 00:09:12,159
go to this http S site instead.

190
00:09:12,169 --> 00:09:14,969
I've already sent that information in the header.

191
00:09:15,030 --> 00:09:18,570
-- It's already been exposed, right?
-- And this is going to be true

192
00:09:18,809 --> 00:09:20,700
of any HTTP request.

193
00:09:20,710 --> 00:09:23,780
Like any information you have in cookies in headers

194
00:09:23,789 --> 00:09:26,650
in whatever is going to be sent over http.

195
00:09:26,659 --> 00:09:31,500
So a, a redirect or A 403 is worse than just straight up,

196
00:09:31,510 --> 00:09:33,869
not accepting the TCP connection.

197
00:09:33,880 --> 00:09:37,169
Well, the thing is if the man in the middle can actually inject traffic,

198
00:09:37,179 --> 00:09:40,190
then they can also pretend to be you on http

199
00:09:40,359 --> 00:09:42,280
for sure. Yes, I agree.

200
00:09:42,289 --> 00:09:43,030
This is where the,

201
00:09:43,039 --> 00:09:44,909
this is where a lot of the argument of

202
00:09:44,919 --> 00:09:47,450
basically having it break comes down because then it

203
00:09:47,619 --> 00:09:48,130
gets,

204
00:09:48,140 --> 00:09:51,250
it hopefully encourages people to actually update and correct their clients.

205
00:09:51,429 --> 00:09:51,869
And so, and,

206
00:09:53,190 --> 00:09:58,530
and this is because there's a lot of API S that are very uh verse in their responses,

207
00:09:58,539 --> 00:10:01,169
like it's not just what's the temperature six, you know what I mean?

208
00:10:01,179 --> 00:10:03,320
What's your status, light bulb on or off?

209
00:10:03,330 --> 00:10:07,000
But there's a lot of API S where it's like, you know, here's some data, I need

210
00:10:07,320 --> 00:10:09,570
some sort of response to that data, right?

211
00:10:10,190 --> 00:10:12,809
And A is are a good example because you're basically sending in a bunch of

212
00:10:13,320 --> 00:10:15,669
and expecting a whole bunch of data back. And

213
00:10:15,849 --> 00:10:19,429
all of these A I API S for example, have things like

214
00:10:19,580 --> 00:10:20,669
did, did the,

215
00:10:20,679 --> 00:10:24,309
did the A I actually complete the request or did it like kind of just stall out,

216
00:10:24,320 --> 00:10:25,469
run out of tokens or whatever?

217
00:10:25,479 --> 00:10:26,700
And so for example, open A

218
00:10:26,830 --> 00:10:30,570
I actually serves a 403, but they also serve

219
00:10:30,729 --> 00:10:33,429
a Json Blob as they normally would with the actual

220
00:10:33,659 --> 00:10:36,969
error message that is quite helpful and, and very explicit.

221
00:10:36,979 --> 00:10:39,820
I hate websites that do that well.

222
00:10:40,289 --> 00:10:43,469
So the, the one argument though is that then OK, so now you've tried

223
00:10:43,760 --> 00:10:47,429
accessing with HTTP, it just broke. Now you're forced

224
00:10:47,849 --> 00:10:54,419
-- to do the right thing in air quotes of using HTTP S
-- sure. And, and the 403 is

225
00:10:54,590 --> 00:10:55,190
ok,

226
00:10:55,200 --> 00:11:00,070
but you're still probably sending authentication information with that request,

227
00:11:00,080 --> 00:11:02,369
which leads to the second thing, somebody pointed out

228
00:11:02,619 --> 00:11:05,669
that there are API S that when they receive

229
00:11:06,000 --> 00:11:09,169
access tokens or credentials over http

230
00:11:09,469 --> 00:11:11,369
will revoke them and then serve the air.

231
00:11:11,474 --> 00:11:14,794
-- I did see that. Yeah, that was in the article. That's very
-- cool

232
00:11:14,905 --> 00:11:17,775
that now, now you're really forcing the person to fix it

233
00:11:18,085 --> 00:11:21,304
because it's not gonna work until they reset their tokens and use http.

234
00:11:21,315 --> 00:11:24,414
Si mean in that context though,

235
00:11:24,784 --> 00:11:26,715
why not just turn off http?

236
00:11:26,724 --> 00:11:29,974
Like I fail to understand the benefit to even letting it run?

237
00:11:29,984 --> 00:11:35,065
-- Because
-- if you don't serve http, there's no error. There's is my network broken

238
00:11:35,234 --> 00:11:36,635
is my DNS broken

239
00:11:36,784 --> 00:11:40,085
because I've tried like I've had times where HTTP breaks.

240
00:11:41,890 --> 00:11:41,979
No,

241
00:11:42,099 --> 00:11:46,409
-- no. Ok.
-- Look, let me, let's break down what you just explained.

242
00:11:46,419 --> 00:11:49,960
So let's say there's a man in the middle attack, right?

243
00:11:50,020 --> 00:11:51,880
I connect to the man in the middle.

244
00:11:51,890 --> 00:11:54,330
If the man in the middle knows that the end

245
00:11:54,340 --> 00:11:57,099
point I'm going to is going to revoke my credentials.

246
00:11:57,109 --> 00:11:58,830
If I connect over HETP,

247
00:11:59,020 --> 00:12:02,619
they're going to send the man in the middle data over hetps

248
00:12:03,239 --> 00:12:03,849
again.

249
00:12:04,109 --> 00:12:05,289
This is where

250
00:12:05,580 --> 00:12:10,770
I think just straight up denying this kind of thing is going to be it.

251
00:12:10,780 --> 00:12:14,020
It's a little more brutal and, and you're right, you could say is DNS broken,

252
00:12:14,030 --> 00:12:17,609
-- is a network broken, whatever, whatever, at
-- least with a 403, I get the,

253
00:12:17,619 --> 00:12:21,530
like the common case, I think you would agree is that there is no man in the middle.

254
00:12:21,539 --> 00:12:22,530
Right. Right. They're,

255
00:12:22,630 --> 00:12:24,039
they're not common at all.

256
00:12:24,340 --> 00:12:27,659
And that's why so many people do http to http, read

257
00:12:27,815 --> 00:12:31,976
direct, then serve an HSTS header and say from now on and forever

258
00:12:32,176 --> 00:12:32,565
you

259
00:12:32,846 --> 00:12:36,315
share. And this also and and this is also ignoring HSTS preload.

260
00:12:36,325 --> 00:12:38,635
So there's this thing called HSTS preload,

261
00:12:38,645 --> 00:12:41,585
which is essentially a a text list of domains like

262
00:12:41,815 --> 00:12:46,385
cre.org does that still exist? Yes, it does. And it's still in use for example.

263
00:12:46,395 --> 00:12:49,515
And here's what I find really cool. There's some top level domains in there like DEV,

264
00:12:49,906 --> 00:12:51,236
like dot DEV

265
00:12:51,521 --> 00:12:52,971
is in the preload list.

266
00:12:52,981 --> 00:12:59,661
So everything served off of dot dev by web browser or any rational API you know,

267
00:12:59,671 --> 00:13:03,132
http S client should always be http S.

268
00:13:03,361 --> 00:13:06,312
But the challenge again is that things like curl don't use that.

269
00:13:06,591 --> 00:13:07,052
Ah

270
00:13:07,302 --> 00:13:10,591
that could be I I just, I went, I had to poke through the curl source code

271
00:13:10,731 --> 00:13:15,132
and they support hsts, they can load it from a file, but by default, they don't. And

272
00:13:15,750 --> 00:13:18,530
I think in the case of curl that's actually

273
00:13:18,679 --> 00:13:22,299
valid because for example, I use curl all the time where I'm like,

274
00:13:22,309 --> 00:13:26,299
I want to actually test something on http at an HTTP

275
00:13:26,309 --> 00:13:30,229
SHSTS website like c.org and I need to test that,

276
00:13:30,239 --> 00:13:30,830
like, for example,

277
00:13:30,840 --> 00:13:33,960
the redirect works and obviously I can't test the redirect if curl

278
00:13:34,070 --> 00:13:36,195
-- says no, you can only go to HTTP S
-- right.

279
00:13:36,375 --> 00:13:38,724
I mean, I, I would not expect

280
00:13:39,065 --> 00:13:41,085
any API client

281
00:13:41,344 --> 00:13:44,265
-- to use the HSTS preload
-- list by

282
00:13:44,424 --> 00:13:44,885
default.

283
00:13:45,125 --> 00:13:45,135
I

284
00:13:45,265 --> 00:13:45,294
would

285
00:13:45,484 --> 00:13:45,544
say

286
00:13:45,715 --> 00:13:47,085
it would be nice if it was an option.

287
00:13:47,315 --> 00:13:48,405
I mean. Yeah. Yeah. Yeah.

288
00:13:48,414 --> 00:13:54,284
But I mean, how many of them still don't do certificate validation correctly?

289
00:13:54,335 --> 00:13:55,955
I mean, it's not zero.

290
00:13:56,390 --> 00:13:56,770
Yeah.

291
00:13:56,940 --> 00:13:57,380
But

292
00:13:57,590 --> 00:14:02,280
so this is, and this is basically we're beginning to see why this is so hard to do

293
00:14:02,479 --> 00:14:03,340
in a way

294
00:14:03,549 --> 00:14:04,650
that is not.

295
00:14:05,010 --> 00:14:07,090
There's always trade offs, there's always a downside,

296
00:14:07,539 --> 00:14:10,429
there's always, well, but what about, what about this? What about this scenario?

297
00:14:10,580 --> 00:14:14,090
What about, you know, so for example, don't serve http at all. Well, yeah.

298
00:14:14,099 --> 00:14:16,460
Now people like go to your website and they're like, it's broken

299
00:14:16,609 --> 00:14:18,770
and how many people are going to see the little dinosaur

300
00:14:18,880 --> 00:14:24,109
-- and think, oh, I need to, I need to add an si mean,
-- the web browser default to http S now.

301
00:14:24,159 --> 00:14:25,330
-- Well,
-- ok, bad example.

302
00:14:25,340 --> 00:14:27,940
Like browsers are a bad example because they're

303
00:14:27,950 --> 00:14:30,469
basically forcing people to do the right thing

304
00:14:30,479 --> 00:14:35,159
if I run a curl command against against http and I just get time out.

305
00:14:35,169 --> 00:14:38,030
My first thought is not that they don't serve http.

306
00:14:38,039 --> 00:14:42,210
It's that something's broken on my end or their end maybe.

307
00:14:42,390 --> 00:14:44,609
Well, because how am I gonna see? Here's the question.

308
00:14:44,619 --> 00:14:47,250
How do I confirm that they don't serve? Http?

309
00:14:47,309 --> 00:14:47,770
I just,

310
00:14:47,780 --> 00:14:49,590
I keep trying it from different locations and it

311
00:14:49,599 --> 00:14:51,809
keeps not working and I go either it's all totally

312
00:14:51,820 --> 00:14:54,469
broken or it's just down whereas if they serve HTTP

313
00:14:54,479 --> 00:14:57,369
and an error or a forbidden or a redirect.

314
00:14:57,619 --> 00:15:00,280
Oh, ok. Now I see what your intent is.

315
00:15:00,390 --> 00:15:00,400
Uh,

316
00:15:01,739 --> 00:15:02,359
I don't,

317
00:15:02,770 --> 00:15:06,710
I don't like your answer and I don't want to say it's correct.

318
00:15:07,039 --> 00:15:10,989
I I'm not saying it is correct. I'm saying basically you got to make a choice.

319
00:15:11,000 --> 00:15:13,010
There's trade offs and they're all bad.

320
00:15:13,369 --> 00:15:15,140
Ok. No, you know what this is. Ok.

321
00:15:15,150 --> 00:15:17,469
No, no, I want, I'm going to reframe this whole discussion.

322
00:15:17,479 --> 00:15:21,869
This is a perfect example of the stupidity of our environment

323
00:15:22,119 --> 00:15:22,750
where

324
00:15:23,020 --> 00:15:28,280
the these libraries we use to access API S because no one is talking http, right?

325
00:15:28,289 --> 00:15:29,469
We're all using some line.

326
00:15:29,969 --> 00:15:33,549
Those libraries should be forcing HTTP connections

327
00:15:33,559 --> 00:15:36,059
into HTTP S and they should just flat

328
00:15:36,070 --> 00:15:40,770
up say don't use http unless you add this this special setting to the call.

329
00:15:40,780 --> 00:15:41,239
That's like

330
00:15:41,380 --> 00:15:46,109
-- I am a bad person equals true. That is what we need to do here.
-- We need to,

331
00:15:46,280 --> 00:15:48,690
we need to flip the thing, which is what web browsers did, right?

332
00:15:48,700 --> 00:15:52,570
We flipped from HTTP to htps but allow a fall back to

333
00:15:52,580 --> 00:15:56,229
HTP because there are API S that are only available over http.

334
00:15:56,369 --> 00:15:59,989
Well, like cramp in my home network. Right. I've got a great example.

335
00:16:00,000 --> 00:16:03,890
So, uh uh a friend, he goes by Signal Nine on Mastodon.

336
00:16:04,039 --> 00:16:06,270
He put a message up the other day.

337
00:16:06,280 --> 00:16:09,710
That's like, oh, no, my, my Fresh RSS reader,

338
00:16:09,719 --> 00:16:13,840
I forgot to back up the database and I've lost everything now because I did.

339
00:16:13,849 --> 00:16:14,950
I've created the container.

340
00:16:15,080 --> 00:16:18,020
I'm like, what's fresh RSS? And I look, I'm like, oh, this looks really cool.

341
00:16:18,080 --> 00:16:20,039
And so I'm like, I'm running it in the basement now.

342
00:16:20,049 --> 00:16:23,059
It's not running over hetps because I don't care and it's

343
00:16:23,409 --> 00:16:26,950
house and it's for reading RSS feeds. So, whatever, right?

344
00:16:27,080 --> 00:16:28,109
Like that's an example.

345
00:16:28,119 --> 00:16:33,049
I really don't want to set it up with HTTP S because it won't be worth the hassle to me.

346
00:16:33,169 --> 00:16:36,460
-- So HTTP is great
-- on an internal network with an internal IP.

347
00:16:36,469 --> 00:16:40,340
-- Like
-- I still don't trust my network, my networks and I have teenagers, man,

348
00:16:40,349 --> 00:16:43,630
this network is probably more dangerous than most corporate networks,

349
00:16:44,690 --> 00:16:46,270
but I'm not going to pretend.

350
00:16:46,280 --> 00:16:49,869
But this leads to, you know, sort of, I would say it really needs,

351
00:16:49,969 --> 00:16:52,150
we decided on a case by case basis.

352
00:16:52,419 --> 00:16:52,830
No,

353
00:16:53,130 --> 00:16:53,619
no,

354
00:16:53,760 --> 00:16:54,640
I don't think so.

355
00:16:54,799 --> 00:16:57,309
I think that's what got us into this mess. I think

356
00:16:57,419 --> 00:16:59,349
what we need to start doing

357
00:16:59,650 --> 00:17:05,530
in the world of software is we need to be more strict about just

358
00:17:05,670 --> 00:17:10,550
like libraries should not be supporting HTTP by default. Like they just shouldn't.

359
00:17:10,560 --> 00:17:12,170
-- There's no reason for it
-- today,

360
00:17:12,390 --> 00:17:14,989
but the challenge is if you have some internal corporate thing.

361
00:17:15,189 --> 00:17:19,348
-- But
-- yeah, and then you have a way to override it, but you make it hard,

362
00:17:19,358 --> 00:17:23,709
you make the wrong way hard and today the wrong way is easy.

363
00:17:23,719 --> 00:17:24,868
That is the problem.

364
00:17:24,880 --> 00:17:26,439
I know the reality of software is there's a

365
00:17:26,449 --> 00:17:29,069
lot of 1020 30 year old software out there that

366
00:17:29,449 --> 00:17:33,630
if, if you break it, people will yell at you and make you switch it back. So it works,

367
00:17:33,859 --> 00:17:36,869
-- which means having to redirect.
-- But we're not talking about

368
00:17:37,170 --> 00:17:39,349
old software. We're talking about

369
00:17:39,739 --> 00:17:42,150
a library. I am using

370
00:17:42,339 --> 00:17:43,469
to connect to a thing.

371
00:17:43,569 --> 00:17:47,650
Breaking changes happen all the time in new versions of software, you forget.

372
00:17:47,660 --> 00:17:48,109
There's a lot of,

373
00:17:48,489 --> 00:17:50,030
there's a lot of people that don't upgrade though

374
00:17:50,140 --> 00:17:54,430
-- and
-- that's then they're unaffected, right? They have other problems.

375
00:17:54,439 --> 00:17:56,030
This won't be one of them

376
00:17:56,189 --> 00:17:58,869
and look, this is the reality of using open source software.

377
00:17:58,880 --> 00:18:01,319
This is why people don't upgrade their open source software.

378
00:18:01,329 --> 00:18:03,630
Because when I go from version three to version four,

379
00:18:03,640 --> 00:18:05,339
it's gonna break a bunch of stuff.

380
00:18:05,349 --> 00:18:10,229
And if one of the things that breaks is I can't load http websites anymore.

381
00:18:10,750 --> 00:18:13,579
Ok. I'm either going to use something else.

382
00:18:13,589 --> 00:18:17,849
I'm going to stay on my old version forever or I'm going to figure out what's going on.

383
00:18:17,859 --> 00:18:19,989
And then I can say, oh, I understand what's happening.

384
00:18:20,000 --> 00:18:20,329
Now,

385
00:18:20,339 --> 00:18:22,239
-- I will fix this
-- and yet you have that

386
00:18:22,250 --> 00:18:24,979
RSS feed reader running with http in your basement.

387
00:18:25,209 --> 00:18:26,250
-- In my
-- basement. Yeah,

388
00:18:26,660 --> 00:18:28,550
I have sort of the exact same moral equipment.

389
00:18:28,560 --> 00:18:31,135
-- I have a bit torrent with a web interface.
-- Here's the thing.

390
00:18:31,165 --> 00:18:37,525
If I put it on the internet and I wanted to access it remotely, it would 100% have HTTP S

391
00:18:37,824 --> 00:18:39,194
right. And, and

392
00:18:39,405 --> 00:18:43,234
I'm pretty sure the web browser would be extremely unhappy connecting

393
00:18:43,354 --> 00:18:44,905
to http

394
00:18:45,074 --> 00:18:49,625
-- in, like open internet.
-- Oh, every time I have to log into my, my local

395
00:18:50,250 --> 00:18:53,430
whatever wi fi router thing over HTP. Oh, my goodness.

396
00:18:53,439 --> 00:18:56,729
I guess like, I'm like, yes, I really, yes, I know what I'm doing. Like, just

397
00:18:57,410 --> 00:18:59,359
bought one and let me change the,

398
00:18:59,569 --> 00:19:02,400
I think I, I haven't verified this in a long time,

399
00:19:02,410 --> 00:19:04,900
but I'm pretty sure at least in Firefox it will not

400
00:19:04,910 --> 00:19:09,150
let you fill out like authentication information on an http website,

401
00:19:09,390 --> 00:19:10,859
it just won't do it.

402
00:19:11,056 --> 00:19:12,235
Which is awesome.

403
00:19:12,566 --> 00:19:12,776
So,

404
00:19:13,446 --> 00:19:14,615
the password field or whatever,

405
00:19:14,625 --> 00:19:18,015
-- because
-- it just wouldn't do it if I may be misremembering.

406
00:19:18,026 --> 00:19:22,395
But I'm pretty sure on the internet not like your internal network because

407
00:19:22,406 --> 00:19:25,745
of the private IP space is treated special by web browsers generally.

408
00:19:25,796 --> 00:19:28,145
But I'm, I'm pretty sure when it was Chrome,

409
00:19:28,156 --> 00:19:31,355
I forget I'm fairly certain I had that experience recently.

410
00:19:31,365 --> 00:19:33,511
Like, this is, to me this is fascinating because there's,

411
00:19:33,521 --> 00:19:35,641
there's all these tradeoffs and there's situations where

412
00:19:35,932 --> 00:19:38,812
I can't upgrade the server but I can upgrade the client or vice versa.

413
00:19:38,822 --> 00:19:42,812
I can upgrade the client but not the server or maybe I can't really upgrade both,

414
00:19:42,822 --> 00:19:45,312
but I can put like a secure proxy in the middle because I've see, I've,

415
00:19:45,322 --> 00:19:48,212
I actually had that at one point where, remember back in the day,

416
00:19:48,222 --> 00:19:50,241
like one thing people did was

417
00:19:50,552 --> 00:19:52,982
you'd have uh like a Squid proxy

418
00:19:53,232 --> 00:19:55,222
that you would connect to over http

419
00:19:55,569 --> 00:19:58,869
because all the computers, if you turned on encryption would like die,

420
00:19:59,099 --> 00:20:00,109
they were so slow

421
00:20:00,300 --> 00:20:03,209
and then you'd have like this beefy server box to then connect out.

422
00:20:03,219 --> 00:20:06,410
-- I mean,
-- this is basically what like a Kuber Neti service mesh does

423
00:20:06,569 --> 00:20:11,109
is you assume the intercommunication between Kubernetes nodes like you can,

424
00:20:11,119 --> 00:20:13,790
you can offload encryption onto the service mesh,

425
00:20:13,900 --> 00:20:16,739
then you don't have to worry about that in your app at all.

426
00:20:16,750 --> 00:20:18,910
But then when you start reaching out to other things,

427
00:20:19,180 --> 00:20:20,780
it gets, it gets hokey

428
00:20:21,369 --> 00:20:25,800
and, and that's OK, like that's how it works sometimes. And, and although I mean,

429
00:20:25,979 --> 00:20:26,229
the Ker

430
00:20:26,479 --> 00:20:28,380
neti service mesh could put a

431
00:20:28,589 --> 00:20:32,229
that could create problems with my totalitarian

432
00:20:33,060 --> 00:20:33,969
solution

433
00:20:34,260 --> 00:20:36,619
because I think in the Kubernetes universe,

434
00:20:36,630 --> 00:20:39,229
you're still generally treating it as HTTP,

435
00:20:39,239 --> 00:20:42,010
even though the service mesh is handling all of the encryption.

436
00:20:42,020 --> 00:20:43,819
So it's not technically HTTP S

437
00:20:43,930 --> 00:20:47,010
but again, this is where you have a special setting

438
00:20:47,150 --> 00:20:51,609
that says yes, I absolutely 100% mean this to be HTTP,

439
00:20:51,869 --> 00:20:55,319
-- which I think is a reasonable solution
-- and there's a problem there.

440
00:20:55,329 --> 00:20:58,930
For example is that there's still, there's like, for example, in the,

441
00:20:58,939 --> 00:21:02,012
in the finance world in the US, there's regulations that say

442
00:21:02,182 --> 00:21:09,343
you must be able to see all your network traffic which has now led to problems because

443
00:21:09,562 --> 00:21:11,572
that was fine until Google started putting

444
00:21:11,583 --> 00:21:13,542
like protections against state level actors.

445
00:21:13,552 --> 00:21:16,642
And the problem is most http S interception software looks

446
00:21:16,652 --> 00:21:18,542
a lot like a state level actor attack because it's,

447
00:21:18,552 --> 00:21:19,552
it is the same thing.

448
00:21:19,562 --> 00:21:23,003
It's like I'm going to get a custom root certificate into your browser and

449
00:21:23,012 --> 00:21:26,213
use that to sign google.com so I can see what you're sending to google.com.

450
00:21:26,333 --> 00:21:27,012
Well, is that

451
00:21:27,416 --> 00:21:30,696
we did a show many years ago. I want to say Kazakhstan did that.

452
00:21:30,745 --> 00:21:32,296
I'm pretty sure it was Kazakhstan

453
00:21:32,595 --> 00:21:36,666
and I think they, they said web browsers, you have to use our root certificate.

454
00:21:36,676 --> 00:21:37,156
I think that,

455
00:21:37,465 --> 00:21:40,696
-- yeah, they were mandating a root certificate
-- and I think the web browser were like,

456
00:21:40,706 --> 00:21:41,495
ha ha no.

457
00:21:41,505 --> 00:21:42,936
And then I think they let it go.

458
00:21:42,956 --> 00:21:46,615
This is why things like Chrome now are like, well, that, yeah, we,

459
00:21:46,625 --> 00:21:47,745
we put protections against that.

460
00:21:47,865 --> 00:21:49,426
But now the problem is, let's say for the sake of environment,

461
00:21:49,436 --> 00:21:51,255
I want to put a custom root certificate on all

462
00:21:51,265 --> 00:21:54,156
my machines so I can sniff my traffic to google.com,

463
00:21:54,709 --> 00:21:55,180
-- right?
-- OK.

464
00:21:55,369 --> 00:21:57,520
Well, I can't, it's like, because, you know,

465
00:21:57,739 --> 00:21:58,800
you're, you're,

466
00:21:58,810 --> 00:22:02,329
these are two different problems we're talking about because what you're talking

467
00:22:02,339 --> 00:22:05,520
about is generally going to be a web browser focused problem.

468
00:22:05,530 --> 00:22:08,430
I would be shocked if any of the

469
00:22:08,579 --> 00:22:10,339
API clients

470
00:22:10,609 --> 00:22:13,670
care at all about certificate pinning or any.

471
00:22:13,680 --> 00:22:16,040
I don't even didn't Google stop doing certificate pinning.

472
00:22:16,170 --> 00:22:16,890
I think they did.

473
00:22:16,930 --> 00:22:19,839
-- Yeah,
-- everybody did uh stop doing certificate pinning because it just

474
00:22:20,066 --> 00:22:21,956
-- too often. So
-- it'll still work fine.

475
00:22:21,965 --> 00:22:26,406
But anyway, you get the point like we're talking about programmatic API S here.

476
00:22:26,416 --> 00:22:30,546
Like the libraries that do this stuff are not particularly intelligent

477
00:22:31,026 --> 00:22:31,456
does it?

478
00:22:31,676 --> 00:22:35,676
We're not, we don't have to worry about. Well, curl is special, right?

479
00:22:35,686 --> 00:22:36,806
Everyone knows that

480
00:22:37,276 --> 00:22:39,845
Curl does everything correctly. Mostly

481
00:22:40,125 --> 00:22:41,906
-- they do a
-- lot, right? I would point out

482
00:22:42,176 --> 00:22:45,526
well and this is part of the problem is like what defines a valid H

483
00:22:45,671 --> 00:22:49,171
TP header. And the answer is like if enough people serve it and use it,

484
00:22:49,342 --> 00:22:51,192
it's now a valid Http header.

485
00:22:51,202 --> 00:22:55,332
I mean, there's, I know there's the RFC headers but you can make anything a header.

486
00:22:55,342 --> 00:22:55,812
I mean,

487
00:22:55,982 --> 00:22:59,621
well, if you look at the RFC headers compared to what's actually in popular use,

488
00:22:59,631 --> 00:23:03,271
the R CS are like 10 or 20% of what's actually in popular use.

489
00:23:03,352 --> 00:23:05,171
-- Yeah, but
-- that was the point, right?

490
00:23:05,182 --> 00:23:05,241
I mean,

491
00:23:05,251 --> 00:23:08,322
this is what makes the HTTP protocol so powerful

492
00:23:08,332 --> 00:23:11,131
is you can turn it into almost anything anyway.

493
00:23:11,277 --> 00:23:14,657
-- Anyway, I think,
-- I think we are simply at the point though where

494
00:23:14,978 --> 00:23:16,177
encryption is now

495
00:23:16,378 --> 00:23:20,537
the default for data in transit and data arrest full stop.

496
00:23:20,767 --> 00:23:22,277
And that's the world we need to live in.

497
00:23:22,417 --> 00:23:30,017
Yeah, I, I agree. I mean, it's, it's amusing that in 2024 someone writes this article

498
00:23:30,317 --> 00:23:32,218
and the answer isn't obvious.

499
00:23:32,608 --> 00:23:32,998
No,

500
00:23:33,167 --> 00:23:36,777
because all the things we've done for the last how many years,

501
00:23:36,884 --> 00:23:40,504
all the things we talk about, all the things, the way everything is treated,

502
00:23:40,514 --> 00:23:45,213
it feels like this should be obvious and it should just be a matter of absolutely not.

503
00:23:45,234 --> 00:23:50,093
And II, I guess though I have a theory maybe. Well, OK, what's your theory?

504
00:23:50,104 --> 00:23:50,864
And I'll tell you mine,

505
00:23:50,874 --> 00:23:56,644
my theory is we've spent 50 plus years trying to build it systems that are reliable

506
00:23:56,764 --> 00:24:00,543
and, and, and that just work which, you know,

507
00:24:00,553 --> 00:24:02,384
the whole mantra of backwards compatibility,

508
00:24:03,020 --> 00:24:03,790
right? And so

509
00:24:04,479 --> 00:24:05,150
not just

510
00:24:05,479 --> 00:24:07,819
we've created, it's not just that like,

511
00:24:08,319 --> 00:24:11,869
updating software is expensive, but we've encouraged people

512
00:24:12,339 --> 00:24:14,589
to not update software by

513
00:24:14,859 --> 00:24:16,750
giving them backwards compatibility.

514
00:24:16,760 --> 00:24:18,790
Like, you know, Windows is an extreme case of this.

515
00:24:18,800 --> 00:24:21,410
I still can't make a director called Pr N one because it

516
00:24:21,780 --> 00:24:23,349
boss might need that for my printer.

517
00:24:24,119 --> 00:24:27,319
But the problem is now, you know, kind of like plastics and microplastics.

518
00:24:27,329 --> 00:24:30,709
We've created an environment where we've catered to backwards compatibility for

519
00:24:30,814 --> 00:24:33,155
so long people have come to expect it.

520
00:24:33,165 --> 00:24:35,755
And I don't mean people in the sense of like individuals, I mean,

521
00:24:35,765 --> 00:24:37,795
it's like a software culture.

522
00:24:37,805 --> 00:24:41,515
There's this expectation that I should be able to write a piece of software that

523
00:24:41,525 --> 00:24:46,234
should just magically work on Red Hat Enterprise Links for 13 years with no changes.

524
00:24:46,775 --> 00:24:49,484
And Red Hat's like, ok, yeah, we'll take your money and make that happen.

525
00:24:49,614 --> 00:24:50,234
So

526
00:24:50,515 --> 00:24:53,045
that is how things used to work.

527
00:24:53,750 --> 00:24:53,770
I

528
00:24:53,890 --> 00:24:58,689
think it is slightly different in some instances. And I think open source is to blame

529
00:24:58,829 --> 00:25:01,109
because like a good example being

530
00:25:01,619 --> 00:25:02,410
when,

531
00:25:02,699 --> 00:25:05,329
when you're running like some binary only crap,

532
00:25:05,900 --> 00:25:08,910
you can't fix it. There's no option.

533
00:25:08,920 --> 00:25:11,430
B when you're using a bunch of open source and you need

534
00:25:11,439 --> 00:25:15,729
to upgrade to like the next universe or better operating system or,

535
00:25:15,739 --> 00:25:16,790
or whatever.

536
00:25:16,829 --> 00:25:19,109
I think there's more capability there.

537
00:25:19,119 --> 00:25:21,569
But it is still hard and there's still lots of people that won't.

538
00:25:21,599 --> 00:25:24,349
-- There's the possibility. Yeah, it
-- exists. Right.

539
00:25:24,359 --> 00:25:24,729
Right.

540
00:25:24,780 --> 00:25:28,859
Whereas with close source, the possibility is you could binary path,

541
00:25:29,604 --> 00:25:33,415
-- which realistically speaking is a, a big fat, no,
-- no one's doing that.

542
00:25:33,915 --> 00:25:35,364
It's, it's not realistic.

543
00:25:35,545 --> 00:25:36,244
-- I mean,
-- it,

544
00:25:36,775 --> 00:25:39,574
it never caught on for security for a reason.

545
00:25:39,584 --> 00:25:41,295
Remember because there was a whole bunch of companies doing

546
00:25:41,305 --> 00:25:43,035
it for security stuff way back in the day.

547
00:25:43,314 --> 00:25:44,454
Like, and, and we're, you know,

548
00:25:44,464 --> 00:25:46,474
we're still seeing it in the Linux kernel world where it's like, oh,

549
00:25:46,484 --> 00:25:48,204
you can upgrade your kernel in place by,

550
00:25:48,324 --> 00:25:51,685
you know, we insert a bunch of trampolines, cut out the code, put it in blah, blah,

551
00:25:51,694 --> 00:25:51,935
blah.

552
00:25:51,944 --> 00:25:52,454
Right.

553
00:25:53,104 --> 00:25:54,694
-- I remember those
-- and you can

554
00:25:54,824 --> 00:25:56,515
kind of do that for the kernel

555
00:25:56,869 --> 00:25:59,020
because like there's generally one kernel,

556
00:25:59,030 --> 00:26:02,500
but you can't do it for common software because there's like 3 million packages.

557
00:26:02,939 --> 00:26:04,979
So let me, let me rewind this back

558
00:26:05,339 --> 00:26:08,339
and I'll, I'll tell you what I think is, is should happen.

559
00:26:08,349 --> 00:26:10,050
If you look at the world of web browsers,

560
00:26:10,060 --> 00:26:14,060
web browsers were kind of in a dumb place probably 1015 years ago, give or take.

561
00:26:14,069 --> 00:26:16,660
And they started taking pretty hard lines about

562
00:26:16,880 --> 00:26:19,719
basically telling users you're going to do it this way because

563
00:26:19,729 --> 00:26:21,939
we said so and there's nothing you can do about it,

564
00:26:22,180 --> 00:26:24,020
right? This is everything from like

565
00:26:24,125 --> 00:26:27,194
-- http s automatically
-- the backspace key,

566
00:26:27,275 --> 00:26:28,645
right? Oh, yeah. Right.

567
00:26:28,655 --> 00:26:31,185
-- Because backspace used to go back,
-- remember backspace.

568
00:26:31,194 --> 00:26:34,665
He used to go back a page and I I used it all the time except

569
00:26:35,145 --> 00:26:35,395
there was,

570
00:26:35,694 --> 00:26:38,694
there was tons of weird quirks

571
00:26:39,074 --> 00:26:41,905
that web browsers have slowly gotten rid of,

572
00:26:42,175 --> 00:26:42,494
right?

573
00:26:42,505 --> 00:26:44,614
This is where like typing authentication

574
00:26:44,625 --> 00:26:46,795
information and unprotected pages warning us when

575
00:26:46,805 --> 00:26:49,805
we go to an http website where it just yells at you.

576
00:26:49,814 --> 00:26:51,574
Now it says this is un insecurity

577
00:26:51,689 --> 00:26:57,949
use HSTS preload where it will not let you like, you can't make your browser go to my

578
00:26:58,300 --> 00:27:00,260
seafood.org on HTP. It just won't let you.

579
00:27:00,530 --> 00:27:02,670
I hope it's not running. But anyway,

580
00:27:02,810 --> 00:27:04,410
so the thing is

581
00:27:04,699 --> 00:27:06,790
the API world,

582
00:27:07,160 --> 00:27:10,900
they've never really dealt with anything like this, right? I mean, most

583
00:27:11,069 --> 00:27:16,030
like most API software used in programming languages kind of sucks.

584
00:27:16,180 --> 00:27:17,510
And it barely works.

585
00:27:18,050 --> 00:27:18,650
And

586
00:27:19,255 --> 00:27:23,755
I mean, it just, that's how it is. But I think this is one of those examples where

587
00:27:24,125 --> 00:27:27,594
it would be beneficial. I think if some of the API

588
00:27:27,734 --> 00:27:28,885
libraries

589
00:27:28,994 --> 00:27:31,824
would become opinionated on these matters and say, like,

590
00:27:31,834 --> 00:27:36,395
you should be doing things this way, we're going to make you do things this way.

591
00:27:36,775 --> 00:27:38,275
You don't get to decide.

592
00:27:38,285 --> 00:27:40,954
Like, even Python, if Python just had like a thing where it's like,

593
00:27:40,964 --> 00:27:45,555
look globally across, you know, pie Curl requests, all these different things.

594
00:27:45,864 --> 00:27:46,714
We're going to start

595
00:27:46,819 --> 00:27:49,229
defaulting to http S like if you say go to

596
00:27:49,390 --> 00:27:50,040
cried.org,

597
00:27:50,170 --> 00:27:52,560
we're going to assume you meant http S

598
00:27:52,689 --> 00:27:53,339
creed.org,

599
00:27:53,469 --> 00:27:56,439
I think they should just not allow http like if,

600
00:27:56,449 --> 00:28:01,199
if the string starts with http colon slash slash, like throw an exception,

601
00:28:01,319 --> 00:28:02,040
but then your r

602
00:28:02,140 --> 00:28:04,479
news read client breaks. So

603
00:28:04,689 --> 00:28:07,989
well, if they break stuff like that, then people will never upgrade their Python.

604
00:28:08,000 --> 00:28:11,229
-- And so the cure is almost worse than the disease.
-- I don't know.

605
00:28:11,239 --> 00:28:12,359
I don't know if that's true.

606
00:28:12,459 --> 00:28:14,229
It is possible. Some won't.

607
00:28:14,770 --> 00:28:15,810
But I,

608
00:28:15,939 --> 00:28:18,550
you, you could make that argument about web browsers.

609
00:28:18,819 --> 00:28:20,969
I mean, why did people upgrade their web browsers?

610
00:28:21,369 --> 00:28:23,180
And one interesting thing though is

611
00:28:23,359 --> 00:28:27,939
-- Google had a cudgel of search engine optimization.
-- They did that helped a lot.

612
00:28:27,949 --> 00:28:29,619
-- I
-- agree. And we don't have that in the API

613
00:28:29,630 --> 00:28:31,569
world. Not right now.

614
00:28:32,160 --> 00:28:33,770
So, I don't know. I mean, I,

615
00:28:33,880 --> 00:28:36,969
-- well,
-- and this is part of the culture that we live in where I'm like I am saying like,

616
00:28:36,979 --> 00:28:40,040
what if the disease is worse or the cure is worse than the disease?

617
00:28:40,199 --> 00:28:42,780
And we break a whole bunch of stuff for people and they never upgrade again.

618
00:28:42,910 --> 00:28:47,280
And maybe the response needs to be ok. Too bad. You, you do that. Like that's a choice.

619
00:28:47,290 --> 00:28:48,469
-- You can make
-- it.

620
00:28:48,479 --> 00:28:51,819
I think it should be because look, I, I think making the argument,

621
00:28:51,829 --> 00:28:53,020
the cure is worse than the disease.

622
00:28:53,030 --> 00:28:55,150
No one's gonna upgrade blah, blah, blah, blah, blah.

623
00:28:55,319 --> 00:29:00,706
We've been saying that for 30 years and nothing's getting better. You know why?

624
00:29:00,715 --> 00:29:02,145
Because we're not doing anything

625
00:29:02,475 --> 00:29:04,776
-- well
-- and a stupid question potentially.

626
00:29:04,786 --> 00:29:07,745
But realistically how many men in the middle attacks are there?

627
00:29:07,895 --> 00:29:09,265
There's not many,

628
00:29:09,276 --> 00:29:13,046
I think the bigger problem isn't man in the middle attacks necessarily.

629
00:29:13,056 --> 00:29:16,696
It's the fact that there are a number of organizations

630
00:29:16,855 --> 00:29:19,745
everywhere from your computer to wherever you're going

631
00:29:19,765 --> 00:29:21,556
that are logging a lot of network tr

632
00:29:22,202 --> 00:29:23,261
and so I think

633
00:29:23,432 --> 00:29:26,862
man in the middle is probably less interesting than someone

634
00:29:26,871 --> 00:29:30,001
mining network data for things they shouldn't have or know

635
00:29:30,271 --> 00:29:33,921
as we've seen with the whole argument of quantum crypto where everybody's like,

636
00:29:33,932 --> 00:29:36,832
oh you know, that won't uh you know, we'll switch to quantum crypto.

637
00:29:36,842 --> 00:29:39,812
Well, but yeah, like all the existing traffic you sent could be broken.

638
00:29:39,822 --> 00:29:40,822
Well, but who cares?

639
00:29:40,832 --> 00:29:41,261
Well,

640
00:29:41,322 --> 00:29:43,641
there are people like there's that Utah data

641
00:29:43,651 --> 00:29:46,062
storage facility with its own Wikipedia page,

642
00:29:46,072 --> 00:29:46,462
you know,

643
00:29:46,598 --> 00:29:47,047
and

644
00:29:47,358 --> 00:29:49,677
right, like they're storing something there

645
00:29:49,838 --> 00:29:51,608
and the people forget,

646
00:29:51,618 --> 00:29:54,187
like this data can be useful in 10 or 2030 years

647
00:29:54,197 --> 00:29:56,498
because you can see who talked to who and how they talked

648
00:29:56,677 --> 00:29:58,537
and that's useful in 1020 30 years.

649
00:29:58,547 --> 00:30:01,437
You know, for certain types of activities and organized crime and everything.

650
00:30:01,468 --> 00:30:04,397
If you have nothing to hide, you have nothing to fear Kurt,

651
00:30:04,777 --> 00:30:08,338
-- except what we fear and have to hide changes over time.
-- I

652
00:30:08,878 --> 00:30:09,307
know. I

653
00:30:09,767 --> 00:30:10,578
know. All right, I,

654
00:30:11,433 --> 00:30:13,303
oh, I hate this conversation. Like

655
00:30:13,634 --> 00:30:15,223
I'm still not sure as to what the

656
00:30:15,374 --> 00:30:17,644
for me, I think I will continue

657
00:30:17,913 --> 00:30:20,813
on my, on my websites just leaving the default,

658
00:30:20,823 --> 00:30:25,333
which is like redirect with an HSTS header and I also have preload but on an API level.

659
00:30:25,343 --> 00:30:28,034
Well, I, I cheat in that. I just do http S

660
00:30:28,193 --> 00:30:29,173
because I know

661
00:30:29,303 --> 00:30:31,053
and I'm dealing with stuff that's up to date.

662
00:30:31,504 --> 00:30:32,293
So I'm lucky.

663
00:30:32,443 --> 00:30:32,734
Yeah,

664
00:30:32,874 --> 00:30:36,134
I, if I, uh, I don't know, I don't know. I need to.

665
00:30:36,630 --> 00:30:40,489
If I ran a web service, http would not exist,

666
00:30:40,859 --> 00:30:43,060
it would only be HTTP S but I don't.

667
00:30:43,069 --> 00:30:45,040
-- But what
-- if you were responsible for an internal

668
00:30:45,050 --> 00:30:47,329
API that your company depended on to get work done

669
00:30:47,510 --> 00:30:51,819
-- and it was HT it and it, that I
-- would tell them to upgrade their freaking library.

670
00:30:51,939 --> 00:30:53,930
And what if you had 1000 customers using it?

671
00:30:54,099 --> 00:30:56,689
That's a harder discussion then because that is a sort of

672
00:30:56,775 --> 00:30:58,444
the thing you have to look at and say like,

673
00:30:58,454 --> 00:30:59,864
what would happen if we did this?

674
00:30:59,875 --> 00:31:02,194
And now at the same time,

675
00:31:02,415 --> 00:31:04,704
you could just start reaching out to people and saying, hey,

676
00:31:04,714 --> 00:31:06,484
I see you're using HTTP stop doing that.

677
00:31:06,505 --> 00:31:06,525
It,

678
00:31:06,645 --> 00:31:06,665
it

679
00:31:07,025 --> 00:31:09,155
is not simple. I agree.

680
00:31:09,165 --> 00:31:14,635
I think if you're doing Greenfield, it would be easier to just not run http at all.

681
00:31:14,645 --> 00:31:16,834
I know there's a lot of backwards compatibility,

682
00:31:17,069 --> 00:31:18,369
but at the same time,

683
00:31:18,500 --> 00:31:21,410
if all we do is make excuses for our poor behavior in

684
00:31:21,420 --> 00:31:23,849
the past as to why we can't fix anything in the present.

685
00:31:23,859 --> 00:31:24,250
Like

686
00:31:24,569 --> 00:31:26,160
that doesn't work either.

687
00:31:26,640 --> 00:31:29,329
And I think that's the thing we need to keep in mind.

688
00:31:29,339 --> 00:31:30,689
You know, one thing it occurs to me,

689
00:31:30,699 --> 00:31:32,449
one thing that would really help here is if lets

690
00:31:32,469 --> 00:31:35,560
and Crypt had a very easy solution for internal certificates.

691
00:31:35,819 --> 00:31:38,109
I know, I wish they did that. I've, uh,

692
00:31:38,280 --> 00:31:39,310
I know

693
00:31:39,439 --> 00:31:40,859
because I've done the thing where I literally

694
00:31:41,180 --> 00:31:44,140
actually, I did this for a public facing mail certificate

695
00:31:44,400 --> 00:31:45,859
where I would basically have.

696
00:31:45,869 --> 00:31:49,099
I had the mail server running a little stub web server to

697
00:31:49,109 --> 00:31:51,819
get the let's encrypt certificate and keep it up to date.

698
00:31:51,989 --> 00:31:54,550
And then I just had the mail server use that same certificate.

699
00:31:54,750 --> 00:31:58,069
I know and you can do like some DNS shenanigans and whatnot.

700
00:31:58,079 --> 00:32:01,699
But I, I do, I understand completely. I do. It would be love

701
00:32:02,030 --> 00:32:03,780
if that was a thing but it's not.

702
00:32:03,880 --> 00:32:05,800
Well, it, it's supported with ACNE.

703
00:32:05,810 --> 00:32:09,780
You can do DNS control and, like, with a dynamic DNS provider you could set up.

704
00:32:09,790 --> 00:32:13,810
But I wish there was just like a, like a turn it on and it works and me not having to dip

705
00:32:13,969 --> 00:32:15,949
around with some dynamic DNS provider.

706
00:32:16,140 --> 00:32:16,280
Oh,

707
00:32:16,959 --> 00:32:18,430
I have a suspicion.

708
00:32:18,560 --> 00:32:24,020
There isn't a good way to do it securely so people can't, like, do crazy things on like

709
00:32:24,339 --> 00:32:27,359
internal coffee shop networks or whatever. But

710
00:32:27,569 --> 00:32:30,839
anyway, I'm gonna call this one before we start making up too much crap.

711
00:32:30,849 --> 00:32:32,630
Thank you, Kurt. Thank you everyone for listening.

712
00:32:32,640 --> 00:32:34,750
Go to open source security podcast.com. Hit up the show. Not

713
00:32:34,859 --> 00:32:34,880
two

714
00:32:35,000 --> 00:32:35,160
Z Podos

715
00:32:35,510 --> 00:32:39,709
-- has podcast. Hashtag on Mastodon. Kurt have a marvelous rest of your day.
-- You too.

716
00:32:39,719 --> 00:32:42,469
-- Thanks everybody.
-- Thanks everyone. Bye bye.