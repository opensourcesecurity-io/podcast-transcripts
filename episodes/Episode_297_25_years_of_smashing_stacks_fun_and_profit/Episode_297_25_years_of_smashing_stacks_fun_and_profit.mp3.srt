0
00:00:00,009 --> 00:00:04,010
We can link this in the show notes. But it's my interview with Elias Lovey from 2001.

1
00:00:04,289 --> 00:00:06,920
-- God Almighty. That was a long time ago.
-- That is a long time

2
00:00:06,929 --> 00:00:07,309
ago.

3
00:00:07,429 --> 00:00:11,270
-- That's two
-- decades. I bet half our listeners weren't alive in 2001. Kurt.

4
00:00:17,040 --> 00:00:20,040
Hello and welcome to the open source security podcast with myself,

5
00:00:20,049 --> 00:00:22,780
Kurt Siefried and my partner in being old Josh Bresser.

6
00:00:22,790 --> 00:00:25,819
It's true. Well, you know, it's funny because, I mean, it's

7
00:00:26,030 --> 00:00:29,450
like my parents just, they're at the point where, you know, if you ask my mom,

8
00:00:29,459 --> 00:00:30,229
how long have you been married?

9
00:00:30,239 --> 00:00:34,419
She has to think about it and she's like 52 no, 53. Like, you know, it's been a while

10
00:00:35,180 --> 00:00:38,139
and I get that, you know, like I'm at the age now where I'm kind of like, yeah,

11
00:00:38,150 --> 00:00:39,159
I'm just old.

12
00:00:39,369 --> 00:00:41,479
Like I've stopped caring about the number because it's just,

13
00:00:41,939 --> 00:00:42,720
it's old.

14
00:00:43,409 --> 00:00:43,959
But

15
00:00:44,529 --> 00:00:46,119
yeah, today is a special anniversary.

16
00:00:46,290 --> 00:00:47,939
Well, it's not technically today,

17
00:00:48,119 --> 00:00:48,150
but

18
00:00:48,270 --> 00:00:48,840
we'll say

19
00:00:49,450 --> 00:00:50,020
in the,

20
00:00:50,340 --> 00:00:56,080
in the recent span of days, I, I guess I would call it industry changing,

21
00:00:56,490 --> 00:01:01,919
paper smashing the stack for fun and profit. When appeared in Frack, 49

22
00:01:02,560 --> 00:01:04,980
was published. I mean, 25 years. That's,

23
00:01:05,819 --> 00:01:07,879
it's old enough to drink in the United States,

24
00:01:08,500 --> 00:01:09,169
uh,

25
00:01:09,330 --> 00:01:11,660
in pretty much every jurisdiction in the world even where it is.

26
00:01:11,860 --> 00:01:13,870
You have to be 25 or something. Ridiculous.

27
00:01:13,949 --> 00:01:15,949
I don't know if there's any, there might be, but

28
00:01:16,069 --> 00:01:20,220
there are some, it's really funny because I remember when this came out and it was,

29
00:01:20,569 --> 00:01:23,129
it felt big back then

30
00:01:23,419 --> 00:01:26,769
and I think it is even bigger today because there's

31
00:01:26,989 --> 00:01:31,129
so much of, of our whole industry

32
00:01:31,260 --> 00:01:35,440
that I think you can trace roots back to this particular paper.

33
00:01:35,449 --> 00:01:37,000
Well, and not just the paper but the one.

34
00:01:37,106 --> 00:01:37,125
Uh

35
00:01:37,305 --> 00:01:41,655
so for those of you who don't know, he goes by the uh the hacker handle A F

36
00:01:41,846 --> 00:01:45,405
one. And if you want to read about why that is, it's an actually uh

37
00:01:45,606 --> 00:01:46,335
we'll post on the notes, a

38
00:01:46,545 --> 00:01:49,596
link to an interview I did with him back in 2001

39
00:01:50,375 --> 00:01:54,045
like so old. But what's fascinating to me is his Wikipedia entry.

40
00:01:54,055 --> 00:01:55,886
Uh entry is super short,

41
00:01:56,045 --> 00:01:59,005
but I would say between smashing the snack for fun and profit

42
00:01:59,146 --> 00:02:02,636
and oh, you know, the minor thing of moderating bug track,

43
00:02:02,655 --> 00:02:05,396
he had a very formative like like a madame

44
00:02:05,716 --> 00:02:07,912
C level of formation on our industry.

45
00:02:08,061 --> 00:02:11,822
I mean, I agree. OK. Why don't we set some of this up?

46
00:02:11,832 --> 00:02:14,222
Because there's going to be people who don't know what

47
00:02:14,231 --> 00:02:17,951
bug track was or what Frack is Frack still is

48
00:02:18,222 --> 00:02:18,472
and

49
00:02:18,951 --> 00:02:20,701
all of this. So let's start with bug

50
00:02:20,832 --> 00:02:22,501
-- track. What was bug
-- track? Bug

51
00:02:22,621 --> 00:02:26,582
track was? I think basically the first security mailing list that was public.

52
00:02:26,651 --> 00:02:28,511
It was, it was always back in the day.

53
00:02:28,522 --> 00:02:31,731
It was bug track and full disclosure were the two. I

54
00:02:31,972 --> 00:02:34,082
think everyone paid attention to

55
00:02:34,789 --> 00:02:39,020
and bug track through a series of acquisitions is now dead. And I love that

56
00:02:39,179 --> 00:02:41,809
the, the latest holder of, at accenture announced, you know,

57
00:02:41,820 --> 00:02:44,750
we're shutting it down on January 15th of 2021.

58
00:02:44,979 --> 00:02:48,330
And then the next day they're like, oh, January 16th, they're like, oh, no.

59
00:02:48,339 --> 00:02:50,320
Uh, there's push back and people cried

60
00:02:50,660 --> 00:02:53,649
and we're going to do something with it and of course, nothing has been done with it.

61
00:02:53,660 --> 00:02:54,850
It's dead, like it's

62
00:02:55,240 --> 00:02:59,679
dead dead. Like, like not Princess Bride dead, but like proper dead.

63
00:03:00,509 --> 00:03:01,820
Well, I, I think

64
00:03:02,110 --> 00:03:09,220
that is a normal human response is people like us hear about a thing that we hold

65
00:03:09,610 --> 00:03:12,710
in a special place in our, our memories, like bug

66
00:03:12,850 --> 00:03:15,179
track and we think, oh, you can't possibly shut that down.

67
00:03:15,190 --> 00:03:16,869
-- But those
-- stupid little mcdonald's cookies.

68
00:03:17,089 --> 00:03:17,889
-- Yeah.
-- Right.

69
00:03:17,910 --> 00:03:20,460
But when, I mean, when was the last time bug track had, like,

70
00:03:20,470 --> 00:03:22,500
legitimate and serious mail sent to it.

71
00:03:23,050 --> 00:03:23,089
Yeah.

72
00:03:23,320 --> 00:03:23,789
Well, even though

73
00:03:24,529 --> 00:03:24,699
it's,

74
00:03:24,929 --> 00:03:28,009
-- it's there, you know, it's just vendor announcements basically.
-- Now

75
00:03:28,139 --> 00:03:33,199
I would say the communications mediums for security teams

76
00:03:33,490 --> 00:03:34,570
has changed.

77
00:03:34,990 --> 00:03:39,449
Right. It's no longer mailing lists like it used to be and that's ok.

78
00:03:39,460 --> 00:03:42,160
Like things change. It is how it works.

79
00:03:44,100 --> 00:03:45,250
Yeah. And so,

80
00:03:45,440 --> 00:03:46,139
ok, so, bug

81
00:03:46,240 --> 00:03:47,979
track. What about Frack?

82
00:03:48,139 --> 00:03:48,619
What is Fr?

83
00:03:50,869 --> 00:03:51,050
Yeah.

84
00:03:51,139 --> 00:03:54,320
Well, and that's the thing, some of these things, just like the Eff and Frack,

85
00:03:54,330 --> 00:03:56,130
I think they'll probably be around in 200 years.

86
00:03:56,679 --> 00:03:58,380
-- I certainly hope so.
-- Yeah.

87
00:03:58,589 --> 00:03:59,649
So, Frack is,

88
00:04:00,550 --> 00:04:02,610
well, I mean, what can I say? Other than it's the

89
00:04:03,119 --> 00:04:04,169
hacking magazine,

90
00:04:04,479 --> 00:04:06,350
it's not a magazine. It's an e,

91
00:04:07,380 --> 00:04:07,729
sorry e,

92
00:04:08,740 --> 00:04:09,289
you

93
00:04:09,509 --> 00:04:09,740
know, come

94
00:04:09,860 --> 00:04:12,839
-- on.
-- I just in my mind, well, I think in my mind,

95
00:04:13,210 --> 00:04:14,869
well, and that's interesting because, yeah,

96
00:04:14,880 --> 00:04:16,670
back in the day magazines and books were

97
00:04:16,678 --> 00:04:18,798
legitimate and this online stuff was not legitimate

98
00:04:18,809 --> 00:04:20,059
and now I would say the online stuff

99
00:04:20,070 --> 00:04:22,079
is probably more legitimate than printed out crap.

100
00:04:22,089 --> 00:04:26,190
So, in my mind it's, it's a magazine, it's legit, it's online, it's the real deal,

101
00:04:26,200 --> 00:04:27,109
you know, it's not some

102
00:04:27,290 --> 00:04:28,334
wanna be the

103
00:04:28,674 --> 00:04:33,804
kitty website with some content on it, you know, compared to the, like, oh, like,

104
00:04:33,845 --> 00:04:35,984
I literally wrote the security column for a Linux

105
00:04:36,065 --> 00:04:37,885
journal for eight years monthly and it was,

106
00:04:37,894 --> 00:04:41,304
like, real because it's in print and, you know, that impressed a lot of people

107
00:04:41,635 --> 00:04:43,184
whereas honestly, like

108
00:04:43,989 --> 00:04:46,489
Frack has better content than the stuff I put out.

109
00:04:46,739 --> 00:04:49,359
Oh. Right. Right. Frack is some of the best

110
00:04:50,000 --> 00:04:52,790
-- agreed quickly on that one.
-- It's not, yeah,

111
00:04:52,899 --> 00:04:53,850
I'm not gonna pretend

112
00:04:54,160 --> 00:04:55,809
like there's no point in lying

113
00:04:56,230 --> 00:04:56,929
but and FR

114
00:04:57,049 --> 00:04:59,399
is still being published. Episode, episode

115
00:04:59,529 --> 00:05:02,850
issue 71 came out a couple of months ago.

116
00:05:03,410 --> 00:05:07,730
So that's awesome. I love seeing some of this stuff continue its life.

117
00:05:07,739 --> 00:05:09,609
It's, it's marvelous. Ok.

118
00:05:09,910 --> 00:05:14,869
So Frack issue 49 we're on issue 71 now to

119
00:05:14,880 --> 00:05:16,489
give you an idea of what we're talking about here.

120
00:05:16,500 --> 00:05:16,670
And this

121
00:05:17,279 --> 00:05:18,899
is an easy, that comes out

122
00:05:19,079 --> 00:05:21,410
maybe once a year, sometimes

123
00:05:22,239 --> 00:05:22,890
when it's ready.

124
00:05:23,260 --> 00:05:25,290
Yes, that's exactly. Exactly.

125
00:05:25,630 --> 00:05:28,929
So, in, in issue 49

126
00:05:29,040 --> 00:05:33,209
which was published in 1996 to give you an idea,

127
00:05:33,380 --> 00:05:34,209
which

128
00:05:35,279 --> 00:05:37,529
I was a teenager in

129
00:05:37,640 --> 00:05:37,660
the

130
00:05:37,910 --> 00:05:38,649
46.

131
00:05:39,529 --> 00:05:40,260
I don't,

132
00:05:40,619 --> 00:05:42,260
I have a 46. I might,

133
00:05:43,250 --> 00:05:43,470
I was

134
00:05:44,459 --> 00:05:45,239
still on my 386.

135
00:05:45,390 --> 00:05:47,420
-- I
-- probably, I was either. So

136
00:05:47,540 --> 00:05:53,700
I had a 3 86 25 megahertz with four megabytes of ra M. Mind you any 100 meg hard drive.

137
00:05:53,709 --> 00:05:54,739
It was very nice.

138
00:05:55,309 --> 00:05:55,760
Yeah.

139
00:05:56,160 --> 00:05:58,950
And then I went from that to a Pentium and it would have been right

140
00:05:58,959 --> 00:06:02,670
around this time that I made the jump because I went to a Pentium.

141
00:06:02,679 --> 00:06:05,239
-- Was it 166?
-- I think it was,

142
00:06:05,440 --> 00:06:07,230
that would have been a fast machine back then.

143
00:06:07,329 --> 00:06:11,399
I remember it came with a, a four gigabyte hard drive and I was like,

144
00:06:11,410 --> 00:06:12,839
I will never fill this out.

145
00:06:13,149 --> 00:06:13,619
And

146
00:06:13,760 --> 00:06:15,440
it took about three months, I think

147
00:06:15,850 --> 00:06:18,829
downloading wares off of FTP sites.

148
00:06:19,239 --> 00:06:20,179
But anyway, anyway,

149
00:06:20,290 --> 00:06:20,929
so

150
00:06:21,989 --> 00:06:25,570
if one publishes smashing the stack for fun and profit and

151
00:06:25,920 --> 00:06:29,859
this changed everything for a lot of people because I think

152
00:06:30,049 --> 00:06:35,660
smashing the stack for exploiting vulnerabilities. It wasn't a new idea,

153
00:06:35,929 --> 00:06:37,940
but it was very dark magic.

154
00:06:37,950 --> 00:06:39,109
-- I think prior to
-- this,

155
00:06:39,200 --> 00:06:42,380
it was simply like launching a rocket to the moon in the early sixties.

156
00:06:42,429 --> 00:06:45,179
-- Yeah.
-- Right. Right. It was, you had to have

157
00:06:45,649 --> 00:06:46,910
very specialized knowledge.

158
00:06:46,920 --> 00:06:47,790
And I mean, this,

159
00:06:47,799 --> 00:06:53,429
this paper is where I gained like all of my knowledge around how to

160
00:06:53,440 --> 00:06:55,920
exploit buffer overflow stack based buffer overflow

161
00:06:55,929 --> 00:06:57,510
specifically because back in these days,

162
00:06:57,519 --> 00:06:59,470
we didn't yet know how to exploit

163
00:06:59,769 --> 00:07:01,350
buffer overflows correctly.

164
00:07:01,799 --> 00:07:03,170
So, but at the same time,

165
00:07:03,179 --> 00:07:05,950
like everyone used the stack for everything because we sucked at programming.

166
00:07:05,959 --> 00:07:07,709
-- So it's fine.
-- No, it's well.

167
00:07:07,720 --> 00:07:11,190
And that's the thing you said, not, it's not just the knowledge but the tools,

168
00:07:11,920 --> 00:07:13,609
right? We we barely had,

169
00:07:14,559 --> 00:07:18,059
I remember seeing my first hack editor and I was like, whoa

170
00:07:18,519 --> 00:07:21,179
I'm looking at the code like, like, you know what I mean?

171
00:07:21,190 --> 00:07:22,790
Like it was that scene from hackers or whatever,

172
00:07:22,920 --> 00:07:27,190
like literally tools. Like I remember when debugging tools

173
00:07:27,399 --> 00:07:28,750
as terrible as they were

174
00:07:29,019 --> 00:07:31,130
like, were a huge,

175
00:07:31,519 --> 00:07:33,980
huge step forwards from having nothing.

176
00:07:33,989 --> 00:07:37,299
Like literally you had a crash dump and a hex editor. Good luck.

177
00:07:37,540 --> 00:07:37,959
That's right.

178
00:07:38,100 --> 00:07:40,410
That's right. You know, break points, what the heck's a breakpoint.

179
00:07:40,630 --> 00:07:41,299
And so

180
00:07:41,529 --> 00:07:45,059
one of the reasons we want to discuss this paper isn't to

181
00:07:45,160 --> 00:07:49,420
go on nostalgically about how amazing it was but rather to talk about

182
00:07:49,429 --> 00:07:52,899
kind of how did it help usher us into where we are today?

183
00:07:52,910 --> 00:07:56,899
Because for example, if you take smashing the stack for fun and profit today

184
00:07:57,119 --> 00:07:58,899
and you sit down on a Linux machine,

185
00:07:59,399 --> 00:08:01,459
you can't actually go through

186
00:08:01,619 --> 00:08:02,579
the exploits

187
00:08:02,809 --> 00:08:06,750
because there's a bunch of things in place now that make it not possible. I mean, you,

188
00:08:08,119 --> 00:08:09,179
you could

189
00:08:09,279 --> 00:08:12,019
configure the system in a manner that makes it possible.

190
00:08:12,140 --> 00:08:13,489
But by default,

191
00:08:13,920 --> 00:08:15,940
it doesn't work anymore. And that's really cool.

192
00:08:15,950 --> 00:08:19,339
And you can trace all of these modern protections back

193
00:08:19,739 --> 00:08:22,100
to this paper, which is cool.

194
00:08:22,109 --> 00:08:25,529
So, let me, let me kind of start explaining what we have here because I, I think

195
00:08:25,880 --> 00:08:27,130
given it doesn't work.

196
00:08:27,140 --> 00:08:29,899
Not everyone understands what smashing the stack even means.

197
00:08:29,910 --> 00:08:32,530
Well, in fairness, there are people who are,

198
00:08:32,710 --> 00:08:34,020
even if you're not

199
00:08:34,299 --> 00:08:36,289
younger than this paper. Like, if you're 40

200
00:08:36,590 --> 00:08:38,500
you were 15 years old when this paper came out

201
00:08:38,710 --> 00:08:40,270
and basically the fixing the,

202
00:08:40,469 --> 00:08:42,150
like, fixing all this stuff happened before.

203
00:08:42,159 --> 00:08:45,580
You probably learned a lot about computers. Like, it's just, it's so old. It's like,

204
00:08:45,710 --> 00:08:47,250
it's like, um,

205
00:08:47,440 --> 00:08:49,289
I'm trying to think of, it's like whooping cough.

206
00:08:50,270 --> 00:08:50,609
Right.

207
00:08:50,640 --> 00:08:54,179
Most people don't know what the heck whooping cough is because it's so old timey.

208
00:08:54,289 --> 00:08:55,989
That's right. That's right. Yes. Ok.

209
00:08:56,010 --> 00:08:59,869
So here's how this works is back in the days of yore.

210
00:08:59,880 --> 00:09:04,900
Well, even today, I guess so, in the, in the world of executing computer code, right.

211
00:09:04,909 --> 00:09:06,619
We're talking binaries here running

212
00:09:06,789 --> 00:09:10,179
on the CPU doing their business. There's kind of two

213
00:09:10,349 --> 00:09:11,419
things you have to think about.

214
00:09:11,429 --> 00:09:14,150
There's what's called the heap and there's what's called the stack.

215
00:09:14,159 --> 00:09:17,369
And the heap is like when you hear people talk about allocating memory,

216
00:09:17,549 --> 00:09:20,049
you're allocating memory in the heap. OK?

217
00:09:20,059 --> 00:09:22,289
And when you're like an old school c programmer,

218
00:09:22,530 --> 00:09:24,520
you have to allocate memory and then you have

219
00:09:24,530 --> 00:09:26,330
to free the memory when you're not using it.

220
00:09:26,469 --> 00:09:30,450
-- Modern languages don't have this problem.
-- Garbage collection is a, is a good thing.

221
00:09:30,820 --> 00:09:34,090
-- Yeah, it's, it's very hard to do,
-- right? Not only is it hard to do, right?

222
00:09:34,099 --> 00:09:35,349
But efficiently

223
00:09:36,000 --> 00:09:38,789
if you want right hand efficient, then you, you need wizards.

224
00:09:39,450 --> 00:09:39,530
Uh

225
00:09:39,690 --> 00:09:41,169
you need rust. But

226
00:09:43,000 --> 00:09:46,010
so, so the stack is what we're going to talk about today.

227
00:09:46,090 --> 00:09:51,010
So the idea behind a stack is you have your program and you call subroutines

228
00:09:51,150 --> 00:09:53,099
and you have variables that live on the stack.

229
00:09:53,109 --> 00:09:56,270
And the stack is literally think of it like a stack of stuff. OK?

230
00:09:56,369 --> 00:09:59,729
Where it's the idea is last in first out where you can

231
00:09:59,739 --> 00:10:02,260
push things onto the stack and you can pull them back off,

232
00:10:02,270 --> 00:10:03,780
but you can only pull things off in order.

233
00:10:03,864 --> 00:10:04,075
Yeah.

234
00:10:04,085 --> 00:10:07,804
So what happens when you're executing a program is, let's say I go,

235
00:10:07,815 --> 00:10:09,145
I jump to a subroutine.

236
00:10:09,155 --> 00:10:11,505
What it's going to do is basically push the

237
00:10:11,515 --> 00:10:14,255
current state of where I'm at onto the stack

238
00:10:14,364 --> 00:10:16,025
and it's going to jump into the subroutine.

239
00:10:16,034 --> 00:10:22,315
And one of the things that is pushed onto the stack is the address to return to

240
00:10:22,544 --> 00:10:24,575
when we're done with our subroutine. OK?

241
00:10:25,640 --> 00:10:25,820
Now,

242
00:10:25,830 --> 00:10:28,340
the way this works is let's say we have some variables in

243
00:10:28,349 --> 00:10:31,780
the subroutine we jump to that are what's called a stack variable.

244
00:10:31,789 --> 00:10:32,179
OK.

245
00:10:33,030 --> 00:10:36,650
Stack variables on the stack you can imagine, right? So we're piling these things up

246
00:10:36,950 --> 00:10:40,450
and as you write to them, if we imagine the stacker from the bottom to the top,

247
00:10:40,479 --> 00:10:41,849
as you write variables,

248
00:10:41,859 --> 00:10:45,039
you write them from the top of the variable to the bottom of the variable.

249
00:10:45,049 --> 00:10:45,549
OK?

250
00:10:45,909 --> 00:10:50,340
Now the address we return to is underneath these variables.

251
00:10:50,609 --> 00:10:53,090
So if I have, let's say a string

252
00:10:53,859 --> 00:10:54,479
and

253
00:10:54,809 --> 00:10:57,940
I can write as much data as I want into the string,

254
00:10:58,440 --> 00:11:00,840
I can overwrite the return address

255
00:11:01,309 --> 00:11:04,119
that's on the stack. And so that means when the subroutine

256
00:11:04,460 --> 00:11:05,380
exits,

257
00:11:05,500 --> 00:11:06,719
we now jump

258
00:11:06,900 --> 00:11:08,520
to whatever I wrote

259
00:11:08,849 --> 00:11:10,200
into the return address.

260
00:11:10,630 --> 00:11:12,679
And this is well before

261
00:11:12,849 --> 00:11:14,039
address stack lay

262
00:11:14,169 --> 00:11:17,119
randomization and other such tricks were even

263
00:11:17,130 --> 00:11:18,919
even thought about let alone implemented.

264
00:11:18,929 --> 00:11:21,549
Well, we'll talk about those in a minute because those are very,

265
00:11:21,559 --> 00:11:23,239
very important for this story.

266
00:11:23,409 --> 00:11:24,760
But so the idea is

267
00:11:25,369 --> 00:11:27,760
I if you read snatching the stack for fun and profit,

268
00:11:27,770 --> 00:11:30,590
they they explain all of this much better than I am for sure.

269
00:11:30,599 --> 00:11:32,429
So I I would highly recommend going to read it.

270
00:11:32,750 --> 00:11:35,099
But then so basically it just explains to you how

271
00:11:35,109 --> 00:11:38,669
the stack works and it shows you how you can exploit

272
00:11:38,830 --> 00:11:43,630
security issues for stack buffer overflows to overwrite the return

273
00:11:43,640 --> 00:11:46,640
address to then execute the code of your choosing.

274
00:11:46,830 --> 00:11:49,130
When you hear about people talk about shell code.

275
00:11:49,140 --> 00:11:52,820
The idea behind shell code is I put some special,

276
00:11:52,830 --> 00:11:57,130
I basically put a program somewhere in memory and then I tell

277
00:11:57,530 --> 00:12:02,820
II I as part of my attack payload, I then say, OK, jump to the,

278
00:12:02,960 --> 00:12:06,950
the code in this location, which is my shell code I put in

279
00:12:07,229 --> 00:12:11,070
and then that makes the program execute whatever I want it to. And back in the day

280
00:12:11,250 --> 00:12:13,289
it was just a bash shell. It was

281
00:12:13,739 --> 00:12:16,099
-- maybe not even bash and I was
-- going to say it,

282
00:12:16,280 --> 00:12:17,849
yeah, it would be a local shell.

283
00:12:17,859 --> 00:12:20,320
It wouldn't even be like a network listening shell because again,

284
00:12:20,500 --> 00:12:21,919
we hadn't invented that yet.

285
00:12:21,929 --> 00:12:25,090
I remember the first time I saw a network listening shell and I was like, yeah,

286
00:12:25,099 --> 00:12:27,049
my jaw dropped because it was amazing.

287
00:12:27,059 --> 00:12:27,890
That's right. That's right.

288
00:12:28,299 --> 00:12:29,039
So OK,

289
00:12:29,159 --> 00:12:33,239
so that's kind of the, the poorly described primer

290
00:12:33,390 --> 00:12:34,239
on what

291
00:12:34,530 --> 00:12:36,190
smashing the stack means.

292
00:12:36,320 --> 00:12:41,109
And again, go read the paper. It does a very nice job. And when, when this came out like

293
00:12:41,570 --> 00:12:45,559
-- this changed everything for everyone. He
-- showed that it was possible

294
00:12:47,210 --> 00:12:49,770
and not just that he showed it was possible like did a demo on stage,

295
00:12:49,780 --> 00:12:52,440
but like here's the instructions you can replicate this.

296
00:12:52,460 --> 00:12:53,059
That's right.

297
00:12:53,070 --> 00:12:55,700
And it was very easy to replicate because there were,

298
00:12:55,710 --> 00:12:57,250
there were basically no protections.

299
00:12:57,260 --> 00:12:59,530
I mean, this wasn't an attack anyone

300
00:13:00,099 --> 00:13:05,070
I think had really understood and it was, it was, it was black magic.

301
00:13:05,270 --> 00:13:09,609
And so it was easy to disregard as, oh, we don't really have to worry about that.

302
00:13:09,619 --> 00:13:12,530
Oh, there's a stack buffer overflow. Yeah, it's a bug, whatever.

303
00:13:12,539 --> 00:13:13,849
We'll just fix it later.

304
00:13:14,460 --> 00:13:15,059
And

305
00:13:15,500 --> 00:13:19,719
this, this brought this knowledge down from the mountain to the masses right

306
00:13:20,250 --> 00:13:20,859
now.

307
00:13:20,869 --> 00:13:25,169
The really cool thing though is so, so some of the reasons this doesn't work anymore,

308
00:13:25,179 --> 00:13:26,400
I think are really important.

309
00:13:26,789 --> 00:13:29,289
So I talked about overriding

310
00:13:29,729 --> 00:13:32,559
the variables into your return address, right?

311
00:13:33,190 --> 00:13:35,479
So the way we fix that was really clever.

312
00:13:35,489 --> 00:13:37,650
We created this thing called the step canary.

313
00:13:38,070 --> 00:13:42,679
And so what happens now is between the return address

314
00:13:43,179 --> 00:13:44,549
and the data,

315
00:13:44,789 --> 00:13:47,780
there is what's called the canary and it's just basically

316
00:13:47,789 --> 00:13:50,710
a little bit of information that's a random string.

317
00:13:51,109 --> 00:13:57,070
And before we jump to our return address, we say has this string changed?

318
00:13:57,450 --> 00:14:00,979
If it's changed, we know shenanigans are afoot

319
00:14:01,130 --> 00:14:03,000
and we should just crash the program,

320
00:14:03,630 --> 00:14:04,979
right? Don't execute it.

321
00:14:05,150 --> 00:14:09,609
And like that, that sounds super simple. But this was a huge deal at the time.

322
00:14:09,700 --> 00:14:12,559
Yeah, I just, I had to look it up because it's so old. I,

323
00:14:12,679 --> 00:14:13,969
I honestly had forgotten about

324
00:14:14,229 --> 00:14:17,049
secondaries because it's been, they were invented in 1997.

325
00:14:17,299 --> 00:14:18,010
And they just

326
00:14:18,320 --> 00:14:19,140
work

327
00:14:19,559 --> 00:14:20,770
kind of mostly.

328
00:14:21,059 --> 00:14:23,270
-- Yeah,
-- I mean, they, they're so stack canaries.

329
00:14:23,280 --> 00:14:28,969
It should be said those are compiler technologies. When you compile your C code,

330
00:14:29,309 --> 00:14:32,809
I think they're on by default. Now, in all the compilers they didn't used to be,

331
00:14:33,049 --> 00:14:33,539
but

332
00:14:33,640 --> 00:14:37,119
not these days when you build ac program into a binary,

333
00:14:37,130 --> 00:14:40,630
-- it's going to insert stat canaries all over the place
-- and sorry.

334
00:14:40,640 --> 00:14:41,179
This is another

335
00:14:41,440 --> 00:14:44,210
I remembered it was, it was invented by Crispin Cohen,

336
00:14:44,219 --> 00:14:46,210
who's the guy that also invented app Armor.

337
00:14:46,400 --> 00:14:49,200
Yeah, that's right. That's right. And he was working, I think, was it Nets

338
00:14:49,510 --> 00:14:51,150
D at the time he was working on,

339
00:14:52,080 --> 00:14:54,739
-- that was so long ago. I mean, it's,
-- my brain doesn't even

340
00:14:54,750 --> 00:14:55,169
remember. This

341
00:14:55,590 --> 00:14:57,320
is like discussing the middle ages,

342
00:14:57,549 --> 00:14:57,590
the

343
00:14:57,710 --> 00:14:57,780
dark

344
00:14:58,039 --> 00:15:01,119
-- ages.
-- It is, I mean, it is the middle ages of computers for sure.

345
00:15:01,130 --> 00:15:02,309
I would agree with that.

346
00:15:02,650 --> 00:15:04,960
Yeah. Chrisman Cohen did the work and

347
00:15:05,440 --> 00:15:07,820
it's funny because I think now if someone did this,

348
00:15:07,830 --> 00:15:09,630
they probably patent the crap out of it.

349
00:15:09,700 --> 00:15:09,840
And

350
00:15:11,659 --> 00:15:12,479
like,

351
00:15:13,369 --> 00:15:13,789
but

352
00:15:14,130 --> 00:15:14,500
it,

353
00:15:15,669 --> 00:15:18,909
so I don't think it is a coincidence that

354
00:15:19,320 --> 00:15:21,280
smashing the stack paper comes out and then

355
00:15:21,289 --> 00:15:23,619
Chrisman Cohen invents stack canaries a year later.

356
00:15:24,039 --> 00:15:27,380
I mean, that was kind of a stick was inventing security technologies to, you know.

357
00:15:28,299 --> 00:15:28,750
Yeah,

358
00:15:29,250 --> 00:15:30,520
that's kind of what he does.

359
00:15:30,770 --> 00:15:33,440
Yeah. Right. I mean, it's your typical game of cat and mouse, right?

360
00:15:33,450 --> 00:15:38,229
Where you have the Attackers attack and then the defenders can defend.

361
00:15:38,239 --> 00:15:42,719
Well, and I mean, it still goes on today, like my favorite being, um, a few years ago,

362
00:15:42,729 --> 00:15:45,200
all those CPU hardware

363
00:15:45,520 --> 00:15:47,200
ish, I guess, issues,

364
00:15:47,520 --> 00:15:48,719
you know. And,

365
00:15:49,440 --> 00:15:50,460
yeah, I mean,

366
00:15:50,880 --> 00:15:54,520
the new CP US, you look at some of the capabilities in the new A MD and Intel CP US.

367
00:15:54,530 --> 00:15:55,479
And it's like, oh, man,

368
00:15:55,760 --> 00:15:59,190
like, I wish you had that 10 years ago, but, well, we have it now better, you know,

369
00:15:59,200 --> 00:16:00,460
better now than never.

370
00:16:00,469 --> 00:16:04,580
That's right. That's right. OK. So let's keep going. So let's assume

371
00:16:05,039 --> 00:16:07,770
we turned off stack canaries in the compiler which you can do.

372
00:16:07,780 --> 00:16:10,380
It's a flag and I built the C program,

373
00:16:10,690 --> 00:16:12,200
it's still not going to work, right?

374
00:16:12,450 --> 00:16:18,059
Because we also have this really cool idea. We call address space randomization.

375
00:16:18,500 --> 00:16:18,890
It's a

376
00:16:19,580 --> 00:16:22,309
I address space layer randomization that that's what it is, right?

377
00:16:22,780 --> 00:16:24,340
And so one of the,

378
00:16:24,979 --> 00:16:27,229
I guess interesting things you will learn if you read,

379
00:16:27,239 --> 00:16:29,250
smashing the stack for fun and profit is

380
00:16:29,690 --> 00:16:31,210
you compile a program

381
00:16:31,330 --> 00:16:33,989
and then you run it and the memory location of all

382
00:16:34,000 --> 00:16:36,650
the stuff is the same every time you run it.

383
00:16:36,659 --> 00:16:40,460
And that's really important because basically you run your program, you crash it

384
00:16:40,739 --> 00:16:42,590
and then you look at the memory locations,

385
00:16:42,890 --> 00:16:45,799
then the next time you run it, you know what the locations are.

386
00:16:45,809 --> 00:16:47,309
So you can start inserting

387
00:16:47,440 --> 00:16:52,080
like correct memory values to jump to the places you want to jump to, right.

388
00:16:52,090 --> 00:16:52,869
That makes sense.

389
00:16:53,080 --> 00:16:57,549
Was it Gen two Linux that basically you compiled from scratch every machine?

390
00:16:57,750 --> 00:16:58,190
Yes.

391
00:16:58,359 --> 00:17:01,460
And so I remember one security consultant arguing that Gen two.

392
00:17:01,469 --> 00:17:03,669
Linux was the best Linux for security

393
00:17:03,859 --> 00:17:07,719
because it had to be compiled on every machine. Every instance of Gen two.

394
00:17:07,729 --> 00:17:09,180
Linux was unique. And the

395
00:17:09,550 --> 00:17:13,959
essentially, it's somewhat randomized layout of the memory on a per machine basis.

396
00:17:14,160 --> 00:17:16,739
I mean, that is technically true.

397
00:17:16,750 --> 00:17:21,920
It, it wouldn't work given the techniques we have today that probably wouldn't fly.

398
00:17:22,098 --> 00:17:24,250
-- Yeah. No,
-- now it wouldn't work. But back in the day

399
00:17:24,560 --> 00:17:25,650
it might have, it might,

400
00:17:25,760 --> 00:17:30,300
I mean, one of the favorites now is you just need to get close to the memory address.

401
00:17:30,310 --> 00:17:33,880
And in gen two, we're, we're talking about you'd be a couple bites different.

402
00:17:33,890 --> 00:17:37,020
You're not going to be like huge amounts different when

403
00:17:37,030 --> 00:17:39,849
you would recompile something necessarily because the compilers are,

404
00:17:39,859 --> 00:17:41,859
are fairly reproducible in that regard.

405
00:17:42,260 --> 00:17:45,030
And so one of the things you do now is you create what's called a Knop

406
00:17:45,140 --> 00:17:45,680
sled

407
00:17:45,829 --> 00:17:49,719
where you basically just have a bunch of no operations in memory.

408
00:17:49,729 --> 00:17:52,800
And you know, you'll jump to somewhere around this space.

409
00:17:52,810 --> 00:17:56,030
And as long as you manage to land anywhere in your Knop

410
00:17:56,160 --> 00:17:56,630
sled,

411
00:17:56,969 --> 00:18:01,989
the the execution by the CPU, then just like slides down into your actual shell code.

412
00:18:02,000 --> 00:18:03,510
So you don't need to be close.

413
00:18:03,619 --> 00:18:04,469
But that's

414
00:18:04,650 --> 00:18:06,540
another story. So anyway,

415
00:18:06,689 --> 00:18:11,000
the reason it wouldn't work today with address based randomization

416
00:18:11,089 --> 00:18:13,760
is what happens now is when you have a binary

417
00:18:13,930 --> 00:18:17,130
instead of having the same memory addresses everywhere.

418
00:18:17,140 --> 00:18:18,989
In the application, when you run it,

419
00:18:19,439 --> 00:18:21,680
every time you start a binary,

420
00:18:21,689 --> 00:18:26,079
the kernel basically says here's a random base address

421
00:18:26,150 --> 00:18:28,099
and then everything else is based off that.

422
00:18:28,109 --> 00:18:31,729
So the way like a function call would be stored is in the past,

423
00:18:32,020 --> 00:18:34,160
you would store the literal memory address, right?

424
00:18:34,170 --> 00:18:36,380
So jump to this memory address exactly.

425
00:18:36,729 --> 00:18:37,599
Now

426
00:18:37,839 --> 00:18:40,800
what happens is it basically says jump to

427
00:18:40,969 --> 00:18:41,520
the

428
00:18:41,650 --> 00:18:43,520
random address plus,

429
00:18:43,699 --> 00:18:46,540
you know FF and that's where this function lives.

430
00:18:46,609 --> 00:18:48,359
And so that's what makes this attack

431
00:18:48,680 --> 00:18:51,739
very before you can execute it. You need a way

432
00:18:51,989 --> 00:18:53,300
to ascertain

433
00:18:53,500 --> 00:18:56,729
the the random memory address, which is cool.

434
00:18:57,199 --> 00:19:00,180
And I remember it used to be again

435
00:19:00,650 --> 00:19:04,859
black magic and now there's all, there's quite a few common techniques,

436
00:19:04,869 --> 00:19:08,119
but we've also have created workarounds or, or protections,

437
00:19:08,130 --> 00:19:09,079
I guess is a better word,

438
00:19:09,469 --> 00:19:11,579
you know, for determining what's your address and memory, right?

439
00:19:11,589 --> 00:19:15,349
Because if you look at security databases, there's there's a ton of, you know,

440
00:19:15,359 --> 00:19:16,979
this vulnerability results in

441
00:19:17,390 --> 00:19:18,099
the uh

442
00:19:18,640 --> 00:19:22,520
the the memory address being disclosed, which shouldn't matter,

443
00:19:22,579 --> 00:19:26,000
but it used to matter because we didn't have all these fancy protections.

444
00:19:26,010 --> 00:19:28,969
So like the minute you got that stack address or that memory address,

445
00:19:29,199 --> 00:19:30,930
all of a sudden your exploit became

446
00:19:31,540 --> 00:19:32,089
trivial.

447
00:19:32,380 --> 00:19:32,800
Well, no,

448
00:19:32,810 --> 00:19:35,119
I mean it still matters today because if you

449
00:19:35,130 --> 00:19:39,150
can figure out what a memory address is somewhere

450
00:19:39,369 --> 00:19:40,209
in your application,

451
00:19:40,219 --> 00:19:44,359
you could then generally use that to ascertain like where to jump to, for example,

452
00:19:44,369 --> 00:19:45,369
using another exploit.

453
00:19:45,380 --> 00:19:48,920
But the important part here is this is kind of that whole defense in depth story.

454
00:19:48,930 --> 00:19:50,920
You hear people talk about all the time is

455
00:19:51,170 --> 00:19:55,150
by now instead of needing one exploit, you need two,

456
00:19:55,540 --> 00:19:58,560
right? And that's what makes these technologies so powerful.

457
00:19:58,569 --> 00:20:01,349
And I mean, like with stat Canaries are another example is

458
00:20:01,560 --> 00:20:05,109
when you have Stat Canaries now you might need three or four things instead of one.

459
00:20:05,359 --> 00:20:07,660
And that's kind of the power in all these technologies.

460
00:20:07,670 --> 00:20:09,719
You always, I mean, I remember back in the day

461
00:20:09,890 --> 00:20:12,479
like I'm super guilty of this where security people would be like,

462
00:20:12,489 --> 00:20:14,800
oh but that doesn't stop this corner case and that's stupid.

463
00:20:14,969 --> 00:20:15,829
We shouldn't do it.

464
00:20:15,949 --> 00:20:18,780
But the reality is when you pile up like

465
00:20:18,790 --> 00:20:21,640
three or four things that aren't perfect by themselves,

466
00:20:21,650 --> 00:20:23,869
but you put them together and now you've

467
00:20:23,880 --> 00:20:27,219
gone from being mostly hard to nearly impossible,

468
00:20:27,229 --> 00:20:28,660
which is a huge difference.

469
00:20:28,689 --> 00:20:30,300
Yeah, I mean, you look at modern, well,

470
00:20:31,069 --> 00:20:35,689
like modern web browsers, you need 10 or 15 exploits to go from.

471
00:20:35,699 --> 00:20:38,689
Here's a web page to I now have control of your system.

472
00:20:39,280 --> 00:20:41,650
And the one thing that gets me about all this old stuff is

473
00:20:42,859 --> 00:20:42,890
the

474
00:20:43,010 --> 00:20:44,040
the the

475
00:20:44,280 --> 00:20:48,719
the pace of change, right? I mean, back in the day, if you had a memory address,

476
00:20:48,920 --> 00:20:50,800
uh disclosure bug in your code.

477
00:20:51,229 --> 00:20:55,040
Yeah, you could spend months fixing it. There's no big deal. There's no rush.

478
00:20:55,209 --> 00:20:55,599
And,

479
00:20:55,880 --> 00:20:58,630
yeah, that's not the case anymore. You need to fix that quickly.

480
00:20:58,770 --> 00:21:02,880
And I think that's part of it too is like I was just looking at some of these dates and

481
00:21:03,180 --> 00:21:06,609
like the Knop sled, the first sort of detection of it came in 2002, uh,

482
00:21:06,619 --> 00:21:08,550
from an attack in the wild no less.

483
00:21:08,910 --> 00:21:12,079
I believe that, which is really, that's one thing I love too is when,

484
00:21:12,729 --> 00:21:16,390
I mean, it's one thing for somebody to do a cool bit of research and release it,

485
00:21:17,199 --> 00:21:20,569
that's relatively simple and understand, like, straightforward, but

486
00:21:20,709 --> 00:21:23,969
to, to, to, to find an attack in the wild and actually, you know,

487
00:21:23,979 --> 00:21:25,969
do the forensics on it and go, oh,

488
00:21:26,130 --> 00:21:29,459
here's this totally new thing we've never seen before. Right.

489
00:21:29,469 --> 00:21:31,219
That to me is always amazing, you know,

490
00:21:32,579 --> 00:21:35,069
and so I, I still wonder, like, who invented the knob

491
00:21:35,170 --> 00:21:35,550
sled,

492
00:21:36,369 --> 00:21:38,069
right? Because some, some bad guy did it.

493
00:21:38,380 --> 00:21:38,780
Right.

494
00:21:39,650 --> 00:21:40,239
Um,

495
00:21:41,170 --> 00:21:43,959
yeah, there's so much we just take for granted now, like, well,

496
00:21:44,130 --> 00:21:46,229
like all the bits of memory protection.

497
00:21:46,359 --> 00:21:46,900
I just,

498
00:21:46,989 --> 00:21:48,579
when I think about we were literally running

499
00:21:48,589 --> 00:21:50,530
around without pants on back in the nineties.

500
00:21:50,680 --> 00:21:51,930
-- I mean,
-- yeah, but

501
00:21:52,560 --> 00:21:54,430
this is what progress looks like. Right.

502
00:21:54,459 --> 00:21:57,650
I mean, there were things that were very difficult to do.

503
00:21:57,689 --> 00:22:02,390
I mean, so, like an easy example, right? I, I graduated from college in 2001.

504
00:22:02,479 --> 00:22:06,069
And we had to do, we had to build a senior project. And what the group I did,

505
00:22:06,359 --> 00:22:07,380
the group I was in,

506
00:22:07,489 --> 00:22:11,020
we built what we called a wireless serial port

507
00:22:11,030 --> 00:22:14,500
where we basically turned serial port data into infrared,

508
00:22:14,510 --> 00:22:16,930
transmitted it to the receiver, received it.

509
00:22:16,939 --> 00:22:19,579
You could go back and forth and like our big demo was playing Doom,

510
00:22:19,689 --> 00:22:21,369
right where you had two computers playing Doom.

511
00:22:21,380 --> 00:22:23,160
And everyone's like, oh, that's amazing, you know,

512
00:22:23,530 --> 00:22:24,020
and

513
00:22:24,719 --> 00:22:27,310
back then that was extremely difficult to do.

514
00:22:27,319 --> 00:22:31,140
But now like with a raspberry pie, I could do that in two hours, you know,

515
00:22:31,150 --> 00:22:32,739
like it's not impressive.

516
00:22:32,849 --> 00:22:34,810
Well, I would just buy an off the shelf part,

517
00:22:35,410 --> 00:22:35,949
right?

518
00:22:35,959 --> 00:22:39,119
Like we, we literally, I remember we had to program an F PGA,

519
00:22:39,130 --> 00:22:42,859
which an F PGA is called the field programmable Gatorade where you basically

520
00:22:42,989 --> 00:22:43,949
like build,

521
00:22:45,030 --> 00:22:45,270
what do

522
00:22:45,380 --> 00:22:50,459
we, we had a language? Um I think it was called vhdl. If I remember correctly,

523
00:22:51,339 --> 00:22:52,040
it was

524
00:22:52,160 --> 00:22:57,790
basically, we had to, we had to build a program to read data from the serial part

525
00:22:58,000 --> 00:23:02,069
and then send it out to an infrared sender and receiver.

526
00:23:02,390 --> 00:23:03,270
And it was,

527
00:23:03,829 --> 00:23:05,880
I mean, it's so wild.

528
00:23:06,010 --> 00:23:08,079
Well, and here's the trick too. You had to do so

529
00:23:08,430 --> 00:23:10,439
quickly and efficiently, which again,

530
00:23:11,000 --> 00:23:12,160
I remember having

531
00:23:12,329 --> 00:23:16,400
serial ports with no U arts to buffer the data. And so literally

532
00:23:16,800 --> 00:23:21,439
like running a 9600 bod modem like 9600 characters per second,

533
00:23:21,709 --> 00:23:24,050
destroyed my CPU on my machine.

534
00:23:24,540 --> 00:23:27,530
And then I got, I bought uh like an add on

535
00:23:27,709 --> 00:23:33,050
isa like this is going back a ways, you know, a thing with comports with U art.

536
00:23:33,060 --> 00:23:34,170
So there's buffer chips

537
00:23:34,550 --> 00:23:39,449
and all of a sudden my CPU usage dropped to like, you know, from 40% to like 1%. Right?

538
00:23:39,459 --> 00:23:43,170
-- And
-- you just reminded me as well. We, we had to use U Arts on this.

539
00:23:44,119 --> 00:23:46,650
Yes, that's right. Oh, man, I forgot all about this.

540
00:23:47,109 --> 00:23:49,829
Like the idea I remember like, well, again,

541
00:23:49,839 --> 00:23:53,449
like you look at interrupt driven CPU stuff now and it's like, sure,

542
00:23:53,459 --> 00:23:54,010
what's the big deal?

543
00:23:54,020 --> 00:23:55,160
It's running at like four gigahertz.

544
00:23:55,420 --> 00:23:59,550
Yeah, interrupt driven stuff on ac pu is actually a real problem of like 100

545
00:24:00,010 --> 00:24:00,469
hurts.

546
00:24:00,739 --> 00:24:01,709
Right. Right.

547
00:24:01,930 --> 00:24:03,709
Well, and there's multiple cores now.

548
00:24:03,719 --> 00:24:06,329
So whatever one core is dealing with interrupts, who cares?

549
00:24:06,339 --> 00:24:09,510
They've got 16 other cores doing nothing.

550
00:24:10,060 --> 00:24:14,579
It's, it's a very different world and it's cool though. I love the progress.

551
00:24:14,589 --> 00:24:15,589
I think it's very exciting.

552
00:24:16,290 --> 00:24:17,550
So, anyway, anyway,

553
00:24:18,349 --> 00:24:20,430
we have a topic here is what

554
00:24:20,609 --> 00:24:22,069
fills me with joy

555
00:24:22,199 --> 00:24:26,479
when I look at Frack and I look at smashing the stack for fun and profit

556
00:24:26,609 --> 00:24:27,319
is,

557
00:24:28,209 --> 00:24:31,589
I think all of these things have remained extremely relevant

558
00:24:31,859 --> 00:24:32,790
because

559
00:24:33,130 --> 00:24:36,510
they are a very pure place where people are allowed to

560
00:24:36,520 --> 00:24:40,880
experiment and try things and share knowledge and that's hugely important.

561
00:24:40,890 --> 00:24:44,310
And I know there's always people who say, oh, we used to do so much better at this and,

562
00:24:44,319 --> 00:24:44,689
and

563
00:24:44,910 --> 00:24:47,270
a lot of people don't care about the knowledge or whatever.

564
00:24:47,280 --> 00:24:50,109
And there's, there's a million arguments, especially for us Geezers.

565
00:24:50,380 --> 00:24:54,280
But I, I think the, the way I always describe this is it's just changing.

566
00:24:54,410 --> 00:24:56,170
There's still knowledge transfer.

567
00:24:56,180 --> 00:24:57,800
It's just the things we thought

568
00:24:57,810 --> 00:25:00,199
were important aren't necessarily important anymore.

569
00:25:00,209 --> 00:25:02,400
Like if you're a security person and you don't have to,

570
00:25:02,459 --> 00:25:04,520
you don't know how a stack overflow attack works.

571
00:25:04,530 --> 00:25:08,699
Who cares? You're probably never going to see one in your entire career now.

572
00:25:09,290 --> 00:25:10,770
Well, you know, I think about my kids and,

573
00:25:10,780 --> 00:25:14,359
and they'll never set up a network because you just,

574
00:25:14,689 --> 00:25:18,750
like, I recently flushed all my Google Wi Fi devices, factory reset them and,

575
00:25:18,760 --> 00:25:22,189
and basically network setup consisted of

576
00:25:22,719 --> 00:25:23,910
plugging them in

577
00:25:24,819 --> 00:25:27,079
that. No, that was it. Like there was no set up,

578
00:25:27,280 --> 00:25:30,599
there was no going in and changing numbers and changing this and changing that.

579
00:25:30,609 --> 00:25:32,040
It was just plug it in

580
00:25:32,280 --> 00:25:34,520
and set the Wi Fi password.

581
00:25:36,359 --> 00:25:37,109
That's it.

582
00:25:37,319 --> 00:25:37,680
Yeah.

583
00:25:37,810 --> 00:25:38,150
Yeah.

584
00:25:38,800 --> 00:25:39,530
And that's ok.

585
00:25:39,540 --> 00:25:45,489
I mean, I would compare it to automobiles when you owned a car in the 19 twenties.

586
00:25:45,670 --> 00:25:49,349
You needed to know how everything worked and you probably needed to fix it every day.

587
00:25:49,510 --> 00:25:51,390
-- You
-- needed expert knowledge to start it

588
00:25:51,400 --> 00:25:53,280
-- correctly without breaking your arm
-- that too.

589
00:25:53,290 --> 00:25:53,439
Yeah,

590
00:25:53,449 --> 00:25:56,089
because you had to turn that crank and I've heard it would

591
00:25:56,099 --> 00:25:58,170
kick back and break people's arms if they didn't do it.

592
00:25:58,180 --> 00:25:59,160
Right. Which

593
00:25:59,270 --> 00:26:02,479
I have no, I have no knowledge of and I'm glad I don't.

594
00:26:03,650 --> 00:26:07,369
I know I'm absolutely the next lawn mower. I get it better be electric because I'm

595
00:26:07,770 --> 00:26:09,359
-- pulling on that rip cord,
-- man.

596
00:26:09,369 --> 00:26:09,660
You know,

597
00:26:09,670 --> 00:26:13,060
I did some research into this and the problem I see at the moment

598
00:26:13,069 --> 00:26:16,119
is it sounds like most electric lawn mowers can run for about 20 minutes

599
00:26:16,569 --> 00:26:19,270
and it takes me around 30 to 40 to mow. My.

600
00:26:19,290 --> 00:26:20,199
-- So,
-- no,

601
00:26:20,209 --> 00:26:22,849
the deal is you need to not do your research

602
00:26:22,859 --> 00:26:24,560
on lawn mowers sold at Home Depot and Lowe's,

603
00:26:24,569 --> 00:26:25,160
you need to go to

604
00:26:25,630 --> 00:26:25,920
Husna

605
00:26:26,040 --> 00:26:27,479
or a real brand.

606
00:26:27,790 --> 00:26:28,310
And like Husk

607
00:26:28,449 --> 00:26:33,170
-- Carvana has lawn mowers that will run for 40 50 minutes.
-- Oh, that'd be perfect.

608
00:26:33,660 --> 00:26:33,930
But they also

609
00:26:34,069 --> 00:26:37,540
-- cost like three times as much.
-- But, I mean, I'm, I'm comfortable with that.

610
00:26:37,550 --> 00:26:40,099
So, actually, it's really funny. It's the lawnmower I have now,

611
00:26:40,280 --> 00:26:43,979
I have not changed the oil or done any maintenance on in about five years.

612
00:26:43,989 --> 00:26:45,780
I've been secretly hoping it will die

613
00:26:45,959 --> 00:26:47,739
and it, it just won't. So

614
00:26:48,069 --> 00:26:50,050
it's like the undead lawnmower

615
00:26:50,390 --> 00:26:51,469
and, and, yeah.

616
00:26:51,729 --> 00:26:52,790
Yeah. So, anyway,

617
00:26:53,040 --> 00:26:56,369
from a carbon footprint point of view to those lawnmowers and those two

618
00:26:56,500 --> 00:26:59,579
cylinder, two cycle engines are, are basically

619
00:26:59,810 --> 00:27:03,380
the only thing worse than them I think is like a container ship burning bunker oil.

620
00:27:03,880 --> 00:27:04,729
Probably.

621
00:27:05,500 --> 00:27:09,500
No. Absolutely. So, anyway, anyway, smashing the stack, I

622
00:27:10,229 --> 00:27:10,579
it, I

623
00:27:11,060 --> 00:27:14,640
read it turned 25 and it, it made me smile because

624
00:27:15,390 --> 00:27:17,969
I look at all the progress we've made since

625
00:27:17,979 --> 00:27:19,849
smashing the stack for fun and profit came out.

626
00:27:20,060 --> 00:27:20,689
And

627
00:27:21,030 --> 00:27:23,069
I know there's a lot of security people and even

628
00:27:23,079 --> 00:27:24,839
I'm guilty of this sometimes where I complain about.

629
00:27:24,849 --> 00:27:24,859
Oh,

630
00:27:24,869 --> 00:27:27,050
nothing's really different and everything's still terrible and

631
00:27:27,060 --> 00:27:28,349
we suck at security and all this.

632
00:27:28,359 --> 00:27:28,800
But like,

633
00:27:29,579 --> 00:27:31,430
we've made a lot of progress.

634
00:27:31,439 --> 00:27:33,819
There's a lot of really cool stuff we can point to and

635
00:27:33,829 --> 00:27:37,000
say this doesn't work because of this thing we did here.

636
00:27:37,060 --> 00:27:37,839
And that's awesome.

637
00:27:38,020 --> 00:27:38,209
Yeah.

638
00:27:38,219 --> 00:27:41,770
No, I'm really grateful that these people invented these technologies and,

639
00:27:41,829 --> 00:27:43,839
and gave them away for free and

640
00:27:44,089 --> 00:27:46,800
not just the technology but the knowledge and

641
00:27:47,439 --> 00:27:51,150
one thing that always gets me is how well written some of these frack articles are,

642
00:27:51,160 --> 00:27:51,780
you know, they're

643
00:27:52,140 --> 00:27:54,699
like to put it bluntly their thesis level stuff.

644
00:27:55,719 --> 00:28:01,329
Oh, yes. Without question, the early frack is amazing levels of detail.

645
00:28:02,290 --> 00:28:03,670
But I, I mean, here's the thing,

646
00:28:03,780 --> 00:28:04,760
if, if,

647
00:28:04,959 --> 00:28:05,670
iff one

648
00:28:05,819 --> 00:28:08,109
didn't go into the level of detail

649
00:28:08,420 --> 00:28:11,010
he went into when he wrote, smashing the stack,

650
00:28:11,310 --> 00:28:15,800
no one would have understood it because it was a topic that was so, I mean,

651
00:28:15,810 --> 00:28:17,890
I remember when I was young,

652
00:28:18,310 --> 00:28:19,339
I read it

653
00:28:19,540 --> 00:28:20,819
and then I read it again

654
00:28:20,969 --> 00:28:22,270
and then I read it again

655
00:28:22,430 --> 00:28:24,579
and I'm like, I don't understand most of this stuff.

656
00:28:24,589 --> 00:28:25,469
And then I started,

657
00:28:25,530 --> 00:28:29,579
I started trying the examples and I would learn and I would read and I, I,

658
00:28:30,219 --> 00:28:35,160
I guarantee I spent more than 100 hours of my life reading this

659
00:28:35,170 --> 00:28:37,290
document and going through the examples and

660
00:28:37,300 --> 00:28:38,839
trying to understand what was happening.

661
00:28:38,849 --> 00:28:41,339
And it was very difficult without question.

662
00:28:41,349 --> 00:28:44,199
I was watching this documentary on a Japanese Michelin star chef

663
00:28:44,329 --> 00:28:47,640
and he went to one of his restaurants to make sure they were making the,

664
00:28:47,650 --> 00:28:49,020
the Udon noodles correctly

665
00:28:49,199 --> 00:28:51,380
and he made them make it nine times before.

666
00:28:51,390 --> 00:28:53,959
He was like, OK, yeah, you guys aren't totally screwing this up,

667
00:28:54,560 --> 00:28:54,859
right?

668
00:28:54,869 --> 00:28:56,719
And that's the thing like, like this just that,

669
00:28:56,729 --> 00:29:02,180
that this is a level of not just a level of knowledge but of sort of mastery.

670
00:29:03,040 --> 00:29:06,219
I think mastery is the word, right? That's,

671
00:29:06,510 --> 00:29:09,260
that's what it really is, is in order to write this,

672
00:29:09,270 --> 00:29:13,859
you need to have a level of mastery over the Intel CPU at the time.

673
00:29:14,109 --> 00:29:18,420
Yeah, I was just about to say his knowledge of, of hardware would have been like,

674
00:29:18,609 --> 00:29:18,630
oh,

675
00:29:18,750 --> 00:29:21,219
I don't know. Well, literally outside of Intel,

676
00:29:21,390 --> 00:29:23,579
he would have been what, like, one of five people

677
00:29:24,119 --> 00:29:26,420
there probably weren't very many for sure. I mean,

678
00:29:26,790 --> 00:29:27,540
you could

679
00:29:28,359 --> 00:29:29,390
maybe,

680
00:29:29,579 --> 00:29:29,589
I

681
00:29:29,800 --> 00:29:30,270
mean,

682
00:29:31,349 --> 00:29:34,020
ii I can't think of anyone off the top of my head.

683
00:29:34,030 --> 00:29:36,099
I knew that I didn't know a lot of people back then, but

684
00:29:36,310 --> 00:29:39,729
it was definitely an art form that was not common.

685
00:29:39,739 --> 00:29:39,989
I mean,

686
00:29:40,000 --> 00:29:43,939
look back in the nineties just like being able to compile the

687
00:29:43,949 --> 00:29:47,260
Apache web server was a feat of strength for most people,

688
00:29:47,270 --> 00:29:47,819
you know?

689
00:29:47,930 --> 00:29:51,819
Oh, I know. I remember hand patching code constantly.

690
00:29:51,880 --> 00:29:54,829
Like, because stuff was you'd run make and it would,

691
00:29:55,050 --> 00:29:56,270
it would fail and,

692
00:29:56,810 --> 00:30:00,530
and it was normal to ship source code that was broken by default.

693
00:30:00,540 --> 00:30:02,680
-- Actually,
-- you know what's really funny you say that is,

694
00:30:02,689 --> 00:30:06,729
I remember back in those days I would become extremely concerned if I typed,

695
00:30:06,739 --> 00:30:08,510
make and something didn't go wrong.

696
00:30:08,520 --> 00:30:09,020
Like

697
00:30:09,170 --> 00:30:11,939
-- what's, what,
-- what happened? Like when it returned, I was like,

698
00:30:12,079 --> 00:30:15,099
like this shouldn't happen, something's wrong. What have I done?

699
00:30:16,569 --> 00:30:18,040
And now like

700
00:30:18,530 --> 00:30:21,910
when I, when I do I build something and go or rust or whatever,

701
00:30:21,920 --> 00:30:23,550
like almost any language these days,

702
00:30:23,939 --> 00:30:28,069
it never fails. It's, it's so different. But, but again, it was,

703
00:30:28,339 --> 00:30:29,739
they were different times and

704
00:30:30,010 --> 00:30:32,589
I know some people love to talk about how much better everything was.

705
00:30:32,599 --> 00:30:35,729
It was terrible. Never believe anyone who tells you anything used to be better.

706
00:30:35,739 --> 00:30:36,699
It was terrible.

707
00:30:36,910 --> 00:30:37,739
But it was,

708
00:30:38,089 --> 00:30:40,589
of course, because I'm old now. There's a certain nostalgia.

709
00:30:40,599 --> 00:30:42,369
I feel where it's like, oh,

710
00:30:42,530 --> 00:30:46,349
remember what that was like spending two whole days trying to compile a kernel.

711
00:30:47,060 --> 00:30:50,930
I actually had a friend who we did the math and it was faster for him

712
00:30:50,939 --> 00:30:55,150
to compile the kernel on my machine and then download it at 9600 bought to his machine

713
00:30:55,859 --> 00:30:57,150
because he didn't have a numeric

714
00:30:57,670 --> 00:30:57,900
Coros,

715
00:30:59,219 --> 00:31:01,119
right? He had a 36 SX

716
00:31:01,540 --> 00:31:02,699
25 or something.

717
00:31:02,750 --> 00:31:07,189
So, actually, that 386 sx my 386 we talked about at the beginning of the show,

718
00:31:07,209 --> 00:31:08,989
it was an SX 25.

719
00:31:10,339 --> 00:31:11,189
After

720
00:31:11,439 --> 00:31:14,739
we'll say when my parent it was my parents' computer, they got a new computer.

721
00:31:14,750 --> 00:31:18,469
I took the 386 and I, of course, the first thing I did was install Linux on it

722
00:31:18,859 --> 00:31:19,369
and

723
00:31:19,540 --> 00:31:21,949
I had to build a new kernel to support something.

724
00:31:21,959 --> 00:31:24,270
I'd forget which piece of hardware wasn't supported by default.

725
00:31:24,459 --> 00:31:27,829
And it literally took two days 48 hours to build

726
00:31:27,839 --> 00:31:30,209
the kernel on that computer because it was so slow.

727
00:31:31,189 --> 00:31:31,229
Yeah.

728
00:31:31,420 --> 00:31:32,339
No, that, that math,

729
00:31:32,979 --> 00:31:36,239
I remember when my friend actually bought the math co processor and it was not cheap.

730
00:31:36,739 --> 00:31:37,790
-- No,
-- all

731
00:31:37,810 --> 00:31:38,119
-- of
-- a sudden,

732
00:31:38,569 --> 00:31:41,250
no one even knows what that is. Kurt, you have to tell people what a math

733
00:31:41,560 --> 00:31:41,619
process.

734
00:31:41,939 --> 00:31:43,089
Um Well,

735
00:31:43,709 --> 00:31:43,729
uh

736
00:31:43,930 --> 00:31:45,170
CP us didn't

737
00:31:45,319 --> 00:31:46,880
used to do math so good.

738
00:31:47,099 --> 00:31:48,890
That was, that was an, that was an,

739
00:31:49,020 --> 00:31:51,849
-- like, that was like an optional add on straight
-- up

740
00:31:52,800 --> 00:31:52,900
just

741
00:31:54,250 --> 00:31:54,449
to do

742
00:31:54,550 --> 00:31:55,250
the math.

743
00:31:55,689 --> 00:31:57,410
Well, to do math fast.

744
00:31:57,560 --> 00:31:59,079
Yes. Yes. That's right

745
00:31:59,339 --> 00:32:04,229
because so the reason being there were certain math operations that were part of

746
00:32:04,239 --> 00:32:09,290
the intel spec that if you did them on say 386 without a math co

747
00:32:09,430 --> 00:32:12,270
processor, they might take hundreds of clock cycles to complete.

748
00:32:12,280 --> 00:32:13,630
But if you had a math co processor,

749
00:32:13,640 --> 00:32:16,510
-- they might take two or three
-- clock and in fairness most people didn't need them.

750
00:32:17,550 --> 00:32:19,239
No. No, totally not.

751
00:32:19,400 --> 00:32:20,349
I mean, until

752
00:32:20,599 --> 00:32:22,920
-- video games came along.
-- Yeah, games were the big one.

753
00:32:22,930 --> 00:32:24,540
I think that that really made a difference.

754
00:32:24,550 --> 00:32:29,189
And anyway, now these days all of the chips have what we would have called a math

755
00:32:29,790 --> 00:32:31,160
coros, just part of the chip,

756
00:32:31,329 --> 00:32:34,829
-- they
-- have just insane numbers of instructions like hyper specific, you know, Shaw

757
00:32:34,949 --> 00:32:36,170
512 or

758
00:32:36,489 --> 00:32:39,540
various decoding stuff or

759
00:32:39,729 --> 00:32:43,680
whatever. Because you know, like honestly nowadays a couple billion transistors,

760
00:32:43,869 --> 00:32:45,209
whatever, no big deal,

761
00:32:45,569 --> 00:32:46,180
I mean.

762
00:32:46,930 --> 00:32:47,719
Exactly.

763
00:32:47,859 --> 00:32:48,709
Ok. Ok.

764
00:32:49,030 --> 00:32:51,650
I'm gonna, I, I think it's time to call this one. I guess

765
00:32:51,890 --> 00:32:54,839
I can only think of ending this in, in one way

766
00:32:54,989 --> 00:32:56,560
and that is to say

767
00:32:56,699 --> 00:32:58,579
iff one and Frack

768
00:32:58,810 --> 00:33:03,650
are truly legends and I am eternally grateful for all they have given me.

769
00:33:03,660 --> 00:33:06,250
I would certainly not be where I am today

770
00:33:06,400 --> 00:33:08,050
without both of those resources.

771
00:33:09,390 --> 00:33:10,420
Yep, I agree.

772
00:33:10,630 --> 00:33:11,209
Awesome.

773
00:33:11,810 --> 00:33:12,310
Well,

774
00:33:12,510 --> 00:33:15,109
that was fun. Thank you everyone for listening.

775
00:33:15,319 --> 00:33:17,810
Thank you, Kurt. You can go to social security podcast.com. Head to

776
00:33:18,270 --> 00:33:21,430
Susie Pound Os S Podcast. Hashtag to hit us up on social media.

777
00:33:21,560 --> 00:33:23,750
Kurt, you have a marvelous rest of your day.

778
00:33:23,979 --> 00:33:27,030
-- You too. Thanks
-- everybody. Thanks everyone. Bye bye

779
00:33:31,579 --> 00:33:31,640
the