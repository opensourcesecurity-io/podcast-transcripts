0
00:00:05,889 --> 00:00:09,000
Hello and welcome to the open source security podcast with myself,

1
00:00:09,010 --> 00:00:10,819
Kurt Siefried and my partner in rock crime.

2
00:00:10,829 --> 00:00:11,319
Josh, bro.

3
00:00:11,939 --> 00:00:14,229
Hey, Kurt, and I am so excited today.

4
00:00:14,239 --> 00:00:18,940
We have Alyssa Miller who is an application security advocate from Sneak.

5
00:00:18,950 --> 00:00:20,969
So welcome to the show, Alyssa.

6
00:00:21,159 --> 00:00:24,309
Hey guys, thanks so much. I'm super excited to be here.

7
00:00:24,319 --> 00:00:27,659
We are very excited to have you and you're actually here for a reason,

8
00:00:27,670 --> 00:00:30,146
not just because we like sneak, which we do but

9
00:00:30,396 --> 00:00:35,146
sneak released their state of open source report, not, not terribly long ago now,

10
00:00:35,157 --> 00:00:38,396
which is a really cool report and why don't you tell us all about it?

11
00:00:38,407 --> 00:00:39,497
And we'll kind of go from there.

12
00:00:39,876 --> 00:00:40,666
Yeah, sure.

13
00:00:40,676 --> 00:00:44,337
So our state of open source security report is something that we do annually.

14
00:00:44,347 --> 00:00:48,236
It's kind of honestly, it's one of our flagship projects outside of, of course, our,

15
00:00:48,247 --> 00:00:50,777
our main product that we're constantly working on,

16
00:00:51,027 --> 00:00:53,216
but it's, it's really a big research project.

17
00:00:53,227 --> 00:00:58,023
So we go out and we pull a lot of data from a lot of places in the open source community,

18
00:00:58,034 --> 00:01:02,804
aggregated data from our own tooling as well as our vulnerability database.

19
00:01:02,933 --> 00:01:04,483
And we also run a survey

20
00:01:04,763 --> 00:01:09,903
and from that, we draw a lot of different information we're able to analyze that. And

21
00:01:10,134 --> 00:01:12,984
really, it's the goal is just to create a,

22
00:01:12,994 --> 00:01:16,494
a really comprehensive picture of what is the security

23
00:01:16,503 --> 00:01:20,111
posture of open source these days as we look at

24
00:01:20,121 --> 00:01:23,850
modern day development and the ecosystems that people are

25
00:01:23,861 --> 00:01:27,280
using and our use of dependencies and so forth.

26
00:01:27,291 --> 00:01:30,011
It's really hard to get away from open source.

27
00:01:30,021 --> 00:01:34,541
So having a better understanding of it, what's good, what's bad?

28
00:01:34,551 --> 00:01:37,871
What do we need to be looking at? What are things that we're getting better at?

29
00:01:37,880 --> 00:01:41,301
-- That's really the goal of the report.
-- Awesome. Awesome. And

30
00:01:41,559 --> 00:01:45,699
I will put a link to the report in the show notes for anyone who hasn't seen it yet.

31
00:01:45,709 --> 00:01:47,910
It's, it's quite good. I like it.

32
00:01:48,029 --> 00:01:49,059
Now, I'm gonna,

33
00:01:49,230 --> 00:01:54,419
I've got one really hard question I want to lead with is the pages in the report

34
00:01:54,720 --> 00:01:58,300
are widescreen instead of like normal human readable pages.

35
00:01:58,309 --> 00:02:00,419
I'm curious if there's a reason for that

36
00:02:00,430 --> 00:02:02,419
or if it's just something that that happened.

37
00:02:03,040 --> 00:02:03,099
I

38
00:02:03,300 --> 00:02:07,260
think honestly it's something that just our creative team did to, I,

39
00:02:07,269 --> 00:02:10,419
I think partially to format it easier given

40
00:02:10,429 --> 00:02:12,649
the way the contact the contents laid out.

41
00:02:12,660 --> 00:02:15,990
And I, and it does, we do actually convert it to a physical book as well.

42
00:02:16,000 --> 00:02:17,570
There's a smaller booklet that we, you know,

43
00:02:17,580 --> 00:02:21,580
we hand out at conferences if we ever get back to doing those again.

44
00:02:21,589 --> 00:02:26,940
Things like that. So I, I think it's more that, that standpoint than anything else.

45
00:02:27,050 --> 00:02:32,130
Um, it just allows us to bring the content that all goes together on the same page.

46
00:02:32,139 --> 00:02:35,110
I was gonna say I prefer it because it actually fits on my monitor.

47
00:02:35,119 --> 00:02:41,009
I like to read things on my kindle and this was unpleasant, we'll say on a kindle.

48
00:02:41,050 --> 00:02:42,779
I'm just trying to think now if my can't,

49
00:02:42,919 --> 00:02:45,389
-- you can change your screen orientation on a
-- kindle.

50
00:02:45,399 --> 00:02:48,110
I don't know, I'm too lazy to do that. Kind of. I'm sure you can.

51
00:02:48,889 --> 00:02:50,660
I wasn't to say anything but yeah,

52
00:02:51,550 --> 00:02:54,210
it's ok. Yeah, like laziness always wins for me.

53
00:02:54,220 --> 00:02:57,690
I'm not even going to pretend, laziness and stupidity are pretty much my,

54
00:02:57,699 --> 00:02:58,850
my two primary traits.

55
00:02:58,860 --> 00:03:01,660
So. All right, cool, cool, cool. Let's, let's jump right into the data.

56
00:03:01,669 --> 00:03:04,009
My first question is I'm just looking like the one graph

57
00:03:04,020 --> 00:03:05,899
that really jumps out at me is on page 10.

58
00:03:05,910 --> 00:03:08,550
Is that new packages created by ecosystem per year?

59
00:03:08,699 --> 00:03:09,369
And like,

60
00:03:09,380 --> 00:03:12,179
how to put this nicely N PM with like a

61
00:03:12,190 --> 00:03:15,190
huge bar and then everybody else is tiny and like,

62
00:03:15,199 --> 00:03:17,250
I know there's a lot of N PM packages but

63
00:03:17,580 --> 00:03:22,240
like, they're seriously creating over 200,000 new packages a year.

64
00:03:22,699 --> 00:03:22,820
Yeah.

65
00:03:22,830 --> 00:03:26,919
And this is a trend, I mean, as you can see on the graph we've seen this trend for years.

66
00:03:27,050 --> 00:03:28,960
Yeah. It, it keeps, yeah, and it's going up.

67
00:03:28,970 --> 00:03:30,419
Yeah, and that's, I'm looking at this and I'm like,

68
00:03:30,429 --> 00:03:34,559
-- I hope that was a typo because like, no,
-- unfortunately it's not.

69
00:03:35,080 --> 00:03:38,690
Yeah, it's not at all. And that's that, I mean, good and bad.

70
00:03:38,699 --> 00:03:43,169
I think honestly looking at the way that the N PM, you know, that whole,

71
00:03:43,179 --> 00:03:46,039
no Js ecosystem works in general.

72
00:03:46,399 --> 00:03:50,199
The, they tend to be very granular with their packages.

73
00:03:50,330 --> 00:03:55,160
Like, I just, I saw something the other day where someone wrote and I'm gonna,

74
00:03:55,169 --> 00:03:58,339
I don't remember the exact package, but I, I'll throw this out there.

75
00:03:58,350 --> 00:03:59,059
It's not really right.

76
00:03:59,070 --> 00:04:04,520
But imagine somebody wrote a, not a number package they had basically based that off

77
00:04:04,755 --> 00:04:05,705
of a,

78
00:04:06,044 --> 00:04:09,565
-- is a number package I was
-- gonna say, isn't it like a built in function? Yeah.

79
00:04:09,574 --> 00:04:09,835
Right.

80
00:04:09,845 --> 00:04:11,365
That, that wasn't the exact,

81
00:04:11,375 --> 00:04:14,485
I don't remember the exact scenario but it was along those lines like, you know,

82
00:04:14,494 --> 00:04:16,255
so it was like, you know, is this a string?

83
00:04:16,265 --> 00:04:18,635
Well, is it not a string, you know, kind of thing?

84
00:04:18,644 --> 00:04:22,765
So the package was like 33 lines of code long, but it had a dependency and,

85
00:04:23,000 --> 00:04:25,369
and I, you know, I think we see more of that the,

86
00:04:25,380 --> 00:04:29,329
the very granular functionality within those packages

87
00:04:29,450 --> 00:04:31,459
within that particular eco

88
00:04:31,600 --> 00:04:33,959
ecosystem than we do in others.

89
00:04:33,970 --> 00:04:40,119
Like, you know, if you go out to, I mean, Java or.net, people are writing, you know,

90
00:04:40,130 --> 00:04:43,649
if they're open source package writing, they're, they're writing, you know, a,

91
00:04:43,670 --> 00:04:47,220
a large module that has different functionality,

92
00:04:47,230 --> 00:04:49,459
different functions in it the whole nine yards.

93
00:04:49,470 --> 00:04:51,925
We'll see a lot more with a note where it's like

94
00:04:52,135 --> 00:04:54,246
this one function that does this one thing.

95
00:04:54,256 --> 00:04:56,575
Here's our package added as your dependency.

96
00:04:56,585 --> 00:05:00,846
I mean, shift left is the famous example here, right? Which we,

97
00:05:01,286 --> 00:05:03,036
it feels like it was probably 100 years ago now.

98
00:05:03,045 --> 00:05:07,036
But I mean that was, we talked about that for a whole show because the, you know,

99
00:05:07,045 --> 00:05:11,686
the maintainer got mad and pulled his package and everyone used it and it broke N PM,

100
00:05:11,696 --> 00:05:13,915
which is a wild problem.

101
00:05:14,026 --> 00:05:14,645
Oh, sure.

102
00:05:14,656 --> 00:05:15,705
So like me and Josh, you know,

103
00:05:15,716 --> 00:05:18,686
we're both old UNIX farts who come from a world where like, oh,

104
00:05:18,696 --> 00:05:21,532
my operating system has like 500 packages in total,

105
00:05:21,891 --> 00:05:22,022
you

106
00:05:22,312 --> 00:05:24,131
know, way more than that. Well, now it is.

107
00:05:24,141 --> 00:05:26,812
Yeah, now it's a couple 1000 but like back in the day, you know, Slackware,

108
00:05:26,821 --> 00:05:31,671
1.1 fit on 50 what, four floppy disks and I'm just look like, and I, again,

109
00:05:31,682 --> 00:05:34,421
I know sort of in the back of my head that there's a lot of activity going on.

110
00:05:34,432 --> 00:05:36,611
And on the one hand part of me is like the fact that

111
00:05:36,622 --> 00:05:39,391
N PM can scale out like they have the processes to actually,

112
00:05:39,402 --> 00:05:41,571
again, I'm used to things like Pearl CP Pan where it's like, oh,

113
00:05:41,582 --> 00:05:43,592
we had like 1000 new packages this year.

114
00:05:43,601 --> 00:05:47,802
Like, wow, that was an amazing year. Now, these numbers are like 300,000 a year,

115
00:05:48,429 --> 00:05:51,100
like that's 1000 new packages a day.

116
00:05:51,109 --> 00:05:52,299
And I'm just thinking like,

117
00:05:52,309 --> 00:05:55,529
and these are also all centrally registered on that website, you know, and they,

118
00:05:55,540 --> 00:05:57,750
the infrastructure supports this now pretty painlessly.

119
00:05:57,760 --> 00:05:58,089
Right.

120
00:05:58,399 --> 00:06:01,720
Yeah, I mean, it's well painlessly. It depends on who you ask.

121
00:06:01,730 --> 00:06:04,420
I mean, everybody who has developed and know it knows the mantra.

122
00:06:04,429 --> 00:06:06,140
Like you open up your project

123
00:06:06,350 --> 00:06:08,890
N PM goes out and starts pulling dependencies.

124
00:06:08,899 --> 00:06:13,750
You go get coffee, maybe dinner, maybe, you know, build a shed while you're at it.

125
00:06:13,760 --> 00:06:16,980
I don't know, you know, it's some of the so and that's honestly,

126
00:06:16,989 --> 00:06:19,429
that's part of the challenge with open source

127
00:06:19,540 --> 00:06:24,320
in general, but in particular with M PM is, hey, you know, I built this project, I

128
00:06:24,424 --> 00:06:26,674
added these seven dependencies to it.

129
00:06:26,885 --> 00:06:27,744
But, oh, wait, yeah,

130
00:06:27,755 --> 00:06:31,234
those seven dependencies all have their sub dependencies and

131
00:06:31,244 --> 00:06:33,595
then those sub dependencies have their own dependencies.

132
00:06:33,605 --> 00:06:36,274
And for, you know, what you like, what was seven dependencies?

133
00:06:36,285 --> 00:06:40,454
Suddenly you've got a couple of 100 you know, dependencies in that whole tree

134
00:06:40,635 --> 00:06:45,994
and knowing what's in your software is, is epically difficult.

135
00:06:46,325 --> 00:06:50,364
And so, yeah, you know, I don't know that it's, it supports it in that.

136
00:06:50,450 --> 00:06:51,579
Yeah, it does a great job.

137
00:06:51,589 --> 00:06:54,369
You fire up a project N PM is gonna go out and find everything.

138
00:06:54,380 --> 00:06:55,829
It's gonna find its location in github.

139
00:06:55,989 --> 00:06:57,869
It's going to bring it in, import it to your project.

140
00:06:57,880 --> 00:07:01,730
It does all that but yeah, it, it definitely has its challenges as well.

141
00:07:01,739 --> 00:07:05,089
So I'm gonna kind of take you to task on this one a little bit.

142
00:07:05,100 --> 00:07:07,040
Is there's two problems here, I think.

143
00:07:07,049 --> 00:07:10,470
And you said knowing what's in your project is really difficult. It's actually not.

144
00:07:10,480 --> 00:07:12,350
And this is something N PM gets right,

145
00:07:12,359 --> 00:07:16,369
I think is they make it trivial to just give you a list of all the crap.

146
00:07:16,475 --> 00:07:20,255
Even the transitive dependencies that happen to be in your project. Right?

147
00:07:20,584 --> 00:07:21,695
That's the easy part.

148
00:07:21,704 --> 00:07:27,394
The hard part is knowing which of those dependencies are a tire fire of, you know,

149
00:07:27,404 --> 00:07:29,475
bad support and security problems.

150
00:07:29,484 --> 00:07:32,204
And that's not something N PM can do.

151
00:07:32,214 --> 00:07:35,334
-- They kind of can do it today, but it's not
-- very good in fairness.

152
00:07:35,345 --> 00:07:37,984
So, like I ran into a similar thing and the thing I found was, yeah,

153
00:07:37,994 --> 00:07:40,855
like N PM and stuff will give me a list of all the packages.

154
00:07:40,864 --> 00:07:42,375
But like, what are they

155
00:07:42,690 --> 00:07:42,950
like?

156
00:07:42,959 --> 00:07:45,429
How big are they, how, you know, I remember looking at this one,

157
00:07:45,440 --> 00:07:48,510
it was a ruby gems thing and it was like American date and I'm like,

158
00:07:48,519 --> 00:07:49,420
what the hell is this?

159
00:07:49,429 --> 00:07:52,660
Right? Because it hadn't been maintained in like the last update was five years ago.

160
00:07:52,670 --> 00:07:53,510
And I'm like, oh my God,

161
00:07:53,519 --> 00:07:56,549
five years and it literally just took a date and converted

162
00:07:56,559 --> 00:07:59,260
it to your broken American format of month and year.

163
00:08:00,260 --> 00:08:00,869
And I'm like,

164
00:08:00,880 --> 00:08:02,829
I'm just going to pretend like I didn't see this

165
00:08:02,839 --> 00:08:05,209
because number one that's offensive to me as a Canadian.

166
00:08:05,220 --> 00:08:05,989
And number two,

167
00:08:06,230 --> 00:08:09,489
I'm hoping there's no security flaw in it. Right. Because, and it's,

168
00:08:09,809 --> 00:08:11,089
and it should be safe. But

169
00:08:11,239 --> 00:08:13,730
that's the thing I'm finding is what is this thing?

170
00:08:13,739 --> 00:08:16,450
Like, how big is it, like, is it 10 lines of code? Is it

171
00:08:16,579 --> 00:08:18,510
100,000 lines of code? Because that's

172
00:08:18,739 --> 00:08:21,649
the other thing I'm, I'm seeing with N PM and all these guys is there's no,

173
00:08:21,660 --> 00:08:22,790
there's no hints on that.

174
00:08:22,820 --> 00:08:26,290
-- No,
-- not at all. And I mean, you're right. Yeah, M PM. Will you, you can

175
00:08:26,425 --> 00:08:28,365
pull the, your whole catalog, right?

176
00:08:28,376 --> 00:08:28,626
I mean,

177
00:08:28,635 --> 00:08:31,126
you can see that tree but you're trying to make

178
00:08:31,135 --> 00:08:33,056
sense of that as you said and really understand,

179
00:08:33,065 --> 00:08:34,525
OK, what is here?

180
00:08:34,575 --> 00:08:38,285
Where are the duplicates? OK. I don't need to know that this, you know, same

181
00:08:38,726 --> 00:08:41,195
jquery dependency shows up across, you know,

182
00:08:41,205 --> 00:08:43,505
10 of my other dependencies obviously.

183
00:08:43,515 --> 00:08:44,236
Well, unless you know,

184
00:08:44,245 --> 00:08:46,356
the version is pinned in a few of them and not pinned in

185
00:08:46,366 --> 00:08:50,002
-- a few them because I've seen that which
-- makes life even more fun.

186
00:08:50,012 --> 00:08:50,942
Yeah, exactly.

187
00:08:50,952 --> 00:08:53,911
And, and that, but that's so that's goes to then the point that you're,

188
00:08:53,921 --> 00:08:57,401
you brought up of, how do I know, you know, even OK,

189
00:08:57,411 --> 00:08:59,661
if they've pinned a particular version,

190
00:08:59,812 --> 00:09:02,961
now I've got to be aware of all those different versions that I've got.

191
00:09:02,971 --> 00:09:06,692
And if you know, vulnerability shows up, is it vulnerable or not. And,

192
00:09:07,039 --> 00:09:10,580
and all of this really goes to this idea of like package health,

193
00:09:10,630 --> 00:09:13,299
how do we actually measure package health?

194
00:09:13,309 --> 00:09:13,890
And that's,

195
00:09:14,169 --> 00:09:17,609
that's a challenge in and of itself there's data points out there.

196
00:09:17,619 --> 00:09:19,419
Like you mentioned, you can look at, you know,

197
00:09:19,429 --> 00:09:22,260
the last commit date or how many commits are out there?

198
00:09:22,270 --> 00:09:26,494
How many upvotes does it have? How many maintainers are active in it?

199
00:09:26,505 --> 00:09:30,034
How many poll requests have been accepted? All those things?

200
00:09:30,385 --> 00:09:31,174
But

201
00:09:31,315 --> 00:09:35,135
not none of them. Can you look at and say, well, if this is high, it's bad,

202
00:09:35,294 --> 00:09:39,375
right? I mean, if you've got a lot of poll requests that have been committed.

203
00:09:39,835 --> 00:09:43,835
OK. Is that because there's a lot of issues

204
00:09:44,130 --> 00:09:48,630
and people are, you know, having to make a lot of changes to fix them,

205
00:09:48,640 --> 00:09:50,729
even that alone could be good or bad, right?

206
00:09:50,739 --> 00:09:52,570
I mean, bad because why does it have so many issues?

207
00:09:52,580 --> 00:09:53,630
But good because oh my gosh,

208
00:09:53,640 --> 00:09:56,039
people are actually finding and fixing them versus

209
00:09:56,049 --> 00:09:58,299
that other project that has like no activity

210
00:09:58,309 --> 00:10:00,260
and then you find out it's fraught with

211
00:10:00,270 --> 00:10:02,109
vulnerabilities because no one's looking at it.

212
00:10:02,380 --> 00:10:05,700
And so yeah, I mean, again, when we think about

213
00:10:05,830 --> 00:10:07,450
even just what we're trying to do with this report,

214
00:10:07,460 --> 00:10:12,130
it's how can we start to look at open source and understand what are the concerns?

215
00:10:12,260 --> 00:10:15,340
So on page 45 of your report,

216
00:10:15,630 --> 00:10:16,859
you have a graph

217
00:10:17,010 --> 00:10:20,419
where you ask developers how they vet open source packages.

218
00:10:20,429 --> 00:10:23,940
I would, I would classify it as witchcraft essentially of

219
00:10:24,306 --> 00:10:26,885
it's like cargo, cult security where they,

220
00:10:26,895 --> 00:10:31,286
they're doing things and I give people credit for trying to get this right.

221
00:10:31,296 --> 00:10:33,406
But it is definitely a very hard problem.

222
00:10:33,416 --> 00:10:37,565
And obviously the answers are heavily reliant on

223
00:10:37,726 --> 00:10:41,976
the first layer, not the 10th layer of dependencies because you,

224
00:10:41,986 --> 00:10:43,366
you have no control over that, right?

225
00:10:43,375 --> 00:10:45,176
You could have a super active community.

226
00:10:45,286 --> 00:10:48,992
But if they have a dependency that hasn't been updated in 10 years,

227
00:10:49,002 --> 00:10:50,831
who cares if the community is active?

228
00:10:50,841 --> 00:10:51,421
Exactly.

229
00:10:51,432 --> 00:10:56,312
And that's why, you know, back to our firmer issue of being able to understand

230
00:10:56,481 --> 00:10:59,132
that whole tree because you're right. I mean, I can

231
00:10:59,302 --> 00:11:01,752
and yeah, I, I love that graph. It is the most of it.

232
00:11:01,762 --> 00:11:04,392
It's probably one of the more boring graphs in the report

233
00:11:04,401 --> 00:11:08,192
because all those bars are like almost even except for like one

234
00:11:08,510 --> 00:11:09,130
and,

235
00:11:09,140 --> 00:11:12,280
but that's exactly what I was expecting and it's actually kind of what

236
00:11:12,289 --> 00:11:14,929
I wanted to highlight and why I put that question in the survey

237
00:11:15,140 --> 00:11:18,619
because it's like, OK, what are people doing? Well, the fact of the matter is

238
00:11:18,880 --> 00:11:21,409
everybody's got their own theories on this

239
00:11:21,570 --> 00:11:23,960
and what we there, there's, I mean, I've seen,

240
00:11:23,969 --> 00:11:27,859
we've seen talks done on this at developer conferences, I've seen them at

241
00:11:28,030 --> 00:11:29,049
apps, a conferences,

242
00:11:29,320 --> 00:11:34,030
you know, people are proposing lots of ideas but there really isn't an answer.

243
00:11:34,039 --> 00:11:38,929
And I think, you know what to me is important here is it has whatever you're gonna do

244
00:11:39,080 --> 00:11:43,520
and this, this kind of goes for all metrics. It's you gotta have a model, right?

245
00:11:43,530 --> 00:11:46,119
Like you gotta understand how those different

246
00:11:46,229 --> 00:11:49,669
individual metrics relate to each other. And based on this,

247
00:11:50,150 --> 00:11:52,799
in a relationship of all of them, I can say, yeah,

248
00:11:52,809 --> 00:11:54,900
this is a good package or this is a package.

249
00:11:54,909 --> 00:11:57,090
-- I might want to stay away from
-- stupid question.

250
00:11:57,099 --> 00:12:01,409
But in all this time, I've never actually seen anyone define what package health is.

251
00:12:01,419 --> 00:12:04,409
Does sneak actually have a definition that you use.

252
00:12:04,700 --> 00:12:06,580
I don't know that we have a formal definition,

253
00:12:06,590 --> 00:12:11,530
but I know for us it's really just trying to find some form of objective scoring

254
00:12:11,830 --> 00:12:14,919
to rate the overall risk of a particular package.

255
00:12:14,929 --> 00:12:17,090
And, and we're doing a lot of work in that right now.

256
00:12:17,099 --> 00:12:18,929
I know we've got a whole data team doing a

257
00:12:18,940 --> 00:12:22,190
lot of stuff with some ML trying to really develop models

258
00:12:22,429 --> 00:12:25,450
that we can then plug into the tool. Let's say, hey,

259
00:12:25,590 --> 00:12:27,770
you know, you, you're using this package,

260
00:12:27,789 --> 00:12:29,770
we found these vulnerabilities in it today.

261
00:12:29,780 --> 00:12:32,289
But understand from a package health perspective,

262
00:12:32,840 --> 00:12:36,489
you know, either you keep going with this one, it it's being well maintained.

263
00:12:36,500 --> 00:12:38,789
Yeah, there's some vulnerabilities but it's good or hey,

264
00:12:38,849 --> 00:12:41,400
we found these vulnerabilities, this thing looks pretty risky.

265
00:12:41,409 --> 00:12:43,210
Maybe you want to consider a different way

266
00:12:43,219 --> 00:12:45,809
-- to implement that functionality
-- because I I'd always looked

267
00:12:45,820 --> 00:12:49,599
at more from the outcome of how quickly can

268
00:12:49,609 --> 00:12:52,099
they fix a vulnerability assuming they even can.

269
00:12:52,469 --> 00:12:55,539
You know, because I've literally dealt with packages that are just so dead

270
00:12:55,989 --> 00:12:56,609
that I,

271
00:12:56,619 --> 00:12:59,229
I ended up actually having to take ownership of two

272
00:12:59,239 --> 00:13:01,590
for Fedora to get security updates put in them.

273
00:13:01,619 --> 00:13:05,809
-- Yeah.
-- And, and we hear stories like that from the developer community a lot

274
00:13:06,159 --> 00:13:09,960
and that's unfortunate, but that's really what we're trying to identify with PAC.

275
00:13:09,969 --> 00:13:14,200
I mean, you think about large organizations who have this software and,

276
00:13:14,210 --> 00:13:16,159
and you know, they're worried about, OK.

277
00:13:16,169 --> 00:13:17,440
Am I gonna base, you know,

278
00:13:17,450 --> 00:13:20,630
my developers creating software that has uh open source dependency

279
00:13:20,640 --> 00:13:23,479
and that maintainer just kind of disappears and that project,

280
00:13:23,489 --> 00:13:27,119
you know, kind of goes to pot or whatever, what do we do then

281
00:13:27,219 --> 00:13:31,559
how are we going to deal with it? And yeah, are we gonna absorb that? Now we have to make

282
00:13:31,905 --> 00:13:33,145
open source software,

283
00:13:33,155 --> 00:13:35,145
we can't close it and make it our own

284
00:13:35,155 --> 00:13:37,335
proprietary software because it is still open source,

285
00:13:37,344 --> 00:13:38,525
it's licensed that way.

286
00:13:38,594 --> 00:13:41,565
I I know a lot of organizations are actually kind of

287
00:13:41,575 --> 00:13:45,405
resistant to that idea of creating open source for the community.

288
00:13:45,414 --> 00:13:48,924
So that's where package health really comes into play and

289
00:13:48,934 --> 00:13:51,424
just understanding how much of a risk is there,

290
00:13:51,434 --> 00:13:53,205
we'll never get it perfect because it's,

291
00:13:53,215 --> 00:13:57,205
it's risk and I don't know anyone that's figured out a way to perfectly measure risk.

292
00:13:57,409 --> 00:14:00,630
Now, I have a counter story actually for this, which is

293
00:14:00,809 --> 00:14:05,119
I it always peaks some interest when, when I tell it. So you, you mentioned,

294
00:14:05,400 --> 00:14:05,619
you know,

295
00:14:05,630 --> 00:14:07,950
you could use an open source library and the

296
00:14:07,960 --> 00:14:10,090
upstream goes away for a variety of reasons.

297
00:14:10,099 --> 00:14:13,440
And now as say, a company, I'm stuck with it. And what do I do?

298
00:14:13,450 --> 00:14:15,489
I worked at a company a long time ago

299
00:14:15,590 --> 00:14:17,919
that had a binary library.

300
00:14:18,039 --> 00:14:21,840
No one knew where it came from, no one, right? Like we literally had no idea.

301
00:14:21,849 --> 00:14:22,429
We just knew

302
00:14:23,099 --> 00:14:24,859
it was, we had to use this

303
00:14:25,010 --> 00:14:29,239
and we needed it because it was like, it was literally critical path to the software,

304
00:14:29,380 --> 00:14:29,890
but

305
00:14:30,070 --> 00:14:31,799
it was a mystery to everybody.

306
00:14:32,020 --> 00:14:34,059
And that's on the other side of things.

307
00:14:34,070 --> 00:14:38,000
At least with open source, you can point at it and say here it is, here's a code,

308
00:14:38,010 --> 00:14:39,570
here's where this came from versus

309
00:14:39,840 --> 00:14:42,219
this is a mystery meat package.

310
00:14:42,419 --> 00:14:46,179
Nobody knows what it is, right? So there, there is definitely risk.

311
00:14:46,190 --> 00:14:49,619
-- But I think conversely there's some anti risks as well.
-- Sure.

312
00:14:49,710 --> 00:14:53,950
Yeah, I, I wish I could say I'm unfamiliar with stories like that, but I work for a uh a

313
00:14:54,169 --> 00:14:56,744
fintech company way back in the day.

314
00:14:56,755 --> 00:15:01,565
And yeah, we, we went through a acquisition, we brought in a third party company and

315
00:15:01,835 --> 00:15:04,315
it's kind of the same thing, right? We got into the software.

316
00:15:04,325 --> 00:15:06,104
We, we find these libraries uh

317
00:15:06,265 --> 00:15:07,565
long and short of, I mean,

318
00:15:07,575 --> 00:15:09,895
we did at least find out that it was written by

319
00:15:09,905 --> 00:15:12,604
a consulting company that they had come in and write this,

320
00:15:12,900 --> 00:15:15,219
but that company was gone. They, they were defunct.

321
00:15:15,229 --> 00:15:16,599
We couldn't find anyone who would work for them.

322
00:15:16,609 --> 00:15:19,479
So we didn't have the source code for this library. And it's like,

323
00:15:19,609 --> 00:15:23,640
what are you? And how do you do that right now? You have, you have no source code.

324
00:15:23,650 --> 00:15:25,280
You think, you know what it does,

325
00:15:25,289 --> 00:15:28,150
but what are we gonna miss and especially in

326
00:15:28,159 --> 00:15:31,090
a banking world where things can get really tucked

327
00:15:31,099 --> 00:15:35,320
away and hidden and you don't find out about them for a long time until you know,

328
00:15:35,330 --> 00:15:38,559
somebody's million dollar account is down to zero or something.

329
00:15:38,570 --> 00:15:43,070
And, you know, I mean, it's so, yeah, I'm very familiar with that scary situation.

330
00:15:43,080 --> 00:15:46,320
I have no doubt we have all dealt with it at least once.

331
00:15:47,080 --> 00:15:50,299
Another thing I'm really curious about is the security

332
00:15:50,309 --> 00:15:53,109
practices in the delivery pipeline for the open source.

333
00:15:53,119 --> 00:15:56,950
Yes. Some of the bars are not terribly surprising.

334
00:15:56,960 --> 00:16:00,729
The one that made me sad is the security test cases in Q A was only at 28%.

335
00:16:00,739 --> 00:16:02,799
And I would have thought that would be a little bit higher.

336
00:16:03,039 --> 00:16:04,859
But then what was really

337
00:16:05,049 --> 00:16:05,330
hot?

338
00:16:05,599 --> 00:16:09,679
I want to say shocking because it's not shocking, shocking, but none of these is 26%.

339
00:16:09,799 --> 00:16:12,580
And I would have actually guessed that would be a lot higher because for example,

340
00:16:12,590 --> 00:16:16,559
those 300,000 node packages, I'm guessing the majority of them have, like,

341
00:16:16,679 --> 00:16:18,679
like that American date function I was looking at like,

342
00:16:18,690 --> 00:16:22,700
there's no security test in there and, and nor would I ever expect there to be one?

343
00:16:22,710 --> 00:16:24,770
Right. No, and I hear you. And it's,

344
00:16:24,979 --> 00:16:26,960
I mean, it's good and bad. Right.

345
00:16:26,969 --> 00:16:31,859
I mean, one in four is still kind of scary that one in four aren't doing anything.

346
00:16:32,140 --> 00:16:32,789
But

347
00:16:33,039 --> 00:16:36,549
at the same time when you consider the audience for the, the survey,

348
00:16:36,559 --> 00:16:40,440
it is kind of interesting that at least it's only at 26%.

349
00:16:40,450 --> 00:16:43,539
This survey, we looked at demographics as part of it too. And

350
00:16:43,719 --> 00:16:46,609
66% of the respondents were developers

351
00:16:46,770 --> 00:16:50,640
now, they, you know, a lot of them probably work in organizations,

352
00:16:50,650 --> 00:16:52,570
but many of them are probably maintained

353
00:16:52,796 --> 00:16:53,635
as well.

354
00:16:53,856 --> 00:16:57,976
And so, unfortunately, that's one data point I don't have is, you know, are they,

355
00:16:58,085 --> 00:17:01,106
are they maintainers, are they working in an organization? Are they doing both?

356
00:17:01,116 --> 00:17:04,375
Who knows? Unfortunately. But yeah, it's,

357
00:17:04,786 --> 00:17:07,595
I was actually shocked by that graph too and I saw

358
00:17:07,605 --> 00:17:11,895
sat leading by such a wide margin over the next one.

359
00:17:11,906 --> 00:17:12,615
I mean, there's, you know,

360
00:17:12,625 --> 00:17:17,230
50 7% versus uh security test in Q A which is only 28 which again,

361
00:17:17,240 --> 00:17:20,369
I agree with you too is a little disappointing.

362
00:17:20,750 --> 00:17:24,531
Well, considering almost all of this stuff is network facing now, like, I mean,

363
00:17:24,540 --> 00:17:25,820
back in the day, it's one thing, you know,

364
00:17:25,830 --> 00:17:28,380
you have a bunch of software sitting on ad OS box grinding away.

365
00:17:28,390 --> 00:17:31,610
But in my experience now, pretty much all of this stuff is, you know,

366
00:17:31,951 --> 00:17:33,531
you touch it with the rest api

367
00:17:34,050 --> 00:17:35,589
but how else would you talk to it?

368
00:17:35,959 --> 00:17:41,089
So I have a theory behind this graph and I would be curious

369
00:17:41,319 --> 00:17:43,939
to get your thoughts on this elicit given you you're in space.

370
00:17:43,949 --> 00:17:48,510
So I, I work for elastic and I do product security at elastic.

371
00:17:48,520 --> 00:17:53,010
And one of the things that I deal with and I have complained at length about this on,

372
00:17:53,020 --> 00:17:54,530
on the podcast is

373
00:17:54,660 --> 00:17:56,050
many customers

374
00:17:56,385 --> 00:17:57,535
will run

375
00:17:57,785 --> 00:17:58,234
the SAT

376
00:17:58,425 --> 00:17:59,454
scanners

377
00:17:59,685 --> 00:18:04,574
and then send them to us and say, please fix all of these problems, which is of course,

378
00:18:04,714 --> 00:18:05,864
never going to happen.

379
00:18:05,875 --> 00:18:08,594
And then I spend an enormous amount of

380
00:18:08,604 --> 00:18:12,175
time helping to educate and explain what's actually

381
00:18:12,185 --> 00:18:14,564
going on with these because obviously sending me

382
00:18:14,574 --> 00:18:17,285
a scan with 300 findings saying fix them all

383
00:18:17,435 --> 00:18:18,204
is

384
00:18:18,979 --> 00:18:22,280
I don't have the time to explain what's wrong with that right now. Right. Right.

385
00:18:22,290 --> 00:18:24,920
But the thing is, the thing is I see is

386
00:18:25,180 --> 00:18:25,530
S

387
00:18:25,680 --> 00:18:25,689
a,

388
00:18:25,890 --> 00:18:28,520
is a thing security people can do

389
00:18:28,890 --> 00:18:33,150
and get a measurable result out of they know they can run a scan

390
00:18:33,380 --> 00:18:34,160
and then

391
00:18:34,459 --> 00:18:39,069
I can say, oh, we fixed a bunch of stuff, run it again and the number goes down.

392
00:18:39,310 --> 00:18:43,550
And so I think it, it's, it's an interesting metric for people.

393
00:18:43,839 --> 00:18:45,290
Not because

394
00:18:45,439 --> 00:18:47,530
I think it's necessarily useful in the way a

395
00:18:47,540 --> 00:18:49,540
lot of them think it is but because it gives

396
00:18:49,550 --> 00:18:52,239
them something to look at and understand which I

397
00:18:52,250 --> 00:18:54,310
think none of the other options in that list.

398
00:18:54,439 --> 00:18:57,229
-- They're a little more squishy.
-- Yeah. I think that's fair.

399
00:18:57,239 --> 00:19:00,660
I also think there's, there's two other things that I actually, as I look at this,

400
00:19:00,670 --> 00:19:01,329
I kind of

401
00:19:01,439 --> 00:19:02,790
think play into it. One,

402
00:19:02,979 --> 00:19:05,680
there is some developer heavy bias, right.

403
00:19:05,689 --> 00:19:08,619
With it being 66% developers responding.

404
00:19:08,630 --> 00:19:11,449
Yeah, they're they're gonna see the fact that SAS T is running.

405
00:19:11,459 --> 00:19:15,170
They may not necessarily be aware that someone at some point is doing a dynamic test.

406
00:19:15,180 --> 00:19:19,030
They may not fully be aware of security test cases that are built into their Q A.

407
00:19:19,250 --> 00:19:25,219
But I think the other thing that does happen here, I think SAS T is well enough known

408
00:19:25,619 --> 00:19:26,400
and built,

409
00:19:26,410 --> 00:19:31,680
most of the SAS solutions are built now in a way that they fairly easily integrate

410
00:19:31,839 --> 00:19:33,040
to the pipeline, right?

411
00:19:33,050 --> 00:19:35,329
They're either integrated into build tools

412
00:19:35,339 --> 00:19:37,829
or they're integrated into repository.

413
00:19:37,839 --> 00:19:39,800
So either when they do a commit or they do a build,

414
00:19:39,949 --> 00:19:44,400
the SAS tool kicks off and does its thing now what they do with the results of that,

415
00:19:44,410 --> 00:19:45,319
who knows, right?

416
00:19:45,329 --> 00:19:50,790
They may or may not be leveraging it but it it it's easier to plug that in than say ad A

417
00:19:50,979 --> 00:19:52,400
S tool where you have to, you know,

418
00:19:52,410 --> 00:19:55,449
it has to go out and spider a website and find all the page

419
00:19:55,900 --> 00:19:58,119
and know how to interact with all the input forms.

420
00:19:58,130 --> 00:20:01,550
And if you're doing URL rewriting and other things, it screws it all up, you know,

421
00:20:01,560 --> 00:20:03,920
or Threat modeling, which I am.

422
00:20:03,930 --> 00:20:08,760
I'm a lover of Threat modeling and it saddens me deeply to see 19%.

423
00:20:08,770 --> 00:20:09,160
In fact,

424
00:20:09,170 --> 00:20:11,459
I had an analyst who I met with yesterday suggest to

425
00:20:11,469 --> 00:20:13,800
me that their numbers say it's even lower than that.

426
00:20:13,839 --> 00:20:16,050
Yeah, I was gonna say 19 seems pretty high to me.

427
00:20:16,060 --> 00:20:20,890
-- So
-- that, that, that saddens me, but that's, you know, what we're working toward.

428
00:20:20,900 --> 00:20:21,800
And I think some of that,

429
00:20:21,810 --> 00:20:24,640
that I have all sorts of theories on what we can do to make that better.

430
00:20:24,800 --> 00:20:25,439
But yeah, I think

431
00:20:25,540 --> 00:20:26,540
overall, I think S

432
00:20:26,660 --> 00:20:26,670
A

433
00:20:26,819 --> 00:20:30,560
is probably one of those ones that's easier to integrate.

434
00:20:30,569 --> 00:20:34,199
SC A is actually pretty easy to integrate too.

435
00:20:34,209 --> 00:20:38,479
What is SC A, so that's software composition analysis ie you know,

436
00:20:38,489 --> 00:20:40,239
like what we do here at sneak, you know, and,

437
00:20:40,250 --> 00:20:43,030
and we do make it very easy to integrate that into the pipeline.

438
00:20:43,040 --> 00:20:46,630
And I think some of the other tools that are in that same space, do you know,

439
00:20:46,640 --> 00:20:48,000
are there as well?

440
00:20:48,010 --> 00:20:49,079
It's just, I think that

441
00:20:49,329 --> 00:20:53,579
that particular solution, the idea of SCA I is a little bit younger.

442
00:20:53,780 --> 00:20:55,449
SAT, I mean, we've been doing SAT for TW

443
00:20:55,650 --> 00:20:58,599
years in some form or another. At least

444
00:20:59,270 --> 00:21:01,680
I can think back 15 years ago

445
00:21:01,969 --> 00:21:02,920
running

446
00:21:03,050 --> 00:21:06,619
the vulnerability management program for that fintech company I was

447
00:21:06,630 --> 00:21:09,170
talking about and that was one of our big initiatives,

448
00:21:09,180 --> 00:21:10,880
was bringing in SAS tools and,

449
00:21:11,030 --> 00:21:14,540
and getting them automated and integrated into our SDLC.

450
00:21:14,550 --> 00:21:19,329
So I think that probably has a lot to do with it as well that, you know,

451
00:21:19,359 --> 00:21:22,160
SAS is well established and it's, it's well integrated.

452
00:21:22,170 --> 00:21:25,319
-- Sure,
-- I, I think that's fair. Now, I I will say

453
00:21:25,780 --> 00:21:28,729
one of one of my opinions is that

454
00:21:29,069 --> 00:21:30,180
I think

455
00:21:30,410 --> 00:21:32,209
composition analysis

456
00:21:32,410 --> 00:21:33,969
has a much brighter future than

457
00:21:34,260 --> 00:21:37,589
SAT because I feel like, you know, you mentioned SAS has been around for 20 plus years

458
00:21:37,750 --> 00:21:39,209
and it still sucks pretty hard.

459
00:21:39,670 --> 00:21:43,849
And I'm not gonna say composition analysis is awesome because I think it's,

460
00:21:43,859 --> 00:21:45,170
it's got a long road,

461
00:21:45,380 --> 00:21:48,250
but I feel like it's as bad as Sass

462
00:21:48,479 --> 00:21:51,800
and it's brand new, which gives me tons of hope, right?

463
00:21:51,989 --> 00:21:54,050
And I know that doesn't sound like the most

464
00:21:54,239 --> 00:21:57,770
compelling way to describe a AAA tool.

465
00:21:57,780 --> 00:22:00,189
But if you understood how I usually talk about

466
00:22:00,199 --> 00:22:02,630
this stuff that is high praise coming from me.

467
00:22:02,829 --> 00:22:07,219
-- So
-- sure. No, but I get what you're saying, right? I mean, we look at S A and

468
00:22:07,339 --> 00:22:09,310
one of the biggest complexities S

469
00:22:09,500 --> 00:22:09,510
A

470
00:22:09,729 --> 00:22:15,239
is you're asking an automated tool to do a lot of really complex stuff.

471
00:22:15,250 --> 00:22:16,729
And the end result is

472
00:22:16,910 --> 00:22:19,189
where I know you were going with that story before

473
00:22:19,199 --> 00:22:22,640
is people send you these scan results at elastic.

474
00:22:22,650 --> 00:22:24,780
Hey, here's all your problems, fix them all it's like,

475
00:22:24,969 --> 00:22:28,250
yeah, probably 90% of these are false positives.

476
00:22:28,569 --> 00:22:28,800
Like,

477
00:22:29,569 --> 00:22:30,119
right.

478
00:22:30,130 --> 00:22:30,479
I mean,

479
00:22:30,489 --> 00:22:33,109
so we all get that and I think anybody who's run

480
00:22:33,119 --> 00:22:37,150
a SASS tool understands the complexity and the trouble with that.

481
00:22:37,160 --> 00:22:38,760
In fact, I always tell people too, it's like

482
00:22:39,040 --> 00:22:41,579
if you're gonna launch a SAS solution, you gotta look at that.

483
00:22:41,589 --> 00:22:45,079
Like, and this is, this is where I date myself, but back when web application,

484
00:22:45,089 --> 00:22:46,180
firewalls were coming out,

485
00:22:46,319 --> 00:22:47,739
it was the same thing like people thought, oh,

486
00:22:47,750 --> 00:22:49,760
we're just gonna plug this in and it's gonna work.

487
00:22:49,770 --> 00:22:52,699
I'm like, no, you're gonna plug that in and it's gonna break everything

488
00:22:52,839 --> 00:22:55,890
and you're going to spend a year just getting it configured.

489
00:22:56,020 --> 00:22:59,160
So you have to plan for that year to get it configured

490
00:22:59,170 --> 00:23:01,420
and then you have to plan that you're gonna be managing that

491
00:23:01,530 --> 00:23:04,069
reconfiguring it and optimizing it

492
00:23:04,199 --> 00:23:06,430
for the rest of the time that you own it.

493
00:23:06,439 --> 00:23:10,069
So figure all that into your ro I because it's gonna be part of it.

494
00:23:10,079 --> 00:23:14,569
And I think we see that with SAT, I'm hoping SC A is a little more concrete

495
00:23:14,750 --> 00:23:15,469
in that.

496
00:23:15,479 --> 00:23:17,349
There's a little bit easier capability,

497
00:23:17,359 --> 00:23:20,630
especially with these ecosystems and package managers to tie into that

498
00:23:20,869 --> 00:23:23,910
and get a lot of information really quickly in one place.

499
00:23:24,020 --> 00:23:25,130
Problem with that with

500
00:23:25,390 --> 00:23:28,199
S A is you have no roadmap to follow at all. Right.

501
00:23:28,209 --> 00:23:28,469
I mean,

502
00:23:28,479 --> 00:23:30,550
people can write code in a million different ways and

503
00:23:30,560 --> 00:23:32,810
they do write code in a million different ways.

504
00:23:32,880 --> 00:23:33,560
I've been there.

505
00:23:33,569 --> 00:23:35,050
I'm ashamed of some of the stuff that I

506
00:23:35,060 --> 00:23:37,760
know is still sitting in a production environment somewhere.

507
00:23:38,030 --> 00:23:42,160
But, hey, you know, I mean, that's, that's part of the fun of it. I guess so.

508
00:23:42,170 --> 00:23:44,699
Yeah, I, I definitely hear where you're, you're coming from there and I,

509
00:23:44,709 --> 00:23:46,229
I think that it's,

510
00:23:46,839 --> 00:23:49,579
we have the opportunity to make ac, a pretty,

511
00:23:49,589 --> 00:23:52,819
a pretty strong compelling tool obviously.

512
00:23:52,829 --> 00:23:55,050
Again, you know, I mean, my, my sneak bias here,

513
00:23:55,060 --> 00:23:58,140
that's where I'm hoping to see it go because I mean, this,

514
00:23:58,150 --> 00:24:00,260
that's what we're focused on is how do we,

515
00:24:00,609 --> 00:24:03,760
how do we get developers in a position where they understand this?

516
00:24:03,770 --> 00:24:06,880
And it's a tool that works easily and all that happy stuff so that

517
00:24:07,000 --> 00:24:07,930
it's not that s

518
00:24:08,050 --> 00:24:10,359
a tool that they know they're gonna run it through and it's gonna, you know,

519
00:24:10,369 --> 00:24:13,359
come back to them with 8 billion results that now they have to sift

520
00:24:13,369 --> 00:24:14,359
through and figure out which ones are

521
00:24:14,369 --> 00:24:17,750
actually anything of exploitable in their code.

522
00:24:17,790 --> 00:24:19,599
Well, I mean, you, you kind of have that problem as well.

523
00:24:19,665 --> 00:24:22,405
Well, with, with SC A just because

524
00:24:22,785 --> 00:24:28,834
it, it, the example I always use is and this is absurd. But let's say you have a library

525
00:24:28,974 --> 00:24:29,564
that

526
00:24:29,844 --> 00:24:33,444
is an HTTP client and encodes MP threes, right?

527
00:24:33,775 --> 00:24:35,724
And you're not encoding MP threes.

528
00:24:35,734 --> 00:24:38,724
So you don't care about security issues in that part of it. But

529
00:24:38,984 --> 00:24:42,175
today an sc A tool will tell you all about them

530
00:24:42,185 --> 00:24:44,765
even though you aren't technically calling that code at all.

531
00:24:45,119 --> 00:24:45,510
Yeah.

532
00:24:45,739 --> 00:24:48,030
So what we call that is smart prioritization.

533
00:24:48,040 --> 00:24:50,420
I'm trying to avoid turning into a commercial here,

534
00:24:50,430 --> 00:24:54,430
but it is something that we've started to build as well, that ability to.

535
00:24:54,439 --> 00:24:58,569
All right, how do we prioritize these, if, if I'm using this package,

536
00:24:58,579 --> 00:25:00,930
but I'm not calling that vulnerable function.

537
00:25:01,040 --> 00:25:03,459
Obviously, it may be a critical

538
00:25:03,800 --> 00:25:05,369
severity vulnerability

539
00:25:05,839 --> 00:25:09,140
in out of context within just the context of that package,

540
00:25:09,250 --> 00:25:13,459
but within the context of my particular software,

541
00:25:13,589 --> 00:25:15,300
yeah, it's not an issue

542
00:25:15,489 --> 00:25:18,949
and I even look at what our research team does because you know,

543
00:25:18,959 --> 00:25:22,380
we've got a research team out there discovering new vulnerabilities all the time.

544
00:25:22,640 --> 00:25:24,410
And that's one of the things they do is, you know,

545
00:25:24,420 --> 00:25:26,349
they'll look at the context of the package though.

546
00:25:26,359 --> 00:25:27,900
How is this being used? OK.

547
00:25:27,910 --> 00:25:31,619
It's not sanitizing this input but is the context of this package?

548
00:25:31,750 --> 00:25:34,819
Is it expected that something downstream is

549
00:25:34,829 --> 00:25:37,390
responsible for doing that input validation?

550
00:25:37,400 --> 00:25:38,390
And in which case?

551
00:25:38,400 --> 00:25:42,900
-- All right, that's not an issue then of of any significant importance
-- and,

552
00:25:42,910 --> 00:25:45,290
and that's even cooler than anything I'd expect.

553
00:25:45,300 --> 00:25:48,381
I mean, so my poster child for this is something called Jackson data bomb,

554
00:25:48,462 --> 00:25:50,202
which I imagine

555
00:25:50,391 --> 00:25:56,442
it is basically it kind of it parses objects in some weird ways in Java.

556
00:25:56,621 --> 00:26:00,432
And it has a concept called Polymorphic de serialization,

557
00:26:00,442 --> 00:26:03,692
which is an extremely difficult thing to say basically what it comes

558
00:26:03,702 --> 00:26:06,161
down to is you can just disable it because it is dangerous.

559
00:26:06,171 --> 00:26:09,602
-- I mean, any time you're deserializing an object
-- well, and not many people use it.

560
00:26:09,612 --> 00:26:10,822
Right. Right. And like

561
00:26:10,923 --> 00:26:12,843
for example, in elastic search,

562
00:26:12,854 --> 00:26:17,104
we have Jackson data bind and we explicitly disable all of that functionality.

563
00:26:17,223 --> 00:26:22,104
But you can imagine what our, our SC A scans look like because we also can't upgrade it

564
00:26:22,313 --> 00:26:25,364
because there's some performance aggressions in the library.

565
00:26:25,374 --> 00:26:27,014
And obviously, when you have a performance,

566
00:26:27,213 --> 00:26:28,624
you know, document store,

567
00:26:28,784 --> 00:26:30,803
that's a big deal. And that's an easy one, right?

568
00:26:30,813 --> 00:26:34,244
You just have to be like is this function being called in a certain way? Yes, it is. OK.

569
00:26:34,254 --> 00:26:34,984
Great. None of these,

570
00:26:35,416 --> 00:26:35,505
you

571
00:26:35,645 --> 00:26:35,666
know.

572
00:26:35,776 --> 00:26:37,005
-- Yeah,
-- exactly.

573
00:26:37,135 --> 00:26:41,105
And that's, and I think that's one of the motions where SC A

574
00:26:41,355 --> 00:26:43,475
does have to continue to get better.

575
00:26:43,625 --> 00:26:46,625
Um And like I said, I know it's something that we're looking at and, and,

576
00:26:46,635 --> 00:26:48,215
and building solutions around.

577
00:26:48,225 --> 00:26:50,965
You brought up another interesting point there though too. And that's this

578
00:26:51,296 --> 00:26:52,975
the mantra from the security folks.

579
00:26:52,985 --> 00:26:55,826
And I say this is a 15 year security person after, you know,

580
00:26:55,836 --> 00:26:57,166
being a developer for a decade.

581
00:26:57,176 --> 00:26:58,965
God, I'm old. Holy cow.

582
00:26:59,495 --> 00:27:01,286
Yeah, we, we got you beat there, I think.

583
00:27:01,880 --> 00:27:05,719
But no, I mean, the mantra from security has always been get the latest and greatest,

584
00:27:05,750 --> 00:27:07,800
always upgrade to the latest and greatest fix your vil

585
00:27:08,160 --> 00:27:09,489
by getting the latest and greatest.

586
00:27:09,530 --> 00:27:13,160
Well, the fact of the matter is the latest and greatest isn't always the best.

587
00:27:13,369 --> 00:27:16,060
And, you know, I, I think that's a,

588
00:27:16,239 --> 00:27:18,869
that's something that we're becoming more aware of.

589
00:27:18,880 --> 00:27:21,060
The developer community has understood it for years.

590
00:27:21,069 --> 00:27:24,829
I think the security community is starting to appreciate and understand

591
00:27:24,839 --> 00:27:27,459
that this is the way things need to work too though,

592
00:27:27,469 --> 00:27:27,819
that,

593
00:27:28,319 --> 00:27:31,439
you know, sometimes you have to pick the least

594
00:27:32,020 --> 00:27:36,449
new vulnerable version or a non vulnerable version. So what is that version?

595
00:27:36,459 --> 00:27:39,790
What's the minimum version I can go to that gets rid of that vulnerability

596
00:27:39,800 --> 00:27:41,560
but has the least chance of breaking

597
00:27:41,569 --> 00:27:44,359
the functionality that I'm using or introducing

598
00:27:44,530 --> 00:27:46,739
issues with performance or other things.

599
00:27:46,750 --> 00:27:51,300
And I think we're, we're getting there from a security community perspective,

600
00:27:51,439 --> 00:27:52,369
but

601
00:27:52,500 --> 00:27:56,180
-- we still need to keep developing that empathy too.
-- Absolutely.

602
00:27:56,189 --> 00:27:56,420
My,

603
00:27:56,430 --> 00:28:01,510
my favorite example here is someone will hand me one of these large reports with say,

604
00:28:01,530 --> 00:28:04,939
let's say there are 50 findings and they'll say you got to fix these and I'll say

605
00:28:05,130 --> 00:28:08,140
we have the resources to fix 10. Which 10 do you want me to fix?

606
00:28:08,599 --> 00:28:10,660
Then? Then now it's hard right now. It's not.

607
00:28:10,670 --> 00:28:12,420
Oh wait, I have to think about this and I,

608
00:28:12,520 --> 00:28:15,459
and of course you're going to fix the 10 that actually matter the most,

609
00:28:15,599 --> 00:28:18,900
not the 10 at the top of the list or not the 10, even the,

610
00:28:18,910 --> 00:28:21,369
the scanner tells you are the most important

611
00:28:21,550 --> 00:28:21,979
so

612
00:28:22,310 --> 00:28:23,339
definitely, definitely. All right,

613
00:28:23,569 --> 00:28:28,939
we are about out of time and so I will let you close us down.

614
00:28:28,969 --> 00:28:30,696
Give us your final thoughts to Lisa.

615
00:28:30,936 --> 00:28:31,176
Yeah.

616
00:28:31,186 --> 00:28:35,916
So my final thoughts, I'll really quickly summarize the report, I guess is that,

617
00:28:35,926 --> 00:28:37,885
you know, we saw a lot of good, right.

618
00:28:37,895 --> 00:28:38,855
There were a lot of good things.

619
00:28:38,865 --> 00:28:42,666
We saw declining numbers in terms of new vulnerabilities discovered.

620
00:28:42,735 --> 00:28:45,145
We see better attitudes in dev

621
00:28:45,395 --> 00:28:48,056
sec ops and people really seeing security as

622
00:28:48,066 --> 00:28:51,776
a shared responsibility across those different disciplines,

623
00:28:51,852 --> 00:28:54,472
the developers, the security teams, the ops team,

624
00:28:54,482 --> 00:28:58,991
we also see a lot of the same old issues coming to light, you know,

625
00:28:59,001 --> 00:29:02,871
the same troubles we had with securing physical servers.

626
00:29:02,881 --> 00:29:04,812
We're seeing with containers, you know,

627
00:29:04,822 --> 00:29:09,911
the assumptions being made that an official image is secure is not valid.

628
00:29:09,921 --> 00:29:11,281
And there's there's some challenges from

629
00:29:11,291 --> 00:29:13,391
a security perspective when we think about

630
00:29:13,709 --> 00:29:14,369
OK.

631
00:29:14,380 --> 00:29:14,770
Yeah,

632
00:29:14,780 --> 00:29:17,300
one of the things we saw is there's a cross

633
00:29:17,369 --> 00:29:19,050
site scripting vulnerabilities are discovered

634
00:29:19,060 --> 00:29:20,819
more than any other vulnerability.

635
00:29:20,930 --> 00:29:23,869
But then we looked at how many projects did that actually impact.

636
00:29:23,880 --> 00:29:26,089
And there's no correlation, the most

637
00:29:26,310 --> 00:29:29,219
the most projects impacted were impacted by a

638
00:29:29,239 --> 00:29:32,359
small number of vulnerabilities of a particular type

639
00:29:32,609 --> 00:29:37,290
that were just happened to be discovered in really popular low dash and

640
00:29:37,670 --> 00:29:39,069
Jquery libraries.

641
00:29:39,300 --> 00:29:42,910
And so as a result, you know, you have this wide span impact.

642
00:29:42,920 --> 00:29:46,339
And so we need to continue to think about how we look

643
00:29:46,349 --> 00:29:50,640
at those metrics and those you know how we define our KPIS.

644
00:29:50,650 --> 00:29:52,869
And like I was saying earlier in the call

645
00:29:53,319 --> 00:29:59,089
really start to form our image of this not as a function of any one data point,

646
00:29:59,369 --> 00:30:03,359
but look at the modeling of that data and how the different

647
00:30:03,369 --> 00:30:06,430
data points interact and what they tell us about each other.

648
00:30:06,439 --> 00:30:06,989
So

649
00:30:07,280 --> 00:30:10,010
I think we see there's a lot of good, there's of course,

650
00:30:10,020 --> 00:30:12,930
as you would expect a lot of work to continue to do, I think.

651
00:30:12,939 --> 00:30:15,910
Yeah, open source. We're doing exciting things. You can't get away from it.

652
00:30:15,920 --> 00:30:16,989
So at least

653
00:30:17,199 --> 00:30:18,390
we're seeing

654
00:30:18,719 --> 00:30:23,550
the, the efforts and the attitudes coming around on that. And I think devs psychs

655
00:30:23,839 --> 00:30:26,300
-- is kind of leading the way with that.
-- Definitely awesome.

656
00:30:26,310 --> 00:30:28,660
That was, that was marvelous. So

657
00:30:28,900 --> 00:30:33,959
I will have links in the show notes to the report. I'll have a link to Alyssa's Twitter

658
00:30:34,219 --> 00:30:36,920
and obviously get in touch if this is something that

659
00:30:36,930 --> 00:30:40,280
interests you because it's a fascinating and awesome topic.

660
00:30:40,290 --> 00:30:44,829
And I want to thank sneak for doing this work because it's completely

661
00:30:44,839 --> 00:30:48,439
thankless and you probably get more complaints than anything about the report.

662
00:30:48,449 --> 00:30:51,119
But it is definitely valuable, I think.

663
00:30:51,469 --> 00:30:53,030
And I have no doubt

664
00:30:53,329 --> 00:30:58,530
in a couple of years as we have more time to understand and develop these models

665
00:30:58,739 --> 00:31:01,670
and the data itself, it's going to be

666
00:31:02,189 --> 00:31:04,989
a wonderful resource for all of us. So awesome.

667
00:31:05,000 --> 00:31:07,329
Thank you so much Alyssa for joining us.

668
00:31:07,339 --> 00:31:10,449
-- You have been an absolutely wonderful guest.
-- I appreciate it.

669
00:31:10,459 --> 00:31:11,680
Thank you for having me on.

670
00:31:11,790 --> 00:31:12,469
Great.

671
00:31:12,479 --> 00:31:15,650
So for those of you listening, you go to open source security podcast.com,

672
00:31:15,660 --> 00:31:16,510
hit up our show notes, you

673
00:31:16,630 --> 00:31:20,489
pound Os S podcast. Hashtag You hit us up on social media and

674
00:31:20,619 --> 00:31:21,290
Alyssa

675
00:31:21,439 --> 00:31:25,349
and Kurt have fantastic rest of your days. Thanks everybody. All right.

676
00:31:25,359 --> 00:31:28,520
Thanks, everybody. Marvelous. Thank you, everyone. Bye bye.